
if (typeof(JsTypes) == "undefined")
    var JsTypes = [];

//this.Enum = {};

// UnityEngine.AssetBundleCreateRequest
var UnityEngine$AssetBundleCreateRequest = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.AssetBundleCreateRequest",
    Kind: "Class",
    baseTypeName: "UnityEngine.AsyncOperation",
    definition: {
        ctor: function() { CS.Call(5, 0, 0, true, this); },
        get_assetBundle: function() { return CS.Call(2, 0, 0, false, this); },
        set_assetBundle: function(v) { return CS.Call(3, 0, 0, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$AssetBundleCreateRequest);

// UnityEngine.AssetBundleRequest
var UnityEngine$AssetBundleRequest = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.AssetBundleRequest",
    Kind: "Class",
    baseTypeName: "UnityEngine.AsyncOperation",
    definition: {
        ctor: function() { CS.Call(5, 1, 0, true, this); },
        get_asset: function() { return CS.Call(2, 1, 0, false, this); },
        set_asset: function(v) { return CS.Call(3, 1, 0, false, this, v); },
        get_allAssets: function() { return CS.Call(2, 1, 1, false, this); },
        set_allAssets: function(v) { return CS.Call(3, 1, 1, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$AssetBundleRequest);

// UnityEngine.AssetBundle
var UnityEngine$AssetBundle = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.AssetBundle",
    Kind: "Class",
    baseTypeName: "UnityEngine.Object",
    staticDefinition: {
        LoadFromFile$$String$$UInt32$$UInt64: function(a0/*String*/, a1/*UInt32*/, a2/*UInt64*/) { 
            return CS.Call(4, 2, 22, true, a0, a1, a2); //Ret: AssetBundle
        },
        LoadFromFile$$String$$UInt32: function(a0/*String*/, a1/*UInt32*/) { 
            return CS.Call(4, 2, 23, true, a0, a1); //Ret: AssetBundle
        },
        LoadFromFile$$String: function(a0/*String*/) { 
            return CS.Call(4, 2, 24, true, a0); //Ret: AssetBundle
        },
        LoadFromFileAsync$$String$$UInt32$$UInt64: function(a0/*String*/, a1/*UInt32*/, a2/*UInt64*/) { 
            return CS.Call(4, 2, 25, true, a0, a1, a2); //Ret: AssetBundleCreateRequest
        },
        LoadFromFileAsync$$String$$UInt32: function(a0/*String*/, a1/*UInt32*/) { 
            return CS.Call(4, 2, 26, true, a0, a1); //Ret: AssetBundleCreateRequest
        },
        LoadFromFileAsync$$String: function(a0/*String*/) { 
            return CS.Call(4, 2, 27, true, a0); //Ret: AssetBundleCreateRequest
        },
        LoadFromMemory$$Byte$Array$$UInt32: function(a0/*Byte[]*/, a1/*UInt32*/) { 
            return CS.Call(4, 2, 28, true, a0, a1); //Ret: AssetBundle
        },
        LoadFromMemory$$Byte$Array: function(a0/*Byte[]*/) { 
            return CS.Call(4, 2, 29, true, a0); //Ret: AssetBundle
        },
        LoadFromMemoryAsync$$Byte$Array$$UInt32: function(a0/*Byte[]*/, a1/*UInt32*/) { 
            return CS.Call(4, 2, 30, true, a0, a1); //Ret: AssetBundleCreateRequest
        },
        LoadFromMemoryAsync$$Byte$Array: function(a0/*Byte[]*/) { 
            return CS.Call(4, 2, 31, true, a0); //Ret: AssetBundleCreateRequest
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 2, 0, true, this); },
        get_mainAsset: function() { return CS.Call(2, 2, 0, false, this); },
        set_mainAsset: function(v) { return CS.Call(3, 2, 0, false, this, v); },
        get_isStreamedSceneAssetBundle: function() { return CS.Call(2, 2, 1, false, this); },
        set_isStreamedSceneAssetBundle: function(v) { return CS.Call(3, 2, 1, false, this, v); },
        Contains: function(a0/*String*/) { 
            return CS.Call(4, 2, 0, false, this, a0); //Ret: Boolean
        },
        GetAllAssetNames: function() { 
            return CS.Call(4, 2, 1, false, this); //Ret: String[]
        },
        GetAllScenePaths: function() { 
            return CS.Call(4, 2, 2, false, this); //Ret: String[]
        },
        LoadAllAssets$$Type: function(a0/*Type*/) { 
            return CS.Call(4, 2, 3, false, this, a0.get_FullName()); //Ret: Object[]
        },
        LoadAllAssets$1: function(t0) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 2, 4, false, this, native_t0); //Ret: T[]
        },
        LoadAllAssets: function() { 
            return CS.Call(4, 2, 5, false, this); //Ret: Object[]
        },
        LoadAllAssetsAsync$$Type: function(a0/*Type*/) { 
            return CS.Call(4, 2, 6, false, this, a0.get_FullName()); //Ret: AssetBundleRequest
        },
        LoadAllAssetsAsync$1: function(t0) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 2, 7, false, this, native_t0); //Ret: AssetBundleRequest
        },
        LoadAllAssetsAsync: function() { 
            return CS.Call(4, 2, 8, false, this); //Ret: AssetBundleRequest
        },
        LoadAsset$$String$$Type: function(a0/*String*/, a1/*Type*/) { 
            return CS.Call(4, 2, 9, false, this, a0, a1.get_FullName()); //Ret: Object
        },
        LoadAsset$1$$String: function(t0, a0/*String*/) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 2, 10, false, this, native_t0, a0); //Ret: T
        },
        LoadAsset$$String: function(a0/*String*/) { 
            return CS.Call(4, 2, 11, false, this, a0); //Ret: Object
        },
        LoadAssetAsync$$String$$Type: function(a0/*String*/, a1/*Type*/) { 
            return CS.Call(4, 2, 12, false, this, a0, a1.get_FullName()); //Ret: AssetBundleRequest
        },
        LoadAssetAsync$1$$String: function(t0, a0/*String*/) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 2, 13, false, this, native_t0, a0); //Ret: AssetBundleRequest
        },
        LoadAssetAsync$$String: function(a0/*String*/) { 
            return CS.Call(4, 2, 14, false, this, a0); //Ret: AssetBundleRequest
        },
        LoadAssetWithSubAssets$$String$$Type: function(a0/*String*/, a1/*Type*/) { 
            return CS.Call(4, 2, 15, false, this, a0, a1.get_FullName()); //Ret: Object[]
        },
        LoadAssetWithSubAssets$1$$String: function(t0, a0/*String*/) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 2, 16, false, this, native_t0, a0); //Ret: T[]
        },
        LoadAssetWithSubAssets$$String: function(a0/*String*/) { 
            return CS.Call(4, 2, 17, false, this, a0); //Ret: Object[]
        },
        LoadAssetWithSubAssetsAsync$$String$$Type: function(a0/*String*/, a1/*Type*/) { 
            return CS.Call(4, 2, 18, false, this, a0, a1.get_FullName()); //Ret: AssetBundleRequest
        },
        LoadAssetWithSubAssetsAsync$1$$String: function(t0, a0/*String*/) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 2, 19, false, this, native_t0, a0); //Ret: AssetBundleRequest
        },
        LoadAssetWithSubAssetsAsync$$String: function(a0/*String*/) { 
            return CS.Call(4, 2, 20, false, this, a0); //Ret: AssetBundleRequest
        },
        Unload: function(a0/*Boolean*/) { 
            return CS.Call(4, 2, 21, false, this, a0); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$AssetBundle);

// UnityEngine.AssetBundleManifest
var UnityEngine$AssetBundleManifest = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.AssetBundleManifest",
    Kind: "Class",
    baseTypeName: "UnityEngine.Object",
    definition: {
        ctor: function() { CS.Call(5, 3, 0, true, this); },
        GetAllAssetBundles: function() { 
            return CS.Call(4, 3, 0, false, this); //Ret: String[]
        },
        GetAllAssetBundlesWithVariant: function() { 
            return CS.Call(4, 3, 1, false, this); //Ret: String[]
        },
        GetAllDependencies: function(a0/*String*/) { 
            return CS.Call(4, 3, 2, false, this, a0); //Ret: String[]
        },
        GetAssetBundleHash: function(a0/*String*/) { 
            return CS.Call(4, 3, 3, false, this, a0); //Ret: Hash128
        },
        GetDirectDependencies: function(a0/*String*/) { 
            return CS.Call(4, 3, 4, false, this, a0); //Ret: String[]
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$AssetBundleManifest);

// UnityEngine.SystemInfo
var UnityEngine$SystemInfo = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.SystemInfo",
    Kind: "Class",
    baseTypeName: "System.Object",
    staticFields: {
        unsupportedIdentifier: {
            get: function() { return CS.Call(0, 4, 0, true); }, 
            set: function(v) { return CS.Call(1, 4, 0, true, v); }
        },
    },
    staticDefinition: {
        get_operatingSystem: function() { return CS.Call(2, 4, 0, true); },
        set_operatingSystem: function(v) { return CS.Call(3, 4, 0, true, v); },
        get_processorType: function() { return CS.Call(2, 4, 1, true); },
        set_processorType: function(v) { return CS.Call(3, 4, 1, true, v); },
        get_processorFrequency: function() { return CS.Call(2, 4, 2, true); },
        set_processorFrequency: function(v) { return CS.Call(3, 4, 2, true, v); },
        get_processorCount: function() { return CS.Call(2, 4, 3, true); },
        set_processorCount: function(v) { return CS.Call(3, 4, 3, true, v); },
        get_systemMemorySize: function() { return CS.Call(2, 4, 4, true); },
        set_systemMemorySize: function(v) { return CS.Call(3, 4, 4, true, v); },
        get_graphicsMemorySize: function() { return CS.Call(2, 4, 5, true); },
        set_graphicsMemorySize: function(v) { return CS.Call(3, 4, 5, true, v); },
        get_graphicsDeviceName: function() { return CS.Call(2, 4, 6, true); },
        set_graphicsDeviceName: function(v) { return CS.Call(3, 4, 6, true, v); },
        get_graphicsDeviceVendor: function() { return CS.Call(2, 4, 7, true); },
        set_graphicsDeviceVendor: function(v) { return CS.Call(3, 4, 7, true, v); },
        get_graphicsDeviceID: function() { return CS.Call(2, 4, 8, true); },
        set_graphicsDeviceID: function(v) { return CS.Call(3, 4, 8, true, v); },
        get_graphicsDeviceVendorID: function() { return CS.Call(2, 4, 9, true); },
        set_graphicsDeviceVendorID: function(v) { return CS.Call(3, 4, 9, true, v); },
        get_graphicsDeviceType: function() { return CS.Call(2, 4, 10, true); },
        set_graphicsDeviceType: function(v) { return CS.Call(3, 4, 10, true, v); },
        get_graphicsDeviceVersion: function() { return CS.Call(2, 4, 11, true); },
        set_graphicsDeviceVersion: function(v) { return CS.Call(3, 4, 11, true, v); },
        get_graphicsShaderLevel: function() { return CS.Call(2, 4, 12, true); },
        set_graphicsShaderLevel: function(v) { return CS.Call(3, 4, 12, true, v); },
        get_graphicsMultiThreaded: function() { return CS.Call(2, 4, 13, true); },
        set_graphicsMultiThreaded: function(v) { return CS.Call(3, 4, 13, true, v); },
        get_supportsShadows: function() { return CS.Call(2, 4, 14, true); },
        set_supportsShadows: function(v) { return CS.Call(3, 4, 14, true, v); },
        get_supportsRawShadowDepthSampling: function() { return CS.Call(2, 4, 15, true); },
        set_supportsRawShadowDepthSampling: function(v) { return CS.Call(3, 4, 15, true, v); },
        get_supportsRenderTextures: function() { return CS.Call(2, 4, 16, true); },
        set_supportsRenderTextures: function(v) { return CS.Call(3, 4, 16, true, v); },
        get_supportsMotionVectors: function() { return CS.Call(2, 4, 17, true); },
        set_supportsMotionVectors: function(v) { return CS.Call(3, 4, 17, true, v); },
        get_supportsRenderToCubemap: function() { return CS.Call(2, 4, 18, true); },
        set_supportsRenderToCubemap: function(v) { return CS.Call(3, 4, 18, true, v); },
        get_supportsImageEffects: function() { return CS.Call(2, 4, 19, true); },
        set_supportsImageEffects: function(v) { return CS.Call(3, 4, 19, true, v); },
        get_supports3DTextures: function() { return CS.Call(2, 4, 20, true); },
        set_supports3DTextures: function(v) { return CS.Call(3, 4, 20, true, v); },
        get_supports2DArrayTextures: function() { return CS.Call(2, 4, 21, true); },
        set_supports2DArrayTextures: function(v) { return CS.Call(3, 4, 21, true, v); },
        get_copyTextureSupport: function() { return CS.Call(2, 4, 22, true); },
        set_copyTextureSupport: function(v) { return CS.Call(3, 4, 22, true, v); },
        get_supportsComputeShaders: function() { return CS.Call(2, 4, 23, true); },
        set_supportsComputeShaders: function(v) { return CS.Call(3, 4, 23, true, v); },
        get_supportsInstancing: function() { return CS.Call(2, 4, 24, true); },
        set_supportsInstancing: function(v) { return CS.Call(3, 4, 24, true, v); },
        get_supportsSparseTextures: function() { return CS.Call(2, 4, 25, true); },
        set_supportsSparseTextures: function(v) { return CS.Call(3, 4, 25, true, v); },
        get_supportedRenderTargetCount: function() { return CS.Call(2, 4, 26, true); },
        set_supportedRenderTargetCount: function(v) { return CS.Call(3, 4, 26, true, v); },
        get_supportsStencil: function() { return CS.Call(2, 4, 27, true); },
        set_supportsStencil: function(v) { return CS.Call(3, 4, 27, true, v); },
        get_npotSupport: function() { return CS.Call(2, 4, 28, true); },
        set_npotSupport: function(v) { return CS.Call(3, 4, 28, true, v); },
        get_deviceUniqueIdentifier: function() { return CS.Call(2, 4, 29, true); },
        set_deviceUniqueIdentifier: function(v) { return CS.Call(3, 4, 29, true, v); },
        get_deviceName: function() { return CS.Call(2, 4, 30, true); },
        set_deviceName: function(v) { return CS.Call(3, 4, 30, true, v); },
        get_deviceModel: function() { return CS.Call(2, 4, 31, true); },
        set_deviceModel: function(v) { return CS.Call(3, 4, 31, true, v); },
        get_supportsAccelerometer: function() { return CS.Call(2, 4, 32, true); },
        set_supportsAccelerometer: function(v) { return CS.Call(3, 4, 32, true, v); },
        get_supportsGyroscope: function() { return CS.Call(2, 4, 33, true); },
        set_supportsGyroscope: function(v) { return CS.Call(3, 4, 33, true, v); },
        get_supportsLocationService: function() { return CS.Call(2, 4, 34, true); },
        set_supportsLocationService: function(v) { return CS.Call(3, 4, 34, true, v); },
        get_supportsVibration: function() { return CS.Call(2, 4, 35, true); },
        set_supportsVibration: function(v) { return CS.Call(3, 4, 35, true, v); },
        get_supportsAudio: function() { return CS.Call(2, 4, 36, true); },
        set_supportsAudio: function(v) { return CS.Call(3, 4, 36, true, v); },
        get_deviceType: function() { return CS.Call(2, 4, 37, true); },
        set_deviceType: function(v) { return CS.Call(3, 4, 37, true, v); },
        get_maxTextureSize: function() { return CS.Call(2, 4, 38, true); },
        set_maxTextureSize: function(v) { return CS.Call(3, 4, 38, true, v); },
        SupportsRenderTextureFormat: function(a0/*RenderTextureFormat*/) { 
            return CS.Call(4, 4, 0, true, a0); //Ret: Boolean
        },
        SupportsTextureFormat: function(a0/*TextureFormat*/) { 
            return CS.Call(4, 4, 1, true, a0); //Ret: Boolean
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 4, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$SystemInfo);

// UnityEngine.WaitForSeconds
var UnityEngine$WaitForSeconds = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.WaitForSeconds",
    Kind: "Class",
    baseTypeName: "UnityEngine.YieldInstruction",
    definition: {
        ctor: function(a0) { CS.Call(5, 5, 0, true, this, a0); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$WaitForSeconds);

// UnityEngine.WaitForFixedUpdate
var UnityEngine$WaitForFixedUpdate = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.WaitForFixedUpdate",
    Kind: "Class",
    baseTypeName: "UnityEngine.YieldInstruction",
    definition: {
        ctor: function() { CS.Call(5, 6, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$WaitForFixedUpdate);

// UnityEngine.WaitForEndOfFrame
var UnityEngine$WaitForEndOfFrame = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.WaitForEndOfFrame",
    Kind: "Class",
    baseTypeName: "UnityEngine.YieldInstruction",
    definition: {
        ctor: function() { CS.Call(5, 7, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$WaitForEndOfFrame);

// UnityEngine.CustomYieldInstruction
var UnityEngine$CustomYieldInstruction = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.CustomYieldInstruction",
    Kind: "Class",
    baseTypeName: "System.Object",
    interfaceNames: ["System.Collections.IEnumerator"],
    definition: {
        get_keepWaiting: function() { return CS.Call(2, 8, 0, false, this); },
        set_keepWaiting: function(v) { return CS.Call(3, 8, 0, false, this, v); },
        get_Current: function() { return CS.Call(2, 8, 1, false, this); },
        set_Current: function(v) { return CS.Call(3, 8, 1, false, this, v); },
        MoveNext: function() { 
            return CS.Call(4, 8, 0, false, this); //Ret: Boolean
        },
        Reset: function() { 
            return CS.Call(4, 8, 1, false, this); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$CustomYieldInstruction);

// UnityEngine.WaitWhile
var UnityEngine$WaitWhile = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.WaitWhile",
    Kind: "Class",
    baseTypeName: "UnityEngine.CustomYieldInstruction",
    interfaceNames: ["System.Collections.IEnumerator"],
    definition: {
        ctor: function(a0) { CS.Call(5, 9, 0, true, this, a0); },
        get_keepWaiting: function() { return CS.Call(2, 9, 0, false, this); },
        set_keepWaiting: function(v) { return CS.Call(3, 9, 0, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$WaitWhile);

// UnityEngine.WaitUntil
var UnityEngine$WaitUntil = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.WaitUntil",
    Kind: "Class",
    baseTypeName: "UnityEngine.CustomYieldInstruction",
    interfaceNames: ["System.Collections.IEnumerator"],
    definition: {
        ctor: function(a0) { CS.Call(5, 10, 0, true, this, a0); },
        get_keepWaiting: function() { return CS.Call(2, 10, 0, false, this); },
        set_keepWaiting: function(v) { return CS.Call(3, 10, 0, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$WaitUntil);

// UnityEngine.Coroutine
var UnityEngine$Coroutine = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Coroutine",
    Kind: "Class",
    baseTypeName: "UnityEngine.YieldInstruction",
};
jsb_ReplaceOrPushJsType(UnityEngine$Coroutine);

// UnityEngine.ScriptableObject
var UnityEngine$ScriptableObject = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.ScriptableObject",
    Kind: "Class",
    baseTypeName: "UnityEngine.Object",
    staticDefinition: {
        CreateInstance$$Type: function(a0/*Type*/) { 
            return CS.Call(4, 12, 0, true, a0.get_FullName()); //Ret: ScriptableObject
        },
        CreateInstance$$String: function(a0/*String*/) { 
            return CS.Call(4, 12, 1, true, a0); //Ret: ScriptableObject
        },
        CreateInstance$1: function(t0) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 12, 2, true, native_t0); //Ret: T
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 12, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$ScriptableObject);

// UnityEngine.Profiler
var UnityEngine$Profiler = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Profiler",
    Kind: "Class",
    baseTypeName: "System.Object",
    staticDefinition: {
        get_supported: function() { return CS.Call(2, 13, 0, true); },
        set_supported: function(v) { return CS.Call(3, 13, 0, true, v); },
        get_logFile: function() { return CS.Call(2, 13, 1, true); },
        set_logFile: function(v) { return CS.Call(3, 13, 1, true, v); },
        get_enableBinaryLog: function() { return CS.Call(2, 13, 2, true); },
        set_enableBinaryLog: function(v) { return CS.Call(3, 13, 2, true, v); },
        get_enabled: function() { return CS.Call(2, 13, 3, true); },
        set_enabled: function(v) { return CS.Call(3, 13, 3, true, v); },
        get_maxNumberOfSamplesPerFrame: function() { return CS.Call(2, 13, 4, true); },
        set_maxNumberOfSamplesPerFrame: function(v) { return CS.Call(3, 13, 4, true, v); },
        get_usedHeapSize: function() { return CS.Call(2, 13, 5, true); },
        set_usedHeapSize: function(v) { return CS.Call(3, 13, 5, true, v); },
        AddFramesFromFile: function(a0/*String*/) { 
            return CS.Call(4, 13, 0, true, a0); //Ret: Void
        },
        BeginSample$$String$$Object: function(a0/*String*/, a1/*Object*/) { 
            return CS.Call(4, 13, 1, true, a0, a1); //Ret: Void
        },
        BeginSample$$String: function(a0/*String*/) { 
            return CS.Call(4, 13, 2, true, a0); //Ret: Void
        },
        EndSample: function() { 
            return CS.Call(4, 13, 3, true); //Ret: Void
        },
        GetMonoHeapSize: function() { 
            return CS.Call(4, 13, 4, true); //Ret: UInt32
        },
        GetMonoUsedSize: function() { 
            return CS.Call(4, 13, 5, true); //Ret: UInt32
        },
        GetRuntimeMemorySize: function(a0/*Object*/) { 
            return CS.Call(4, 13, 6, true, a0); //Ret: Int32
        },
        GetTotalAllocatedMemory: function() { 
            return CS.Call(4, 13, 7, true); //Ret: UInt32
        },
        GetTotalReservedMemory: function() { 
            return CS.Call(4, 13, 8, true); //Ret: UInt32
        },
        GetTotalUnusedReservedMemory: function() { 
            return CS.Call(4, 13, 9, true); //Ret: UInt32
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 13, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Profiler);

// UnityEngine.Caching
var UnityEngine$Caching = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Caching",
    Kind: "Class",
    baseTypeName: "System.Object",
    staticDefinition: {
        get_spaceFree: function() { return CS.Call(2, 14, 0, true); },
        set_spaceFree: function(v) { return CS.Call(3, 14, 0, true, v); },
        get_maximumAvailableDiskSpace: function() { return CS.Call(2, 14, 1, true); },
        set_maximumAvailableDiskSpace: function(v) { return CS.Call(3, 14, 1, true, v); },
        get_spaceOccupied: function() { return CS.Call(2, 14, 2, true); },
        set_spaceOccupied: function(v) { return CS.Call(3, 14, 2, true, v); },
        get_expirationDelay: function() { return CS.Call(2, 14, 3, true); },
        set_expirationDelay: function(v) { return CS.Call(3, 14, 3, true, v); },
        get_enabled: function() { return CS.Call(2, 14, 4, true); },
        set_enabled: function(v) { return CS.Call(3, 14, 4, true, v); },
        get_compressionEnabled: function() { return CS.Call(2, 14, 5, true); },
        set_compressionEnabled: function(v) { return CS.Call(3, 14, 5, true, v); },
        get_ready: function() { return CS.Call(2, 14, 6, true); },
        set_ready: function(v) { return CS.Call(3, 14, 6, true, v); },
        Authorize$$String$$String$$Int64$$Int32$$String: function(a0/*String*/, a1/*String*/, a2/*Int64*/, a3/*Int32*/, a4/*String*/) { 
            return CS.Call(4, 14, 0, true, a0, a1, a2, a3, a4); //Ret: Boolean
        },
        Authorize$$String$$String$$Int64$$String: function(a0/*String*/, a1/*String*/, a2/*Int64*/, a3/*String*/) { 
            return CS.Call(4, 14, 1, true, a0, a1, a2, a3); //Ret: Boolean
        },
        CleanCache: function() { 
            return CS.Call(4, 14, 2, true); //Ret: Boolean
        },
        IsVersionCached$$String$$Hash128: function(a0/*String*/, a1/*Hash128*/) { 
            return CS.Call(4, 14, 3, true, a0, a1); //Ret: Boolean
        },
        IsVersionCached$$String$$Int32: function(a0/*String*/, a1/*Int32*/) { 
            return CS.Call(4, 14, 4, true, a0, a1); //Ret: Boolean
        },
        MarkAsUsed$$String$$Hash128: function(a0/*String*/, a1/*Hash128*/) { 
            return CS.Call(4, 14, 5, true, a0, a1); //Ret: Boolean
        },
        MarkAsUsed$$String$$Int32: function(a0/*String*/, a1/*Int32*/) { 
            return CS.Call(4, 14, 6, true, a0, a1); //Ret: Boolean
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 14, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Caching);

// UnityEngine.CrashReport
var UnityEngine$CrashReport = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.CrashReport",
    Kind: "Class",
    baseTypeName: "System.Object",
    fields: {
        time: {
            get: function() { return CS.Call(0, 15, 0, false, this); }, 
            set: function(v) { return CS.Call(1, 15, 0, false, this, v); }
        },
        text: {
            get: function() { return CS.Call(0, 15, 1, false, this); }, 
            set: function(v) { return CS.Call(1, 15, 1, false, this, v); }
        },
    },
    staticDefinition: {
        get_reports: function() { return CS.Call(2, 15, 0, true); },
        set_reports: function(v) { return CS.Call(3, 15, 0, true, v); },
        get_lastReport: function() { return CS.Call(2, 15, 1, true); },
        set_lastReport: function(v) { return CS.Call(3, 15, 1, true, v); },
        RemoveAll: function() { 
            return CS.Call(4, 15, 1, true); //Ret: Void
        },
    },
    definition: {
        Remove: function() { 
            return CS.Call(4, 15, 0, false, this); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$CrashReport);

// UnityEngine.OcclusionArea
var UnityEngine$OcclusionArea = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.OcclusionArea",
    Kind: "Class",
    baseTypeName: "UnityEngine.Component",
    definition: {
        ctor: function() { CS.Call(5, 16, 0, true, this); },
        get_center: function() { return CS.Call(2, 16, 0, false, this); },
        set_center: function(v) { return CS.Call(3, 16, 0, false, this, v); },
        get_size: function() { return CS.Call(2, 16, 1, false, this); },
        set_size: function(v) { return CS.Call(3, 16, 1, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$OcclusionArea);

// UnityEngine.OcclusionPortal
var UnityEngine$OcclusionPortal = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.OcclusionPortal",
    Kind: "Class",
    baseTypeName: "UnityEngine.Component",
    definition: {
        ctor: function() { CS.Call(5, 17, 0, true, this); },
        get_open: function() { return CS.Call(2, 17, 0, false, this); },
        set_open: function(v) { return CS.Call(3, 17, 0, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$OcclusionPortal);

// UnityEngine.RenderSettings
var UnityEngine$RenderSettings = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.RenderSettings",
    Kind: "Class",
    baseTypeName: "UnityEngine.Object",
    staticDefinition: {
        get_fog: function() { return CS.Call(2, 18, 0, true); },
        set_fog: function(v) { return CS.Call(3, 18, 0, true, v); },
        get_fogMode: function() { return CS.Call(2, 18, 1, true); },
        set_fogMode: function(v) { return CS.Call(3, 18, 1, true, v); },
        get_fogColor: function() { return CS.Call(2, 18, 2, true); },
        set_fogColor: function(v) { return CS.Call(3, 18, 2, true, v); },
        get_fogDensity: function() { return CS.Call(2, 18, 3, true); },
        set_fogDensity: function(v) { return CS.Call(3, 18, 3, true, v); },
        get_fogStartDistance: function() { return CS.Call(2, 18, 4, true); },
        set_fogStartDistance: function(v) { return CS.Call(3, 18, 4, true, v); },
        get_fogEndDistance: function() { return CS.Call(2, 18, 5, true); },
        set_fogEndDistance: function(v) { return CS.Call(3, 18, 5, true, v); },
        get_ambientMode: function() { return CS.Call(2, 18, 6, true); },
        set_ambientMode: function(v) { return CS.Call(3, 18, 6, true, v); },
        get_ambientSkyColor: function() { return CS.Call(2, 18, 7, true); },
        set_ambientSkyColor: function(v) { return CS.Call(3, 18, 7, true, v); },
        get_ambientEquatorColor: function() { return CS.Call(2, 18, 8, true); },
        set_ambientEquatorColor: function(v) { return CS.Call(3, 18, 8, true, v); },
        get_ambientGroundColor: function() { return CS.Call(2, 18, 9, true); },
        set_ambientGroundColor: function(v) { return CS.Call(3, 18, 9, true, v); },
        get_ambientLight: function() { return CS.Call(2, 18, 10, true); },
        set_ambientLight: function(v) { return CS.Call(3, 18, 10, true, v); },
        get_ambientIntensity: function() { return CS.Call(2, 18, 11, true); },
        set_ambientIntensity: function(v) { return CS.Call(3, 18, 11, true, v); },
        get_ambientProbe: function() { return CS.Call(2, 18, 12, true); },
        set_ambientProbe: function(v) { return CS.Call(3, 18, 12, true, v); },
        get_reflectionIntensity: function() { return CS.Call(2, 18, 13, true); },
        set_reflectionIntensity: function(v) { return CS.Call(3, 18, 13, true, v); },
        get_reflectionBounces: function() { return CS.Call(2, 18, 14, true); },
        set_reflectionBounces: function(v) { return CS.Call(3, 18, 14, true, v); },
        get_haloStrength: function() { return CS.Call(2, 18, 15, true); },
        set_haloStrength: function(v) { return CS.Call(3, 18, 15, true, v); },
        get_flareStrength: function() { return CS.Call(2, 18, 16, true); },
        set_flareStrength: function(v) { return CS.Call(3, 18, 16, true, v); },
        get_flareFadeSpeed: function() { return CS.Call(2, 18, 17, true); },
        set_flareFadeSpeed: function(v) { return CS.Call(3, 18, 17, true, v); },
        get_skybox: function() { return CS.Call(2, 18, 18, true); },
        set_skybox: function(v) { return CS.Call(3, 18, 18, true, v); },
        get_defaultReflectionMode: function() { return CS.Call(2, 18, 19, true); },
        set_defaultReflectionMode: function(v) { return CS.Call(3, 18, 19, true, v); },
        get_defaultReflectionResolution: function() { return CS.Call(2, 18, 20, true); },
        set_defaultReflectionResolution: function(v) { return CS.Call(3, 18, 20, true, v); },
        get_customReflection: function() { return CS.Call(2, 18, 21, true); },
        set_customReflection: function(v) { return CS.Call(3, 18, 21, true, v); },
    },
    definition: {
        ctor: function() { CS.Call(5, 18, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$RenderSettings);

// UnityEngine.QualitySettings
var UnityEngine$QualitySettings = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.QualitySettings",
    Kind: "Class",
    baseTypeName: "UnityEngine.Object",
    staticDefinition: {
        get_names: function() { return CS.Call(2, 19, 0, true); },
        set_names: function(v) { return CS.Call(3, 19, 0, true, v); },
        get_pixelLightCount: function() { return CS.Call(2, 19, 1, true); },
        set_pixelLightCount: function(v) { return CS.Call(3, 19, 1, true, v); },
        get_shadowProjection: function() { return CS.Call(2, 19, 2, true); },
        set_shadowProjection: function(v) { return CS.Call(3, 19, 2, true, v); },
        get_shadowCascades: function() { return CS.Call(2, 19, 3, true); },
        set_shadowCascades: function(v) { return CS.Call(3, 19, 3, true, v); },
        get_shadowDistance: function() { return CS.Call(2, 19, 4, true); },
        set_shadowDistance: function(v) { return CS.Call(3, 19, 4, true, v); },
        get_shadowResolution: function() { return CS.Call(2, 19, 5, true); },
        set_shadowResolution: function(v) { return CS.Call(3, 19, 5, true, v); },
        get_shadowNearPlaneOffset: function() { return CS.Call(2, 19, 6, true); },
        set_shadowNearPlaneOffset: function(v) { return CS.Call(3, 19, 6, true, v); },
        get_shadowCascade2Split: function() { return CS.Call(2, 19, 7, true); },
        set_shadowCascade2Split: function(v) { return CS.Call(3, 19, 7, true, v); },
        get_shadowCascade4Split: function() { return CS.Call(2, 19, 8, true); },
        set_shadowCascade4Split: function(v) { return CS.Call(3, 19, 8, true, v); },
        get_masterTextureLimit: function() { return CS.Call(2, 19, 9, true); },
        set_masterTextureLimit: function(v) { return CS.Call(3, 19, 9, true, v); },
        get_anisotropicFiltering: function() { return CS.Call(2, 19, 10, true); },
        set_anisotropicFiltering: function(v) { return CS.Call(3, 19, 10, true, v); },
        get_lodBias: function() { return CS.Call(2, 19, 11, true); },
        set_lodBias: function(v) { return CS.Call(3, 19, 11, true, v); },
        get_maximumLODLevel: function() { return CS.Call(2, 19, 12, true); },
        set_maximumLODLevel: function(v) { return CS.Call(3, 19, 12, true, v); },
        get_particleRaycastBudget: function() { return CS.Call(2, 19, 13, true); },
        set_particleRaycastBudget: function(v) { return CS.Call(3, 19, 13, true, v); },
        get_softVegetation: function() { return CS.Call(2, 19, 14, true); },
        set_softVegetation: function(v) { return CS.Call(3, 19, 14, true, v); },
        get_realtimeReflectionProbes: function() { return CS.Call(2, 19, 15, true); },
        set_realtimeReflectionProbes: function(v) { return CS.Call(3, 19, 15, true, v); },
        get_billboardsFaceCameraPosition: function() { return CS.Call(2, 19, 16, true); },
        set_billboardsFaceCameraPosition: function(v) { return CS.Call(3, 19, 16, true, v); },
        get_maxQueuedFrames: function() { return CS.Call(2, 19, 17, true); },
        set_maxQueuedFrames: function(v) { return CS.Call(3, 19, 17, true, v); },
        get_vSyncCount: function() { return CS.Call(2, 19, 18, true); },
        set_vSyncCount: function(v) { return CS.Call(3, 19, 18, true, v); },
        get_antiAliasing: function() { return CS.Call(2, 19, 19, true); },
        set_antiAliasing: function(v) { return CS.Call(3, 19, 19, true, v); },
        get_desiredColorSpace: function() { return CS.Call(2, 19, 20, true); },
        set_desiredColorSpace: function(v) { return CS.Call(3, 19, 20, true, v); },
        get_activeColorSpace: function() { return CS.Call(2, 19, 21, true); },
        set_activeColorSpace: function(v) { return CS.Call(3, 19, 21, true, v); },
        get_blendWeights: function() { return CS.Call(2, 19, 22, true); },
        set_blendWeights: function(v) { return CS.Call(3, 19, 22, true, v); },
        get_asyncUploadTimeSlice: function() { return CS.Call(2, 19, 23, true); },
        set_asyncUploadTimeSlice: function(v) { return CS.Call(3, 19, 23, true, v); },
        get_asyncUploadBufferSize: function() { return CS.Call(2, 19, 24, true); },
        set_asyncUploadBufferSize: function(v) { return CS.Call(3, 19, 24, true, v); },
        DecreaseLevel$$Boolean: function(a0/*Boolean*/) { 
            return CS.Call(4, 19, 0, true, a0); //Ret: Void
        },
        DecreaseLevel: function() { 
            return CS.Call(4, 19, 1, true); //Ret: Void
        },
        GetQualityLevel: function() { 
            return CS.Call(4, 19, 2, true); //Ret: Int32
        },
        IncreaseLevel$$Boolean: function(a0/*Boolean*/) { 
            return CS.Call(4, 19, 3, true, a0); //Ret: Void
        },
        IncreaseLevel: function() { 
            return CS.Call(4, 19, 4, true); //Ret: Void
        },
        SetQualityLevel$$Int32$$Boolean: function(a0/*Int32*/, a1/*Boolean*/) { 
            return CS.Call(4, 19, 5, true, a0, a1); //Ret: Void
        },
        SetQualityLevel$$Int32: function(a0/*Int32*/) { 
            return CS.Call(4, 19, 6, true, a0); //Ret: Void
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 19, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$QualitySettings);

// UnityEngine.MeshFilter
var UnityEngine$MeshFilter = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.MeshFilter",
    Kind: "Class",
    baseTypeName: "UnityEngine.Component",
    definition: {
        ctor: function() { CS.Call(5, 20, 0, true, this); },
        get_mesh: function() { return CS.Call(2, 20, 0, false, this); },
        set_mesh: function(v) { return CS.Call(3, 20, 0, false, this, v); },
        get_sharedMesh: function() { return CS.Call(2, 20, 1, false, this); },
        set_sharedMesh: function(v) { return CS.Call(3, 20, 1, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$MeshFilter);

// UnityEngine.CombineInstance
var UnityEngine$CombineInstance = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.CombineInstance",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    definition: {
        ctor: function() { CS.Call(5, 21, 0, true, this); },
        get_mesh: function() { return CS.Call(2, 21, 0, false, this); },
        set_mesh: function(v) { return CS.Call(3, 21, 0, false, this, v); },
        get_subMeshIndex: function() { return CS.Call(2, 21, 1, false, this); },
        set_subMeshIndex: function(v) { return CS.Call(3, 21, 1, false, this, v); },
        get_transform: function() { return CS.Call(2, 21, 2, false, this); },
        set_transform: function(v) { return CS.Call(3, 21, 2, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$CombineInstance);

// UnityEngine.BoneWeight
var UnityEngine$BoneWeight = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.BoneWeight",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    staticDefinition: {
        op_Equality: function(a0/*BoneWeight*/, a1/*BoneWeight*/) { 
            return CS.Call(4, 22, 2, true, a0, a1); //Ret: Boolean
        },
        op_Inequality: function(a0/*BoneWeight*/, a1/*BoneWeight*/) { 
            return CS.Call(4, 22, 3, true, a0, a1); //Ret: Boolean
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 22, 0, true, this); },
        get_weight0: function() { return CS.Call(2, 22, 0, false, this); },
        set_weight0: function(v) { return CS.Call(3, 22, 0, false, this, v); },
        get_weight1: function() { return CS.Call(2, 22, 1, false, this); },
        set_weight1: function(v) { return CS.Call(3, 22, 1, false, this, v); },
        get_weight2: function() { return CS.Call(2, 22, 2, false, this); },
        set_weight2: function(v) { return CS.Call(3, 22, 2, false, this, v); },
        get_weight3: function() { return CS.Call(2, 22, 3, false, this); },
        set_weight3: function(v) { return CS.Call(3, 22, 3, false, this, v); },
        get_boneIndex0: function() { return CS.Call(2, 22, 4, false, this); },
        set_boneIndex0: function(v) { return CS.Call(3, 22, 4, false, this, v); },
        get_boneIndex1: function() { return CS.Call(2, 22, 5, false, this); },
        set_boneIndex1: function(v) { return CS.Call(3, 22, 5, false, this, v); },
        get_boneIndex2: function() { return CS.Call(2, 22, 6, false, this); },
        set_boneIndex2: function(v) { return CS.Call(3, 22, 6, false, this, v); },
        get_boneIndex3: function() { return CS.Call(2, 22, 7, false, this); },
        set_boneIndex3: function(v) { return CS.Call(3, 22, 7, false, this, v); },
        Equals: function(a0/*Object*/) { 
            return CS.Call(4, 22, 0, false, this, a0); //Ret: Boolean
        },
        GetHashCode: function() { 
            return CS.Call(4, 22, 1, false, this); //Ret: Int32
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$BoneWeight);

// UnityEngine.SkinnedMeshRenderer
var UnityEngine$SkinnedMeshRenderer = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.SkinnedMeshRenderer",
    Kind: "Class",
    baseTypeName: "UnityEngine.Renderer",
    definition: {
        ctor: function() { CS.Call(5, 23, 0, true, this); },
        get_bones: function() { return CS.Call(2, 23, 0, false, this); },
        set_bones: function(v) { return CS.Call(3, 23, 0, false, this, v); },
        get_rootBone: function() { return CS.Call(2, 23, 1, false, this); },
        set_rootBone: function(v) { return CS.Call(3, 23, 1, false, this, v); },
        get_quality: function() { return CS.Call(2, 23, 2, false, this); },
        set_quality: function(v) { return CS.Call(3, 23, 2, false, this, v); },
        get_sharedMesh: function() { return CS.Call(2, 23, 3, false, this); },
        set_sharedMesh: function(v) { return CS.Call(3, 23, 3, false, this, v); },
        get_updateWhenOffscreen: function() { return CS.Call(2, 23, 4, false, this); },
        set_updateWhenOffscreen: function(v) { return CS.Call(3, 23, 4, false, this, v); },
        get_skinnedMotionVectors: function() { return CS.Call(2, 23, 5, false, this); },
        set_skinnedMotionVectors: function(v) { return CS.Call(3, 23, 5, false, this, v); },
        get_localBounds: function() { return CS.Call(2, 23, 6, false, this); },
        set_localBounds: function(v) { return CS.Call(3, 23, 6, false, this, v); },
        BakeMesh: function(a0/*Mesh*/) { 
            return CS.Call(4, 23, 0, false, this, a0); //Ret: Void
        },
        GetBlendShapeWeight: function(a0/*Int32*/) { 
            return CS.Call(4, 23, 1, false, this, a0); //Ret: Single
        },
        SetBlendShapeWeight: function(a0/*Int32*/, a1/*Single*/) { 
            return CS.Call(4, 23, 2, false, this, a0, a1); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$SkinnedMeshRenderer);

// UnityEngine.Flare
var UnityEngine$Flare = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Flare",
    Kind: "Class",
    baseTypeName: "UnityEngine.Object",
    definition: {
        ctor: function() { CS.Call(5, 24, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Flare);

// UnityEngine.LensFlare
var UnityEngine$LensFlare = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.LensFlare",
    Kind: "Class",
    baseTypeName: "UnityEngine.Behaviour",
    definition: {
        ctor: function() { CS.Call(5, 25, 0, true, this); },
        get_flare: function() { return CS.Call(2, 25, 0, false, this); },
        set_flare: function(v) { return CS.Call(3, 25, 0, false, this, v); },
        get_brightness: function() { return CS.Call(2, 25, 1, false, this); },
        set_brightness: function(v) { return CS.Call(3, 25, 1, false, this, v); },
        get_fadeSpeed: function() { return CS.Call(2, 25, 2, false, this); },
        set_fadeSpeed: function(v) { return CS.Call(3, 25, 2, false, this, v); },
        get_color: function() { return CS.Call(2, 25, 3, false, this); },
        set_color: function(v) { return CS.Call(3, 25, 3, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$LensFlare);

// UnityEngine.Renderer
var UnityEngine$Renderer = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Renderer",
    Kind: "Class",
    baseTypeName: "UnityEngine.Component",
    definition: {
        ctor: function() { CS.Call(5, 26, 0, true, this); },
        get_isPartOfStaticBatch: function() { return CS.Call(2, 26, 0, false, this); },
        set_isPartOfStaticBatch: function(v) { return CS.Call(3, 26, 0, false, this, v); },
        get_worldToLocalMatrix: function() { return CS.Call(2, 26, 1, false, this); },
        set_worldToLocalMatrix: function(v) { return CS.Call(3, 26, 1, false, this, v); },
        get_localToWorldMatrix: function() { return CS.Call(2, 26, 2, false, this); },
        set_localToWorldMatrix: function(v) { return CS.Call(3, 26, 2, false, this, v); },
        get_enabled: function() { return CS.Call(2, 26, 3, false, this); },
        set_enabled: function(v) { return CS.Call(3, 26, 3, false, this, v); },
        get_shadowCastingMode: function() { return CS.Call(2, 26, 4, false, this); },
        set_shadowCastingMode: function(v) { return CS.Call(3, 26, 4, false, this, v); },
        get_receiveShadows: function() { return CS.Call(2, 26, 5, false, this); },
        set_receiveShadows: function(v) { return CS.Call(3, 26, 5, false, this, v); },
        get_material: function() { return CS.Call(2, 26, 6, false, this); },
        set_material: function(v) { return CS.Call(3, 26, 6, false, this, v); },
        get_sharedMaterial: function() { return CS.Call(2, 26, 7, false, this); },
        set_sharedMaterial: function(v) { return CS.Call(3, 26, 7, false, this, v); },
        get_materials: function() { return CS.Call(2, 26, 8, false, this); },
        set_materials: function(v) { return CS.Call(3, 26, 8, false, this, v); },
        get_sharedMaterials: function() { return CS.Call(2, 26, 9, false, this); },
        set_sharedMaterials: function(v) { return CS.Call(3, 26, 9, false, this, v); },
        get_bounds: function() { return CS.Call(2, 26, 10, false, this); },
        set_bounds: function(v) { return CS.Call(3, 26, 10, false, this, v); },
        get_lightmapIndex: function() { return CS.Call(2, 26, 11, false, this); },
        set_lightmapIndex: function(v) { return CS.Call(3, 26, 11, false, this, v); },
        get_realtimeLightmapIndex: function() { return CS.Call(2, 26, 12, false, this); },
        set_realtimeLightmapIndex: function(v) { return CS.Call(3, 26, 12, false, this, v); },
        get_lightmapScaleOffset: function() { return CS.Call(2, 26, 13, false, this); },
        set_lightmapScaleOffset: function(v) { return CS.Call(3, 26, 13, false, this, v); },
        get_motionVectors: function() { return CS.Call(2, 26, 14, false, this); },
        set_motionVectors: function(v) { return CS.Call(3, 26, 14, false, this, v); },
        get_realtimeLightmapScaleOffset: function() { return CS.Call(2, 26, 15, false, this); },
        set_realtimeLightmapScaleOffset: function(v) { return CS.Call(3, 26, 15, false, this, v); },
        get_isVisible: function() { return CS.Call(2, 26, 16, false, this); },
        set_isVisible: function(v) { return CS.Call(3, 26, 16, false, this, v); },
        get_lightProbeUsage: function() { return CS.Call(2, 26, 17, false, this); },
        set_lightProbeUsage: function(v) { return CS.Call(3, 26, 17, false, this, v); },
        get_lightProbeProxyVolumeOverride: function() { return CS.Call(2, 26, 18, false, this); },
        set_lightProbeProxyVolumeOverride: function(v) { return CS.Call(3, 26, 18, false, this, v); },
        get_probeAnchor: function() { return CS.Call(2, 26, 19, false, this); },
        set_probeAnchor: function(v) { return CS.Call(3, 26, 19, false, this, v); },
        get_reflectionProbeUsage: function() { return CS.Call(2, 26, 20, false, this); },
        set_reflectionProbeUsage: function(v) { return CS.Call(3, 26, 20, false, this, v); },
        get_sortingLayerName: function() { return CS.Call(2, 26, 21, false, this); },
        set_sortingLayerName: function(v) { return CS.Call(3, 26, 21, false, this, v); },
        get_sortingLayerID: function() { return CS.Call(2, 26, 22, false, this); },
        set_sortingLayerID: function(v) { return CS.Call(3, 26, 22, false, this, v); },
        get_sortingOrder: function() { return CS.Call(2, 26, 23, false, this); },
        set_sortingOrder: function(v) { return CS.Call(3, 26, 23, false, this, v); },
        GetClosestReflectionProbes: function(a0/*List`1*/) { 
            return CS.Call(4, 26, 0, false, this, a0); //Ret: Void
        },
        GetPropertyBlock: function(a0/*MaterialPropertyBlock*/) { 
            return CS.Call(4, 26, 1, false, this, a0); //Ret: Void
        },
        SetPropertyBlock: function(a0/*MaterialPropertyBlock*/) { 
            return CS.Call(4, 26, 2, false, this, a0); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Renderer);

// UnityEngine.Projector
var UnityEngine$Projector = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Projector",
    Kind: "Class",
    baseTypeName: "UnityEngine.Behaviour",
    definition: {
        ctor: function() { CS.Call(5, 27, 0, true, this); },
        get_nearClipPlane: function() { return CS.Call(2, 27, 0, false, this); },
        set_nearClipPlane: function(v) { return CS.Call(3, 27, 0, false, this, v); },
        get_farClipPlane: function() { return CS.Call(2, 27, 1, false, this); },
        set_farClipPlane: function(v) { return CS.Call(3, 27, 1, false, this, v); },
        get_fieldOfView: function() { return CS.Call(2, 27, 2, false, this); },
        set_fieldOfView: function(v) { return CS.Call(3, 27, 2, false, this, v); },
        get_aspectRatio: function() { return CS.Call(2, 27, 3, false, this); },
        set_aspectRatio: function(v) { return CS.Call(3, 27, 3, false, this, v); },
        get_orthographic: function() { return CS.Call(2, 27, 4, false, this); },
        set_orthographic: function(v) { return CS.Call(3, 27, 4, false, this, v); },
        get_orthographicSize: function() { return CS.Call(2, 27, 5, false, this); },
        set_orthographicSize: function(v) { return CS.Call(3, 27, 5, false, this, v); },
        get_ignoreLayers: function() { return CS.Call(2, 27, 6, false, this); },
        set_ignoreLayers: function(v) { return CS.Call(3, 27, 6, false, this, v); },
        get_material: function() { return CS.Call(2, 27, 7, false, this); },
        set_material: function(v) { return CS.Call(3, 27, 7, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Projector);

// UnityEngine.Skybox
var UnityEngine$Skybox = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Skybox",
    Kind: "Class",
    baseTypeName: "UnityEngine.Behaviour",
    definition: {
        ctor: function() { CS.Call(5, 28, 0, true, this); },
        get_material: function() { return CS.Call(2, 28, 0, false, this); },
        set_material: function(v) { return CS.Call(3, 28, 0, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Skybox);

// UnityEngine.TrailRenderer
var UnityEngine$TrailRenderer = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.TrailRenderer",
    Kind: "Class",
    baseTypeName: "UnityEngine.Renderer",
    definition: {
        ctor: function() { CS.Call(5, 29, 0, true, this); },
        get_time: function() { return CS.Call(2, 29, 0, false, this); },
        set_time: function(v) { return CS.Call(3, 29, 0, false, this, v); },
        get_startWidth: function() { return CS.Call(2, 29, 1, false, this); },
        set_startWidth: function(v) { return CS.Call(3, 29, 1, false, this, v); },
        get_endWidth: function() { return CS.Call(2, 29, 2, false, this); },
        set_endWidth: function(v) { return CS.Call(3, 29, 2, false, this, v); },
        get_autodestruct: function() { return CS.Call(2, 29, 3, false, this); },
        set_autodestruct: function(v) { return CS.Call(3, 29, 3, false, this, v); },
        Clear: function() { 
            return CS.Call(4, 29, 0, false, this); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$TrailRenderer);

// UnityEngine.LineRenderer
var UnityEngine$LineRenderer = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.LineRenderer",
    Kind: "Class",
    baseTypeName: "UnityEngine.Renderer",
    definition: {
        ctor: function() { CS.Call(5, 30, 0, true, this); },
        get_useWorldSpace: function() { return CS.Call(2, 30, 0, false, this); },
        set_useWorldSpace: function(v) { return CS.Call(3, 30, 0, false, this, v); },
        SetColors: function(a0/*Color*/, a1/*Color*/) { 
            return CS.Call(4, 30, 0, false, this, a0, a1); //Ret: Void
        },
        SetPosition: function(a0/*Int32*/, a1/*Vector3*/) { 
            return CS.Call(4, 30, 1, false, this, a0, a1); //Ret: Void
        },
        SetPositions: function(a0/*Vector3[]*/) { 
            return CS.Call(4, 30, 2, false, this, a0); //Ret: Void
        },
        SetVertexCount: function(a0/*Int32*/) { 
            return CS.Call(4, 30, 3, false, this, a0); //Ret: Void
        },
        SetWidth: function(a0/*Single*/, a1/*Single*/) { 
            return CS.Call(4, 30, 4, false, this, a0, a1); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$LineRenderer);

// UnityEngine.MaterialPropertyBlock
var UnityEngine$MaterialPropertyBlock = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.MaterialPropertyBlock",
    Kind: "Class",
    baseTypeName: "System.Object",
    definition: {
        ctor: function() { CS.Call(5, 31, 0, true, this); },
        get_isEmpty: function() { return CS.Call(2, 31, 0, false, this); },
        set_isEmpty: function(v) { return CS.Call(3, 31, 0, false, this, v); },
        Clear: function() { 
            return CS.Call(4, 31, 0, false, this); //Ret: Void
        },
        GetFloat$$String: function(a0/*String*/) { 
            return CS.Call(4, 31, 1, false, this, a0); //Ret: Single
        },
        GetFloat$$Int32: function(a0/*Int32*/) { 
            return CS.Call(4, 31, 2, false, this, a0); //Ret: Single
        },
        GetMatrix$$Int32: function(a0/*Int32*/) { 
            return CS.Call(4, 31, 3, false, this, a0); //Ret: Matrix4x4
        },
        GetMatrix$$String: function(a0/*String*/) { 
            return CS.Call(4, 31, 4, false, this, a0); //Ret: Matrix4x4
        },
        GetTexture$$Int32: function(a0/*Int32*/) { 
            return CS.Call(4, 31, 5, false, this, a0); //Ret: Texture
        },
        GetTexture$$String: function(a0/*String*/) { 
            return CS.Call(4, 31, 6, false, this, a0); //Ret: Texture
        },
        GetVector$$String: function(a0/*String*/) { 
            return CS.Call(4, 31, 7, false, this, a0); //Ret: Vector4
        },
        GetVector$$Int32: function(a0/*Int32*/) { 
            return CS.Call(4, 31, 8, false, this, a0); //Ret: Vector4
        },
        SetBuffer$$Int32$$ComputeBuffer: function(a0/*Int32*/, a1/*ComputeBuffer*/) { 
            return CS.Call(4, 31, 9, false, this, a0, a1); //Ret: Void
        },
        SetBuffer$$String$$ComputeBuffer: function(a0/*String*/, a1/*ComputeBuffer*/) { 
            return CS.Call(4, 31, 10, false, this, a0, a1); //Ret: Void
        },
        SetColor$$Int32$$Color: function(a0/*Int32*/, a1/*Color*/) { 
            return CS.Call(4, 31, 11, false, this, a0, a1); //Ret: Void
        },
        SetColor$$String$$Color: function(a0/*String*/, a1/*Color*/) { 
            return CS.Call(4, 31, 12, false, this, a0, a1); //Ret: Void
        },
        SetFloat$$String$$Single: function(a0/*String*/, a1/*Single*/) { 
            return CS.Call(4, 31, 13, false, this, a0, a1); //Ret: Void
        },
        SetFloat$$Int32$$Single: function(a0/*Int32*/, a1/*Single*/) { 
            return CS.Call(4, 31, 14, false, this, a0, a1); //Ret: Void
        },
        SetFloatArray$$String$$Single$Array: function(a0/*String*/, a1/*Single[]*/) { 
            return CS.Call(4, 31, 15, false, this, a0, a1); //Ret: Void
        },
        SetFloatArray$$Int32$$Single$Array: function(a0/*Int32*/, a1/*Single[]*/) { 
            return CS.Call(4, 31, 16, false, this, a0, a1); //Ret: Void
        },
        SetMatrix$$Int32$$Matrix4x4: function(a0/*Int32*/, a1/*Matrix4x4*/) { 
            return CS.Call(4, 31, 17, false, this, a0, a1); //Ret: Void
        },
        SetMatrix$$String$$Matrix4x4: function(a0/*String*/, a1/*Matrix4x4*/) { 
            return CS.Call(4, 31, 18, false, this, a0, a1); //Ret: Void
        },
        SetMatrixArray$$Int32$$Matrix4x4$Array: function(a0/*Int32*/, a1/*Matrix4x4[]*/) { 
            return CS.Call(4, 31, 19, false, this, a0, a1); //Ret: Void
        },
        SetMatrixArray$$String$$Matrix4x4$Array: function(a0/*String*/, a1/*Matrix4x4[]*/) { 
            return CS.Call(4, 31, 20, false, this, a0, a1); //Ret: Void
        },
        SetTexture$$String$$Texture: function(a0/*String*/, a1/*Texture*/) { 
            return CS.Call(4, 31, 21, false, this, a0, a1); //Ret: Void
        },
        SetTexture$$Int32$$Texture: function(a0/*Int32*/, a1/*Texture*/) { 
            return CS.Call(4, 31, 22, false, this, a0, a1); //Ret: Void
        },
        SetVector$$Int32$$Vector4: function(a0/*Int32*/, a1/*Vector4*/) { 
            return CS.Call(4, 31, 23, false, this, a0, a1); //Ret: Void
        },
        SetVector$$String$$Vector4: function(a0/*String*/, a1/*Vector4*/) { 
            return CS.Call(4, 31, 24, false, this, a0, a1); //Ret: Void
        },
        SetVectorArray$$Int32$$Vector4$Array: function(a0/*Int32*/, a1/*Vector4[]*/) { 
            return CS.Call(4, 31, 25, false, this, a0, a1); //Ret: Void
        },
        SetVectorArray$$String$$Vector4$Array: function(a0/*String*/, a1/*Vector4[]*/) { 
            return CS.Call(4, 31, 26, false, this, a0, a1); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$MaterialPropertyBlock);

// UnityEngine.Graphics
var UnityEngine$Graphics = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Graphics",
    Kind: "Class",
    baseTypeName: "System.Object",
    staticDefinition: {
        get_activeColorBuffer: function() { return CS.Call(2, 32, 0, true); },
        set_activeColorBuffer: function(v) { return CS.Call(3, 32, 0, true, v); },
        get_activeDepthBuffer: function() { return CS.Call(2, 32, 1, true); },
        set_activeDepthBuffer: function(v) { return CS.Call(3, 32, 1, true, v); },
        Blit$$Texture$$RenderTexture$$Material$$Int32: function(a0/*Texture*/, a1/*RenderTexture*/, a2/*Material*/, a3/*Int32*/) { 
            return CS.Call(4, 32, 0, true, a0, a1, a2, a3); //Ret: Void
        },
        Blit$$Texture$$RenderTexture$$Material: function(a0/*Texture*/, a1/*RenderTexture*/, a2/*Material*/) { 
            return CS.Call(4, 32, 1, true, a0, a1, a2); //Ret: Void
        },
        Blit$$Texture$$Material$$Int32: function(a0/*Texture*/, a1/*Material*/, a2/*Int32*/) { 
            return CS.Call(4, 32, 2, true, a0, a1, a2); //Ret: Void
        },
        Blit$$Texture$$RenderTexture: function(a0/*Texture*/, a1/*RenderTexture*/) { 
            return CS.Call(4, 32, 3, true, a0, a1); //Ret: Void
        },
        Blit$$Texture$$Material: function(a0/*Texture*/, a1/*Material*/) { 
            return CS.Call(4, 32, 4, true, a0, a1); //Ret: Void
        },
        BlitMultiTap: function(a0/*Texture*/, a1/*RenderTexture*/, a2/*Material*/, a3/*Vector2[]*/) { 
            return CS.Call(4, 32, 5, true, a0, a1, a2, jsb_formatParamsArray(3, a3, arguments)); //Ret: Void
        },
        ClearRandomWriteTargets: function() { 
            return CS.Call(4, 32, 6, true); //Ret: Void
        },
        CopyTexture$$Texture$$Int32$$Int32$$Int32$$Int32$$Int32$$Int32$$Texture$$Int32$$Int32$$Int32$$Int32: function(a0/*Texture*/, a1/*Int32*/, a2/*Int32*/, a3/*Int32*/, a4/*Int32*/, a5/*Int32*/, a6/*Int32*/, a7/*Texture*/, a8/*Int32*/, a9/*Int32*/, a10/*Int32*/, a11/*Int32*/) { 
            return CS.Call(4, 32, 7, true, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11); //Ret: Void
        },
        CopyTexture$$Texture$$Int32$$Int32$$Texture$$Int32$$Int32: function(a0/*Texture*/, a1/*Int32*/, a2/*Int32*/, a3/*Texture*/, a4/*Int32*/, a5/*Int32*/) { 
            return CS.Call(4, 32, 8, true, a0, a1, a2, a3, a4, a5); //Ret: Void
        },
        CopyTexture$$Texture$$Texture: function(a0/*Texture*/, a1/*Texture*/) { 
            return CS.Call(4, 32, 9, true, a0, a1); //Ret: Void
        },
        DrawMesh$$Mesh$$Vector3$$Quaternion$$Material$$Int32$$Camera$$Int32$$MaterialPropertyBlock$$ShadowCastingMode$$Boolean$$Transform$$Boolean: function(a0/*Mesh*/, a1/*Vector3*/, a2/*Quaternion*/, a3/*Material*/, a4/*Int32*/, a5/*Camera*/, a6/*Int32*/, a7/*MaterialPropertyBlock*/, a8/*ShadowCastingMode*/, a9/*Boolean*/, a10/*Transform*/, a11/*Boolean*/) { 
            return CS.Call(4, 32, 10, true, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11); //Ret: Void
        },
        DrawMesh$$Mesh$$Vector3$$Quaternion$$Material$$Int32$$Camera$$Int32$$MaterialPropertyBlock$$ShadowCastingMode$$Boolean$$Transform: function(a0/*Mesh*/, a1/*Vector3*/, a2/*Quaternion*/, a3/*Material*/, a4/*Int32*/, a5/*Camera*/, a6/*Int32*/, a7/*MaterialPropertyBlock*/, a8/*ShadowCastingMode*/, a9/*Boolean*/, a10/*Transform*/) { 
            return CS.Call(4, 32, 11, true, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10); //Ret: Void
        },
        DrawMesh$$Mesh$$Vector3$$Quaternion$$Material$$Int32$$Camera$$Int32$$MaterialPropertyBlock$$Boolean$$Boolean$$Boolean: function(a0/*Mesh*/, a1/*Vector3*/, a2/*Quaternion*/, a3/*Material*/, a4/*Int32*/, a5/*Camera*/, a6/*Int32*/, a7/*MaterialPropertyBlock*/, a8/*Boolean*/, a9/*Boolean*/, a10/*Boolean*/) { 
            return CS.Call(4, 32, 12, true, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10); //Ret: Void
        },
        DrawMesh$$Mesh$$Matrix4x4$$Material$$Int32$$Camera$$Int32$$MaterialPropertyBlock$$ShadowCastingMode$$Boolean$$Transform$$Boolean: function(a0/*Mesh*/, a1/*Matrix4x4*/, a2/*Material*/, a3/*Int32*/, a4/*Camera*/, a5/*Int32*/, a6/*MaterialPropertyBlock*/, a7/*ShadowCastingMode*/, a8/*Boolean*/, a9/*Transform*/, a10/*Boolean*/) { 
            return CS.Call(4, 32, 13, true, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10); //Ret: Void
        },
        DrawMesh$$Mesh$$Matrix4x4$$Material$$Int32$$Camera$$Int32$$MaterialPropertyBlock$$ShadowCastingMode$$Boolean$$Transform: function(a0/*Mesh*/, a1/*Matrix4x4*/, a2/*Material*/, a3/*Int32*/, a4/*Camera*/, a5/*Int32*/, a6/*MaterialPropertyBlock*/, a7/*ShadowCastingMode*/, a8/*Boolean*/, a9/*Transform*/) { 
            return CS.Call(4, 32, 14, true, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9); //Ret: Void
        },
        DrawMesh$$Mesh$$Matrix4x4$$Material$$Int32$$Camera$$Int32$$MaterialPropertyBlock$$Boolean$$Boolean$$Boolean: function(a0/*Mesh*/, a1/*Matrix4x4*/, a2/*Material*/, a3/*Int32*/, a4/*Camera*/, a5/*Int32*/, a6/*MaterialPropertyBlock*/, a7/*Boolean*/, a8/*Boolean*/, a9/*Boolean*/) { 
            return CS.Call(4, 32, 15, true, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9); //Ret: Void
        },
        DrawMesh$$Mesh$$Vector3$$Quaternion$$Material$$Int32$$Camera$$Int32$$MaterialPropertyBlock$$Boolean$$Boolean: function(a0/*Mesh*/, a1/*Vector3*/, a2/*Quaternion*/, a3/*Material*/, a4/*Int32*/, a5/*Camera*/, a6/*Int32*/, a7/*MaterialPropertyBlock*/, a8/*Boolean*/, a9/*Boolean*/) { 
            return CS.Call(4, 32, 16, true, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9); //Ret: Void
        },
        DrawMesh$$Mesh$$Vector3$$Quaternion$$Material$$Int32$$Camera$$Int32$$MaterialPropertyBlock$$ShadowCastingMode$$Boolean: function(a0/*Mesh*/, a1/*Vector3*/, a2/*Quaternion*/, a3/*Material*/, a4/*Int32*/, a5/*Camera*/, a6/*Int32*/, a7/*MaterialPropertyBlock*/, a8/*ShadowCastingMode*/, a9/*Boolean*/) { 
            return CS.Call(4, 32, 17, true, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9); //Ret: Void
        },
        DrawMesh$$Mesh$$Matrix4x4$$Material$$Int32$$Camera$$Int32$$MaterialPropertyBlock$$ShadowCastingMode$$Boolean: function(a0/*Mesh*/, a1/*Matrix4x4*/, a2/*Material*/, a3/*Int32*/, a4/*Camera*/, a5/*Int32*/, a6/*MaterialPropertyBlock*/, a7/*ShadowCastingMode*/, a8/*Boolean*/) { 
            return CS.Call(4, 32, 18, true, a0, a1, a2, a3, a4, a5, a6, a7, a8); //Ret: Void
        },
        DrawMesh$$Mesh$$Matrix4x4$$Material$$Int32$$Camera$$Int32$$MaterialPropertyBlock$$Boolean$$Boolean: function(a0/*Mesh*/, a1/*Matrix4x4*/, a2/*Material*/, a3/*Int32*/, a4/*Camera*/, a5/*Int32*/, a6/*MaterialPropertyBlock*/, a7/*Boolean*/, a8/*Boolean*/) { 
            return CS.Call(4, 32, 19, true, a0, a1, a2, a3, a4, a5, a6, a7, a8); //Ret: Void
        },
        DrawMesh$$Mesh$$Vector3$$Quaternion$$Material$$Int32$$Camera$$Int32$$MaterialPropertyBlock$$ShadowCastingMode: function(a0/*Mesh*/, a1/*Vector3*/, a2/*Quaternion*/, a3/*Material*/, a4/*Int32*/, a5/*Camera*/, a6/*Int32*/, a7/*MaterialPropertyBlock*/, a8/*ShadowCastingMode*/) { 
            return CS.Call(4, 32, 20, true, a0, a1, a2, a3, a4, a5, a6, a7, a8); //Ret: Void
        },
        DrawMesh$$Mesh$$Vector3$$Quaternion$$Material$$Int32$$Camera$$Int32$$MaterialPropertyBlock$$Boolean: function(a0/*Mesh*/, a1/*Vector3*/, a2/*Quaternion*/, a3/*Material*/, a4/*Int32*/, a5/*Camera*/, a6/*Int32*/, a7/*MaterialPropertyBlock*/, a8/*Boolean*/) { 
            return CS.Call(4, 32, 21, true, a0, a1, a2, a3, a4, a5, a6, a7, a8); //Ret: Void
        },
        DrawMesh$$Mesh$$Vector3$$Quaternion$$Material$$Int32$$Camera$$Int32$$MaterialPropertyBlock: function(a0/*Mesh*/, a1/*Vector3*/, a2/*Quaternion*/, a3/*Material*/, a4/*Int32*/, a5/*Camera*/, a6/*Int32*/, a7/*MaterialPropertyBlock*/) { 
            return CS.Call(4, 32, 22, true, a0, a1, a2, a3, a4, a5, a6, a7); //Ret: Void
        },
        DrawMesh$$Mesh$$Matrix4x4$$Material$$Int32$$Camera$$Int32$$MaterialPropertyBlock$$Boolean: function(a0/*Mesh*/, a1/*Matrix4x4*/, a2/*Material*/, a3/*Int32*/, a4/*Camera*/, a5/*Int32*/, a6/*MaterialPropertyBlock*/, a7/*Boolean*/) { 
            return CS.Call(4, 32, 23, true, a0, a1, a2, a3, a4, a5, a6, a7); //Ret: Void
        },
        DrawMesh$$Mesh$$Matrix4x4$$Material$$Int32$$Camera$$Int32$$MaterialPropertyBlock$$ShadowCastingMode: function(a0/*Mesh*/, a1/*Matrix4x4*/, a2/*Material*/, a3/*Int32*/, a4/*Camera*/, a5/*Int32*/, a6/*MaterialPropertyBlock*/, a7/*ShadowCastingMode*/) { 
            return CS.Call(4, 32, 24, true, a0, a1, a2, a3, a4, a5, a6, a7); //Ret: Void
        },
        DrawMesh$$Mesh$$Vector3$$Quaternion$$Material$$Int32$$Camera$$Int32: function(a0/*Mesh*/, a1/*Vector3*/, a2/*Quaternion*/, a3/*Material*/, a4/*Int32*/, a5/*Camera*/, a6/*Int32*/) { 
            return CS.Call(4, 32, 25, true, a0, a1, a2, a3, a4, a5, a6); //Ret: Void
        },
        DrawMesh$$Mesh$$Matrix4x4$$Material$$Int32$$Camera$$Int32$$MaterialPropertyBlock: function(a0/*Mesh*/, a1/*Matrix4x4*/, a2/*Material*/, a3/*Int32*/, a4/*Camera*/, a5/*Int32*/, a6/*MaterialPropertyBlock*/) { 
            return CS.Call(4, 32, 26, true, a0, a1, a2, a3, a4, a5, a6); //Ret: Void
        },
        DrawMesh$$Mesh$$Vector3$$Quaternion$$Material$$Int32$$Camera: function(a0/*Mesh*/, a1/*Vector3*/, a2/*Quaternion*/, a3/*Material*/, a4/*Int32*/, a5/*Camera*/) { 
            return CS.Call(4, 32, 27, true, a0, a1, a2, a3, a4, a5); //Ret: Void
        },
        DrawMesh$$Mesh$$Matrix4x4$$Material$$Int32$$Camera$$Int32: function(a0/*Mesh*/, a1/*Matrix4x4*/, a2/*Material*/, a3/*Int32*/, a4/*Camera*/, a5/*Int32*/) { 
            return CS.Call(4, 32, 28, true, a0, a1, a2, a3, a4, a5); //Ret: Void
        },
        DrawMesh$$Mesh$$Vector3$$Quaternion$$Material$$Int32: function(a0/*Mesh*/, a1/*Vector3*/, a2/*Quaternion*/, a3/*Material*/, a4/*Int32*/) { 
            return CS.Call(4, 32, 29, true, a0, a1, a2, a3, a4); //Ret: Void
        },
        DrawMesh$$Mesh$$Matrix4x4$$Material$$Int32$$Camera: function(a0/*Mesh*/, a1/*Matrix4x4*/, a2/*Material*/, a3/*Int32*/, a4/*Camera*/) { 
            return CS.Call(4, 32, 30, true, a0, a1, a2, a3, a4); //Ret: Void
        },
        DrawMesh$$Mesh$$Matrix4x4$$Material$$Int32: function(a0/*Mesh*/, a1/*Matrix4x4*/, a2/*Material*/, a3/*Int32*/) { 
            return CS.Call(4, 32, 31, true, a0, a1, a2, a3); //Ret: Void
        },
        DrawMeshNow$$Mesh$$Vector3$$Quaternion$$Int32: function(a0/*Mesh*/, a1/*Vector3*/, a2/*Quaternion*/, a3/*Int32*/) { 
            return CS.Call(4, 32, 32, true, a0, a1, a2, a3); //Ret: Void
        },
        DrawMeshNow$$Mesh$$Matrix4x4$$Int32: function(a0/*Mesh*/, a1/*Matrix4x4*/, a2/*Int32*/) { 
            return CS.Call(4, 32, 33, true, a0, a1, a2); //Ret: Void
        },
        DrawMeshNow$$Mesh$$Vector3$$Quaternion: function(a0/*Mesh*/, a1/*Vector3*/, a2/*Quaternion*/) { 
            return CS.Call(4, 32, 34, true, a0, a1, a2); //Ret: Void
        },
        DrawMeshNow$$Mesh$$Matrix4x4: function(a0/*Mesh*/, a1/*Matrix4x4*/) { 
            return CS.Call(4, 32, 35, true, a0, a1); //Ret: Void
        },
        DrawProcedural$$MeshTopology$$Int32$$Int32: function(a0/*MeshTopology*/, a1/*Int32*/, a2/*Int32*/) { 
            return CS.Call(4, 32, 36, true, a0, a1, a2); //Ret: Void
        },
        DrawProcedural$$MeshTopology$$Int32: function(a0/*MeshTopology*/, a1/*Int32*/) { 
            return CS.Call(4, 32, 37, true, a0, a1); //Ret: Void
        },
        DrawProceduralIndirect$$MeshTopology$$ComputeBuffer$$Int32: function(a0/*MeshTopology*/, a1/*ComputeBuffer*/, a2/*Int32*/) { 
            return CS.Call(4, 32, 38, true, a0, a1, a2); //Ret: Void
        },
        DrawProceduralIndirect$$MeshTopology$$ComputeBuffer: function(a0/*MeshTopology*/, a1/*ComputeBuffer*/) { 
            return CS.Call(4, 32, 39, true, a0, a1); //Ret: Void
        },
        DrawTexture$$Rect$$Texture$$Rect$$Int32$$Int32$$Int32$$Int32$$Color$$Material: function(a0/*Rect*/, a1/*Texture*/, a2/*Rect*/, a3/*Int32*/, a4/*Int32*/, a5/*Int32*/, a6/*Int32*/, a7/*Color*/, a8/*Material*/) { 
            return CS.Call(4, 32, 40, true, a0, a1, a2, a3, a4, a5, a6, a7, a8); //Ret: Void
        },
        DrawTexture$$Rect$$Texture$$Rect$$Int32$$Int32$$Int32$$Int32$$Material: function(a0/*Rect*/, a1/*Texture*/, a2/*Rect*/, a3/*Int32*/, a4/*Int32*/, a5/*Int32*/, a6/*Int32*/, a7/*Material*/) { 
            return CS.Call(4, 32, 41, true, a0, a1, a2, a3, a4, a5, a6, a7); //Ret: Void
        },
        DrawTexture$$Rect$$Texture$$Rect$$Int32$$Int32$$Int32$$Int32$$Color: function(a0/*Rect*/, a1/*Texture*/, a2/*Rect*/, a3/*Int32*/, a4/*Int32*/, a5/*Int32*/, a6/*Int32*/, a7/*Color*/) { 
            return CS.Call(4, 32, 42, true, a0, a1, a2, a3, a4, a5, a6, a7); //Ret: Void
        },
        DrawTexture$$Rect$$Texture$$Int32$$Int32$$Int32$$Int32$$Material: function(a0/*Rect*/, a1/*Texture*/, a2/*Int32*/, a3/*Int32*/, a4/*Int32*/, a5/*Int32*/, a6/*Material*/) { 
            return CS.Call(4, 32, 43, true, a0, a1, a2, a3, a4, a5, a6); //Ret: Void
        },
        DrawTexture$$Rect$$Texture$$Rect$$Int32$$Int32$$Int32$$Int32: function(a0/*Rect*/, a1/*Texture*/, a2/*Rect*/, a3/*Int32*/, a4/*Int32*/, a5/*Int32*/, a6/*Int32*/) { 
            return CS.Call(4, 32, 44, true, a0, a1, a2, a3, a4, a5, a6); //Ret: Void
        },
        DrawTexture$$Rect$$Texture$$Int32$$Int32$$Int32$$Int32: function(a0/*Rect*/, a1/*Texture*/, a2/*Int32*/, a3/*Int32*/, a4/*Int32*/, a5/*Int32*/) { 
            return CS.Call(4, 32, 45, true, a0, a1, a2, a3, a4, a5); //Ret: Void
        },
        DrawTexture$$Rect$$Texture$$Material: function(a0/*Rect*/, a1/*Texture*/, a2/*Material*/) { 
            return CS.Call(4, 32, 46, true, a0, a1, a2); //Ret: Void
        },
        DrawTexture$$Rect$$Texture: function(a0/*Rect*/, a1/*Texture*/) { 
            return CS.Call(4, 32, 47, true, a0, a1); //Ret: Void
        },
        ExecuteCommandBuffer: function(a0/*CommandBuffer*/) { 
            return CS.Call(4, 32, 48, true, a0); //Ret: Void
        },
        SetRandomWriteTarget$$Int32$$ComputeBuffer$$Boolean: function(a0/*Int32*/, a1/*ComputeBuffer*/, a2/*Boolean*/) { 
            return CS.Call(4, 32, 49, true, a0, a1, a2); //Ret: Void
        },
        SetRandomWriteTarget$$Int32$$RenderTexture: function(a0/*Int32*/, a1/*RenderTexture*/) { 
            return CS.Call(4, 32, 50, true, a0, a1); //Ret: Void
        },
        SetRandomWriteTarget$$Int32$$ComputeBuffer: function(a0/*Int32*/, a1/*ComputeBuffer*/) { 
            return CS.Call(4, 32, 51, true, a0, a1); //Ret: Void
        },
        SetRenderTarget$$RenderBuffer$$RenderBuffer$$Int32$$CubemapFace$$Int32: function(a0/*RenderBuffer*/, a1/*RenderBuffer*/, a2/*Int32*/, a3/*CubemapFace*/, a4/*Int32*/) { 
            return CS.Call(4, 32, 52, true, a0, a1, a2, a3, a4); //Ret: Void
        },
        SetRenderTarget$$RenderTexture$$Int32$$CubemapFace$$Int32: function(a0/*RenderTexture*/, a1/*Int32*/, a2/*CubemapFace*/, a3/*Int32*/) { 
            return CS.Call(4, 32, 53, true, a0, a1, a2, a3); //Ret: Void
        },
        SetRenderTarget$$RenderBuffer$$RenderBuffer$$Int32$$CubemapFace: function(a0/*RenderBuffer*/, a1/*RenderBuffer*/, a2/*Int32*/, a3/*CubemapFace*/) { 
            return CS.Call(4, 32, 54, true, a0, a1, a2, a3); //Ret: Void
        },
        SetRenderTarget$$RenderBuffer$$RenderBuffer$$Int32: function(a0/*RenderBuffer*/, a1/*RenderBuffer*/, a2/*Int32*/) { 
            return CS.Call(4, 32, 55, true, a0, a1, a2); //Ret: Void
        },
        SetRenderTarget$$RenderTexture$$Int32$$CubemapFace: function(a0/*RenderTexture*/, a1/*Int32*/, a2/*CubemapFace*/) { 
            return CS.Call(4, 32, 56, true, a0, a1, a2); //Ret: Void
        },
        SetRenderTarget$$RenderBuffer$Array$$RenderBuffer: function(a0/*RenderBuffer[]*/, a1/*RenderBuffer*/) { 
            return CS.Call(4, 32, 57, true, a0, a1); //Ret: Void
        },
        SetRenderTarget$$RenderTexture$$Int32: function(a0/*RenderTexture*/, a1/*Int32*/) { 
            return CS.Call(4, 32, 58, true, a0, a1); //Ret: Void
        },
        SetRenderTarget$$RenderBuffer$$RenderBuffer: function(a0/*RenderBuffer*/, a1/*RenderBuffer*/) { 
            return CS.Call(4, 32, 59, true, a0, a1); //Ret: Void
        },
        SetRenderTarget$$RenderTargetSetup: function(a0/*RenderTargetSetup*/) { 
            return CS.Call(4, 32, 60, true, a0); //Ret: Void
        },
        SetRenderTarget$$RenderTexture: function(a0/*RenderTexture*/) { 
            return CS.Call(4, 32, 61, true, a0); //Ret: Void
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 32, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Graphics);

// UnityEngine.LightmapData
var UnityEngine$LightmapData = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.LightmapData",
    Kind: "Class",
    baseTypeName: "System.Object",
    definition: {
        ctor: function() { CS.Call(5, 33, 0, true, this); },
        get_lightmapFar: function() { return CS.Call(2, 33, 0, false, this); },
        set_lightmapFar: function(v) { return CS.Call(3, 33, 0, false, this, v); },
        get_lightmapNear: function() { return CS.Call(2, 33, 1, false, this); },
        set_lightmapNear: function(v) { return CS.Call(3, 33, 1, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$LightmapData);

// UnityEngine.LightProbes
var UnityEngine$LightProbes = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.LightProbes",
    Kind: "Class",
    baseTypeName: "UnityEngine.Object",
    staticDefinition: {
        GetInterpolatedProbe: function(a0/*Vector3*/, a1/*Renderer*/, a2/*SphericalHarmonicsL2&*/) { 
            return CS.Call(4, 34, 0, true, a0, a1, a2); //Ret: Void
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 34, 0, true, this); },
        get_positions: function() { return CS.Call(2, 34, 0, false, this); },
        set_positions: function(v) { return CS.Call(3, 34, 0, false, this, v); },
        get_bakedProbes: function() { return CS.Call(2, 34, 1, false, this); },
        set_bakedProbes: function(v) { return CS.Call(3, 34, 1, false, this, v); },
        get_count: function() { return CS.Call(2, 34, 2, false, this); },
        set_count: function(v) { return CS.Call(3, 34, 2, false, this, v); },
        get_cellCount: function() { return CS.Call(2, 34, 3, false, this); },
        set_cellCount: function(v) { return CS.Call(3, 34, 3, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$LightProbes);

// UnityEngine.LightmapSettings
var UnityEngine$LightmapSettings = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.LightmapSettings",
    Kind: "Class",
    baseTypeName: "UnityEngine.Object",
    staticDefinition: {
        get_lightmaps: function() { return CS.Call(2, 35, 0, true); },
        set_lightmaps: function(v) { return CS.Call(3, 35, 0, true, v); },
        get_lightmapsMode: function() { return CS.Call(2, 35, 1, true); },
        set_lightmapsMode: function(v) { return CS.Call(3, 35, 1, true, v); },
        get_lightProbes: function() { return CS.Call(2, 35, 2, true); },
        set_lightProbes: function(v) { return CS.Call(3, 35, 2, true, v); },
    },
    definition: {
        ctor: function() { CS.Call(5, 35, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$LightmapSettings);

// UnityEngine.GeometryUtility
var UnityEngine$GeometryUtility = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.GeometryUtility",
    Kind: "Class",
    baseTypeName: "System.Object",
    staticDefinition: {
        CalculateFrustumPlanes$$Matrix4x4: function(a0/*Matrix4x4*/) { 
            return CS.Call(4, 36, 0, true, a0); //Ret: Plane[]
        },
        CalculateFrustumPlanes$$Camera: function(a0/*Camera*/) { 
            return CS.Call(4, 36, 1, true, a0); //Ret: Plane[]
        },
        TestPlanesAABB: function(a0/*Plane[]*/, a1/*Bounds*/) { 
            return CS.Call(4, 36, 2, true, a0, a1); //Ret: Boolean
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 36, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$GeometryUtility);

// UnityEngine.Screen
var UnityEngine$Screen = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Screen",
    Kind: "Class",
    baseTypeName: "System.Object",
    staticDefinition: {
        get_resolutions: function() { return CS.Call(2, 37, 0, true); },
        set_resolutions: function(v) { return CS.Call(3, 37, 0, true, v); },
        get_currentResolution: function() { return CS.Call(2, 37, 1, true); },
        set_currentResolution: function(v) { return CS.Call(3, 37, 1, true, v); },
        get_width: function() { return CS.Call(2, 37, 2, true); },
        set_width: function(v) { return CS.Call(3, 37, 2, true, v); },
        get_height: function() { return CS.Call(2, 37, 3, true); },
        set_height: function(v) { return CS.Call(3, 37, 3, true, v); },
        get_dpi: function() { return CS.Call(2, 37, 4, true); },
        set_dpi: function(v) { return CS.Call(3, 37, 4, true, v); },
        get_fullScreen: function() { return CS.Call(2, 37, 5, true); },
        set_fullScreen: function(v) { return CS.Call(3, 37, 5, true, v); },
        get_autorotateToPortrait: function() { return CS.Call(2, 37, 6, true); },
        set_autorotateToPortrait: function(v) { return CS.Call(3, 37, 6, true, v); },
        get_autorotateToPortraitUpsideDown: function() { return CS.Call(2, 37, 7, true); },
        set_autorotateToPortraitUpsideDown: function(v) { return CS.Call(3, 37, 7, true, v); },
        get_autorotateToLandscapeLeft: function() { return CS.Call(2, 37, 8, true); },
        set_autorotateToLandscapeLeft: function(v) { return CS.Call(3, 37, 8, true, v); },
        get_autorotateToLandscapeRight: function() { return CS.Call(2, 37, 9, true); },
        set_autorotateToLandscapeRight: function(v) { return CS.Call(3, 37, 9, true, v); },
        get_orientation: function() { return CS.Call(2, 37, 10, true); },
        set_orientation: function(v) { return CS.Call(3, 37, 10, true, v); },
        get_sleepTimeout: function() { return CS.Call(2, 37, 11, true); },
        set_sleepTimeout: function(v) { return CS.Call(3, 37, 11, true, v); },
        SetResolution$$Int32$$Int32$$Boolean$$Int32: function(a0/*Int32*/, a1/*Int32*/, a2/*Boolean*/, a3/*Int32*/) { 
            return CS.Call(4, 37, 0, true, a0, a1, a2, a3); //Ret: Void
        },
        SetResolution$$Int32$$Int32$$Boolean: function(a0/*Int32*/, a1/*Int32*/, a2/*Boolean*/) { 
            return CS.Call(4, 37, 1, true, a0, a1, a2); //Ret: Void
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 37, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Screen);

// UnityEngine.SleepTimeout
var UnityEngine$SleepTimeout = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.SleepTimeout",
    Kind: "Class",
    baseTypeName: "System.Object",
    staticFields: {
        NeverSleep: {
            get: function() { return CS.Call(0, 38, 0, true); }, 
            set: function(v) { return CS.Call(1, 38, 0, true, v); }
        },
        SystemSetting: {
            get: function() { return CS.Call(0, 38, 1, true); }, 
            set: function(v) { return CS.Call(1, 38, 1, true, v); }
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 38, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$SleepTimeout);

// UnityEngine.GL
var UnityEngine$GL = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.GL",
    Kind: "Class",
    baseTypeName: "System.Object",
    staticFields: {
        TRIANGLES: {
            get: function() { return CS.Call(0, 39, 0, true); }, 
            set: function(v) { return CS.Call(1, 39, 0, true, v); }
        },
        TRIANGLE_STRIP: {
            get: function() { return CS.Call(0, 39, 1, true); }, 
            set: function(v) { return CS.Call(1, 39, 1, true, v); }
        },
        QUADS: {
            get: function() { return CS.Call(0, 39, 2, true); }, 
            set: function(v) { return CS.Call(1, 39, 2, true, v); }
        },
        LINES: {
            get: function() { return CS.Call(0, 39, 3, true); }, 
            set: function(v) { return CS.Call(1, 39, 3, true, v); }
        },
    },
    staticDefinition: {
        get_modelview: function() { return CS.Call(2, 39, 0, true); },
        set_modelview: function(v) { return CS.Call(3, 39, 0, true, v); },
        get_wireframe: function() { return CS.Call(2, 39, 1, true); },
        set_wireframe: function(v) { return CS.Call(3, 39, 1, true, v); },
        get_sRGBWrite: function() { return CS.Call(2, 39, 2, true); },
        set_sRGBWrite: function(v) { return CS.Call(3, 39, 2, true, v); },
        get_invertCulling: function() { return CS.Call(2, 39, 3, true); },
        set_invertCulling: function(v) { return CS.Call(3, 39, 3, true, v); },
        Begin: function(a0/*Int32*/) { 
            return CS.Call(4, 39, 0, true, a0); //Ret: Void
        },
        Clear$$Boolean$$Boolean$$Color$$Single: function(a0/*Boolean*/, a1/*Boolean*/, a2/*Color*/, a3/*Single*/) { 
            return CS.Call(4, 39, 1, true, a0, a1, a2, a3); //Ret: Void
        },
        Clear$$Boolean$$Boolean$$Color: function(a0/*Boolean*/, a1/*Boolean*/, a2/*Color*/) { 
            return CS.Call(4, 39, 2, true, a0, a1, a2); //Ret: Void
        },
        ClearWithSkybox: function(a0/*Boolean*/, a1/*Camera*/) { 
            return CS.Call(4, 39, 3, true, a0, a1); //Ret: Void
        },
        Color: function(a0/*Color*/) { 
            return CS.Call(4, 39, 4, true, a0); //Ret: Void
        },
        End: function() { 
            return CS.Call(4, 39, 5, true); //Ret: Void
        },
        Flush: function() { 
            return CS.Call(4, 39, 6, true); //Ret: Void
        },
        GetGPUProjectionMatrix: function(a0/*Matrix4x4*/, a1/*Boolean*/) { 
            return CS.Call(4, 39, 7, true, a0, a1); //Ret: Matrix4x4
        },
        InvalidateState: function() { 
            return CS.Call(4, 39, 8, true); //Ret: Void
        },
        IssuePluginEvent$$IntPtr$$Int32: function(a0/*IntPtr*/, a1/*Int32*/) { 
            return CS.Call(4, 39, 9, true, a0, a1); //Ret: Void
        },
        LoadIdentity: function() { 
            return CS.Call(4, 39, 10, true); //Ret: Void
        },
        LoadOrtho: function() { 
            return CS.Call(4, 39, 11, true); //Ret: Void
        },
        LoadPixelMatrix$$Single$$Single$$Single$$Single: function(a0/*Single*/, a1/*Single*/, a2/*Single*/, a3/*Single*/) { 
            return CS.Call(4, 39, 12, true, a0, a1, a2, a3); //Ret: Void
        },
        LoadPixelMatrix: function() { 
            return CS.Call(4, 39, 13, true); //Ret: Void
        },
        LoadProjectionMatrix: function(a0/*Matrix4x4*/) { 
            return CS.Call(4, 39, 14, true, a0); //Ret: Void
        },
        MultiTexCoord: function(a0/*Int32*/, a1/*Vector3*/) { 
            return CS.Call(4, 39, 15, true, a0, a1); //Ret: Void
        },
        MultiTexCoord2: function(a0/*Int32*/, a1/*Single*/, a2/*Single*/) { 
            return CS.Call(4, 39, 16, true, a0, a1, a2); //Ret: Void
        },
        MultiTexCoord3: function(a0/*Int32*/, a1/*Single*/, a2/*Single*/, a3/*Single*/) { 
            return CS.Call(4, 39, 17, true, a0, a1, a2, a3); //Ret: Void
        },
        MultMatrix: function(a0/*Matrix4x4*/) { 
            return CS.Call(4, 39, 18, true, a0); //Ret: Void
        },
        PopMatrix: function() { 
            return CS.Call(4, 39, 19, true); //Ret: Void
        },
        PushMatrix: function() { 
            return CS.Call(4, 39, 20, true); //Ret: Void
        },
        RenderTargetBarrier: function() { 
            return CS.Call(4, 39, 21, true); //Ret: Void
        },
        TexCoord: function(a0/*Vector3*/) { 
            return CS.Call(4, 39, 22, true, a0); //Ret: Void
        },
        TexCoord2: function(a0/*Single*/, a1/*Single*/) { 
            return CS.Call(4, 39, 23, true, a0, a1); //Ret: Void
        },
        TexCoord3: function(a0/*Single*/, a1/*Single*/, a2/*Single*/) { 
            return CS.Call(4, 39, 24, true, a0, a1, a2); //Ret: Void
        },
        Vertex: function(a0/*Vector3*/) { 
            return CS.Call(4, 39, 25, true, a0); //Ret: Void
        },
        Vertex3: function(a0/*Single*/, a1/*Single*/, a2/*Single*/) { 
            return CS.Call(4, 39, 26, true, a0, a1, a2); //Ret: Void
        },
        Viewport: function(a0/*Rect*/) { 
            return CS.Call(4, 39, 27, true, a0); //Ret: Void
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 39, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$GL);

// UnityEngine.MeshRenderer
var UnityEngine$MeshRenderer = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.MeshRenderer",
    Kind: "Class",
    baseTypeName: "UnityEngine.Renderer",
    definition: {
        ctor: function() { CS.Call(5, 40, 0, true, this); },
        get_additionalVertexStreams: function() { return CS.Call(2, 40, 0, false, this); },
        set_additionalVertexStreams: function(v) { return CS.Call(3, 40, 0, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$MeshRenderer);

// UnityEngine.StaticBatchingUtility
var UnityEngine$StaticBatchingUtility = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.StaticBatchingUtility",
    Kind: "Class",
    baseTypeName: "System.Object",
    staticDefinition: {
        Combine$$GameObject$Array$$GameObject: function(a0/*GameObject[]*/, a1/*GameObject*/) { 
            return CS.Call(4, 41, 0, true, a0, a1); //Ret: Void
        },
        Combine$$GameObject: function(a0/*GameObject*/) { 
            return CS.Call(4, 41, 1, true, a0); //Ret: Void
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 41, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$StaticBatchingUtility);

// UnityEngine.RectOffset
var UnityEngine$RectOffset = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.RectOffset",
    Kind: "Class",
    baseTypeName: "System.Object",
    definition: {
        ctor: function() { CS.Call(5, 42, 0, true, this); },
        ctor$$Int32$$Int32$$Int32$$Int32: function(a0, a1, a2, a3) { CS.Call(5, 42, 1, true, this, a0, a1, a2, a3); },
        get_left: function() { return CS.Call(2, 42, 0, false, this); },
        set_left: function(v) { return CS.Call(3, 42, 0, false, this, v); },
        get_right: function() { return CS.Call(2, 42, 1, false, this); },
        set_right: function(v) { return CS.Call(3, 42, 1, false, this, v); },
        get_top: function() { return CS.Call(2, 42, 2, false, this); },
        set_top: function(v) { return CS.Call(3, 42, 2, false, this, v); },
        get_bottom: function() { return CS.Call(2, 42, 3, false, this); },
        set_bottom: function(v) { return CS.Call(3, 42, 3, false, this, v); },
        get_horizontal: function() { return CS.Call(2, 42, 4, false, this); },
        set_horizontal: function(v) { return CS.Call(3, 42, 4, false, this, v); },
        get_vertical: function() { return CS.Call(2, 42, 5, false, this); },
        set_vertical: function(v) { return CS.Call(3, 42, 5, false, this, v); },
        Add: function(a0/*Rect*/) { 
            return CS.Call(4, 42, 0, false, this, a0); //Ret: Rect
        },
        Remove: function(a0/*Rect*/) { 
            return CS.Call(4, 42, 1, false, this, a0); //Ret: Rect
        },
        toString: function() { 
            return CS.Call(4, 42, 2, false, this); //Ret: String
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$RectOffset);

// UnityEngine.GUIElement
var UnityEngine$GUIElement = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.GUIElement",
    Kind: "Class",
    baseTypeName: "UnityEngine.Behaviour",
    definition: {
        ctor: function() { CS.Call(5, 43, 0, true, this); },
        GetScreenRect$$Camera: function(a0/*Camera*/) { 
            return CS.Call(4, 43, 0, false, this, a0); //Ret: Rect
        },
        GetScreenRect: function() { 
            return CS.Call(4, 43, 1, false, this); //Ret: Rect
        },
        HitTest$$Vector3$$Camera: function(a0/*Vector3*/, a1/*Camera*/) { 
            return CS.Call(4, 43, 2, false, this, a0, a1); //Ret: Boolean
        },
        HitTest$$Vector3: function(a0/*Vector3*/) { 
            return CS.Call(4, 43, 3, false, this, a0); //Ret: Boolean
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$GUIElement);

// UnityEngine.GUITexture
var UnityEngine$GUITexture = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.GUITexture",
    Kind: "Class",
    baseTypeName: "UnityEngine.GUIElement",
    definition: {
        ctor: function() { CS.Call(5, 44, 0, true, this); },
        get_color: function() { return CS.Call(2, 44, 0, false, this); },
        set_color: function(v) { return CS.Call(3, 44, 0, false, this, v); },
        get_texture: function() { return CS.Call(2, 44, 1, false, this); },
        set_texture: function(v) { return CS.Call(3, 44, 1, false, this, v); },
        get_pixelInset: function() { return CS.Call(2, 44, 2, false, this); },
        set_pixelInset: function(v) { return CS.Call(3, 44, 2, false, this, v); },
        get_border: function() { return CS.Call(2, 44, 3, false, this); },
        set_border: function(v) { return CS.Call(3, 44, 3, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$GUITexture);

// UnityEngine.GUILayer
var UnityEngine$GUILayer = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.GUILayer",
    Kind: "Class",
    baseTypeName: "UnityEngine.Behaviour",
    definition: {
        ctor: function() { CS.Call(5, 45, 0, true, this); },
        HitTest: function(a0/*Vector3*/) { 
            return CS.Call(4, 45, 0, false, this, a0); //Ret: GUIElement
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$GUILayer);

// UnityEngine.Texture
var UnityEngine$Texture = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Texture",
    Kind: "Class",
    baseTypeName: "UnityEngine.Object",
    staticDefinition: {
        get_masterTextureLimit: function() { return CS.Call(2, 46, 0, true); },
        set_masterTextureLimit: function(v) { return CS.Call(3, 46, 0, true, v); },
        get_anisotropicFiltering: function() { return CS.Call(2, 46, 1, true); },
        set_anisotropicFiltering: function(v) { return CS.Call(3, 46, 1, true, v); },
        SetGlobalAnisotropicFilteringLimits: function(a0/*Int32*/, a1/*Int32*/) { 
            return CS.Call(4, 46, 1, true, a0, a1); //Ret: Void
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 46, 0, true, this); },
        get_width: function() { return CS.Call(2, 46, 2, false, this); },
        set_width: function(v) { return CS.Call(3, 46, 2, false, this, v); },
        get_height: function() { return CS.Call(2, 46, 3, false, this); },
        set_height: function(v) { return CS.Call(3, 46, 3, false, this, v); },
        get_dimension: function() { return CS.Call(2, 46, 4, false, this); },
        set_dimension: function(v) { return CS.Call(3, 46, 4, false, this, v); },
        get_filterMode: function() { return CS.Call(2, 46, 5, false, this); },
        set_filterMode: function(v) { return CS.Call(3, 46, 5, false, this, v); },
        get_anisoLevel: function() { return CS.Call(2, 46, 6, false, this); },
        set_anisoLevel: function(v) { return CS.Call(3, 46, 6, false, this, v); },
        get_wrapMode: function() { return CS.Call(2, 46, 7, false, this); },
        set_wrapMode: function(v) { return CS.Call(3, 46, 7, false, this, v); },
        get_mipMapBias: function() { return CS.Call(2, 46, 8, false, this); },
        set_mipMapBias: function(v) { return CS.Call(3, 46, 8, false, this, v); },
        get_texelSize: function() { return CS.Call(2, 46, 9, false, this); },
        set_texelSize: function(v) { return CS.Call(3, 46, 9, false, this, v); },
        GetNativeTexturePtr: function() { 
            return CS.Call(4, 46, 0, false, this); //Ret: IntPtr
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Texture);

// UnityEngine.Texture2D
var UnityEngine$Texture2D = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Texture2D",
    Kind: "Class",
    baseTypeName: "UnityEngine.Texture",
    staticDefinition: {
        get_whiteTexture: function() { return CS.Call(2, 47, 2, true); },
        set_whiteTexture: function(v) { return CS.Call(3, 47, 2, true, v); },
        get_blackTexture: function() { return CS.Call(2, 47, 3, true); },
        set_blackTexture: function(v) { return CS.Call(3, 47, 3, true, v); },
        CreateExternalTexture: function(a0/*Int32*/, a1/*Int32*/, a2/*TextureFormat*/, a3/*Boolean*/, a4/*Boolean*/, a5/*IntPtr*/) { 
            return CS.Call(4, 47, 37, true, a0, a1, a2, a3, a4, a5); //Ret: Texture2D
        },
    },
    definition: {
        ctor$$Int32$$Int32: function(a0, a1) { CS.Call(5, 47, 0, true, this, a0, a1); },
        ctor$$Int32$$Int32$$TextureFormat$$Boolean: function(a0, a1, a2, a3) { CS.Call(5, 47, 1, true, this, a0, a1, a2, a3); },
        ctor$$Int32$$Int32$$TextureFormat$$Boolean$$Boolean: function(a0, a1, a2, a3, a4) { CS.Call(5, 47, 2, true, this, a0, a1, a2, a3, a4); },
        get_mipmapCount: function() { return CS.Call(2, 47, 0, false, this); },
        set_mipmapCount: function(v) { return CS.Call(3, 47, 0, false, this, v); },
        get_format: function() { return CS.Call(2, 47, 1, false, this); },
        set_format: function(v) { return CS.Call(3, 47, 1, false, this, v); },
        Apply$$Boolean$$Boolean: function(a0/*Boolean*/, a1/*Boolean*/) { 
            return CS.Call(4, 47, 0, false, this, a0, a1); //Ret: Void
        },
        Apply$$Boolean: function(a0/*Boolean*/) { 
            return CS.Call(4, 47, 1, false, this, a0); //Ret: Void
        },
        Apply: function() { 
            return CS.Call(4, 47, 2, false, this); //Ret: Void
        },
        Compress: function(a0/*Boolean*/) { 
            return CS.Call(4, 47, 3, false, this, a0); //Ret: Void
        },
        EncodeToJPG$$Int32: function(a0/*Int32*/) { 
            return CS.Call(4, 47, 4, false, this, a0); //Ret: Byte[]
        },
        EncodeToJPG: function() { 
            return CS.Call(4, 47, 5, false, this); //Ret: Byte[]
        },
        EncodeToPNG: function() { 
            return CS.Call(4, 47, 6, false, this); //Ret: Byte[]
        },
        GetPixel: function(a0/*Int32*/, a1/*Int32*/) { 
            return CS.Call(4, 47, 7, false, this, a0, a1); //Ret: Color
        },
        GetPixelBilinear: function(a0/*Single*/, a1/*Single*/) { 
            return CS.Call(4, 47, 8, false, this, a0, a1); //Ret: Color
        },
        GetPixels$$Int32$$Int32$$Int32$$Int32$$Int32: function(a0/*Int32*/, a1/*Int32*/, a2/*Int32*/, a3/*Int32*/, a4/*Int32*/) { 
            return CS.Call(4, 47, 9, false, this, a0, a1, a2, a3, a4); //Ret: Color[]
        },
        GetPixels$$Int32$$Int32$$Int32$$Int32: function(a0/*Int32*/, a1/*Int32*/, a2/*Int32*/, a3/*Int32*/) { 
            return CS.Call(4, 47, 10, false, this, a0, a1, a2, a3); //Ret: Color[]
        },
        GetPixels$$Int32: function(a0/*Int32*/) { 
            return CS.Call(4, 47, 11, false, this, a0); //Ret: Color[]
        },
        GetPixels: function() { 
            return CS.Call(4, 47, 12, false, this); //Ret: Color[]
        },
        GetPixels32$$Int32: function(a0/*Int32*/) { 
            return CS.Call(4, 47, 13, false, this, a0); //Ret: Color32[]
        },
        GetPixels32: function() { 
            return CS.Call(4, 47, 14, false, this); //Ret: Color32[]
        },
        GetRawTextureData: function() { 
            return CS.Call(4, 47, 15, false, this); //Ret: Byte[]
        },
        LoadImage$$Byte$Array$$Boolean: function(a0/*Byte[]*/, a1/*Boolean*/) { 
            return CS.Call(4, 47, 16, false, this, a0, a1); //Ret: Boolean
        },
        LoadImage$$Byte$Array: function(a0/*Byte[]*/) { 
            return CS.Call(4, 47, 17, false, this, a0); //Ret: Boolean
        },
        LoadRawTextureData$$IntPtr$$Int32: function(a0/*IntPtr*/, a1/*Int32*/) { 
            return CS.Call(4, 47, 18, false, this, a0, a1); //Ret: Void
        },
        LoadRawTextureData$$Byte$Array: function(a0/*Byte[]*/) { 
            return CS.Call(4, 47, 19, false, this, a0); //Ret: Void
        },
        PackTextures$$Texture2D$Array$$Int32$$Int32$$Boolean: function(a0/*Texture2D[]*/, a1/*Int32*/, a2/*Int32*/, a3/*Boolean*/) { 
            return CS.Call(4, 47, 20, false, this, a0, a1, a2, a3); //Ret: Rect[]
        },
        PackTextures$$Texture2D$Array$$Int32$$Int32: function(a0/*Texture2D[]*/, a1/*Int32*/, a2/*Int32*/) { 
            return CS.Call(4, 47, 21, false, this, a0, a1, a2); //Ret: Rect[]
        },
        PackTextures$$Texture2D$Array$$Int32: function(a0/*Texture2D[]*/, a1/*Int32*/) { 
            return CS.Call(4, 47, 22, false, this, a0, a1); //Ret: Rect[]
        },
        ReadPixels$$Rect$$Int32$$Int32$$Boolean: function(a0/*Rect*/, a1/*Int32*/, a2/*Int32*/, a3/*Boolean*/) { 
            return CS.Call(4, 47, 23, false, this, a0, a1, a2, a3); //Ret: Void
        },
        ReadPixels$$Rect$$Int32$$Int32: function(a0/*Rect*/, a1/*Int32*/, a2/*Int32*/) { 
            return CS.Call(4, 47, 24, false, this, a0, a1, a2); //Ret: Void
        },
        Resize$$Int32$$Int32$$TextureFormat$$Boolean: function(a0/*Int32*/, a1/*Int32*/, a2/*TextureFormat*/, a3/*Boolean*/) { 
            return CS.Call(4, 47, 25, false, this, a0, a1, a2, a3); //Ret: Boolean
        },
        Resize$$Int32$$Int32: function(a0/*Int32*/, a1/*Int32*/) { 
            return CS.Call(4, 47, 26, false, this, a0, a1); //Ret: Boolean
        },
        SetPixel: function(a0/*Int32*/, a1/*Int32*/, a2/*Color*/) { 
            return CS.Call(4, 47, 27, false, this, a0, a1, a2); //Ret: Void
        },
        SetPixels$$Int32$$Int32$$Int32$$Int32$$Color$Array$$Int32: function(a0/*Int32*/, a1/*Int32*/, a2/*Int32*/, a3/*Int32*/, a4/*Color[]*/, a5/*Int32*/) { 
            return CS.Call(4, 47, 28, false, this, a0, a1, a2, a3, a4, a5); //Ret: Void
        },
        SetPixels$$Int32$$Int32$$Int32$$Int32$$Color$Array: function(a0/*Int32*/, a1/*Int32*/, a2/*Int32*/, a3/*Int32*/, a4/*Color[]*/) { 
            return CS.Call(4, 47, 29, false, this, a0, a1, a2, a3, a4); //Ret: Void
        },
        SetPixels$$Color$Array$$Int32: function(a0/*Color[]*/, a1/*Int32*/) { 
            return CS.Call(4, 47, 30, false, this, a0, a1); //Ret: Void
        },
        SetPixels$$Color$Array: function(a0/*Color[]*/) { 
            return CS.Call(4, 47, 31, false, this, a0); //Ret: Void
        },
        SetPixels32$$Int32$$Int32$$Int32$$Int32$$Color32$Array$$Int32: function(a0/*Int32*/, a1/*Int32*/, a2/*Int32*/, a3/*Int32*/, a4/*Color32[]*/, a5/*Int32*/) { 
            return CS.Call(4, 47, 32, false, this, a0, a1, a2, a3, a4, a5); //Ret: Void
        },
        SetPixels32$$Int32$$Int32$$Int32$$Int32$$Color32$Array: function(a0/*Int32*/, a1/*Int32*/, a2/*Int32*/, a3/*Int32*/, a4/*Color32[]*/) { 
            return CS.Call(4, 47, 33, false, this, a0, a1, a2, a3, a4); //Ret: Void
        },
        SetPixels32$$Color32$Array$$Int32: function(a0/*Color32[]*/, a1/*Int32*/) { 
            return CS.Call(4, 47, 34, false, this, a0, a1); //Ret: Void
        },
        SetPixels32$$Color32$Array: function(a0/*Color32[]*/) { 
            return CS.Call(4, 47, 35, false, this, a0); //Ret: Void
        },
        UpdateExternalTexture: function(a0/*IntPtr*/) { 
            return CS.Call(4, 47, 36, false, this, a0); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Texture2D);

// UnityEngine.Cubemap
var UnityEngine$Cubemap = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Cubemap",
    Kind: "Class",
    baseTypeName: "UnityEngine.Texture",
    definition: {
        ctor: function(a0, a1, a2) { CS.Call(5, 48, 0, true, this, a0, a1, a2); },
        get_mipmapCount: function() { return CS.Call(2, 48, 0, false, this); },
        set_mipmapCount: function(v) { return CS.Call(3, 48, 0, false, this, v); },
        get_format: function() { return CS.Call(2, 48, 1, false, this); },
        set_format: function(v) { return CS.Call(3, 48, 1, false, this, v); },
        Apply$$Boolean$$Boolean: function(a0/*Boolean*/, a1/*Boolean*/) { 
            return CS.Call(4, 48, 0, false, this, a0, a1); //Ret: Void
        },
        Apply$$Boolean: function(a0/*Boolean*/) { 
            return CS.Call(4, 48, 1, false, this, a0); //Ret: Void
        },
        Apply: function() { 
            return CS.Call(4, 48, 2, false, this); //Ret: Void
        },
        GetPixel: function(a0/*CubemapFace*/, a1/*Int32*/, a2/*Int32*/) { 
            return CS.Call(4, 48, 3, false, this, a0, a1, a2); //Ret: Color
        },
        GetPixels$$CubemapFace$$Int32: function(a0/*CubemapFace*/, a1/*Int32*/) { 
            return CS.Call(4, 48, 4, false, this, a0, a1); //Ret: Color[]
        },
        GetPixels$$CubemapFace: function(a0/*CubemapFace*/) { 
            return CS.Call(4, 48, 5, false, this, a0); //Ret: Color[]
        },
        SetPixel: function(a0/*CubemapFace*/, a1/*Int32*/, a2/*Int32*/, a3/*Color*/) { 
            return CS.Call(4, 48, 6, false, this, a0, a1, a2, a3); //Ret: Void
        },
        SetPixels$$Color$Array$$CubemapFace$$Int32: function(a0/*Color[]*/, a1/*CubemapFace*/, a2/*Int32*/) { 
            return CS.Call(4, 48, 7, false, this, a0, a1, a2); //Ret: Void
        },
        SetPixels$$Color$Array$$CubemapFace: function(a0/*Color[]*/, a1/*CubemapFace*/) { 
            return CS.Call(4, 48, 8, false, this, a0, a1); //Ret: Void
        },
        SmoothEdges$$Int32: function(a0/*Int32*/) { 
            return CS.Call(4, 48, 9, false, this, a0); //Ret: Void
        },
        SmoothEdges: function() { 
            return CS.Call(4, 48, 10, false, this); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Cubemap);

// UnityEngine.Texture3D
var UnityEngine$Texture3D = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Texture3D",
    Kind: "Class",
    baseTypeName: "UnityEngine.Texture",
    definition: {
        ctor: function(a0, a1, a2, a3, a4) { CS.Call(5, 49, 0, true, this, a0, a1, a2, a3, a4); },
        get_depth: function() { return CS.Call(2, 49, 0, false, this); },
        set_depth: function(v) { return CS.Call(3, 49, 0, false, this, v); },
        get_format: function() { return CS.Call(2, 49, 1, false, this); },
        set_format: function(v) { return CS.Call(3, 49, 1, false, this, v); },
        Apply$$Boolean$$Boolean: function(a0/*Boolean*/, a1/*Boolean*/) { 
            return CS.Call(4, 49, 0, false, this, a0, a1); //Ret: Void
        },
        Apply$$Boolean: function(a0/*Boolean*/) { 
            return CS.Call(4, 49, 1, false, this, a0); //Ret: Void
        },
        Apply: function() { 
            return CS.Call(4, 49, 2, false, this); //Ret: Void
        },
        GetPixels$$Int32: function(a0/*Int32*/) { 
            return CS.Call(4, 49, 3, false, this, a0); //Ret: Color[]
        },
        GetPixels: function() { 
            return CS.Call(4, 49, 4, false, this); //Ret: Color[]
        },
        GetPixels32$$Int32: function(a0/*Int32*/) { 
            return CS.Call(4, 49, 5, false, this, a0); //Ret: Color32[]
        },
        GetPixels32: function() { 
            return CS.Call(4, 49, 6, false, this); //Ret: Color32[]
        },
        SetPixels$$Color$Array$$Int32: function(a0/*Color[]*/, a1/*Int32*/) { 
            return CS.Call(4, 49, 7, false, this, a0, a1); //Ret: Void
        },
        SetPixels$$Color$Array: function(a0/*Color[]*/) { 
            return CS.Call(4, 49, 8, false, this, a0); //Ret: Void
        },
        SetPixels32$$Color32$Array$$Int32: function(a0/*Color32[]*/, a1/*Int32*/) { 
            return CS.Call(4, 49, 9, false, this, a0, a1); //Ret: Void
        },
        SetPixels32$$Color32$Array: function(a0/*Color32[]*/) { 
            return CS.Call(4, 49, 10, false, this, a0); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Texture3D);

// UnityEngine.Texture2DArray
var UnityEngine$Texture2DArray = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Texture2DArray",
    Kind: "Class",
    baseTypeName: "UnityEngine.Texture",
    definition: {
        ctor$$Int32$$Int32$$Int32$$TextureFormat$$Boolean: function(a0, a1, a2, a3, a4) { CS.Call(5, 50, 0, true, this, a0, a1, a2, a3, a4); },
        ctor$$Int32$$Int32$$Int32$$TextureFormat$$Boolean$$Boolean: function(a0, a1, a2, a3, a4, a5) { CS.Call(5, 50, 1, true, this, a0, a1, a2, a3, a4, a5); },
        get_depth: function() { return CS.Call(2, 50, 0, false, this); },
        set_depth: function(v) { return CS.Call(3, 50, 0, false, this, v); },
        get_format: function() { return CS.Call(2, 50, 1, false, this); },
        set_format: function(v) { return CS.Call(3, 50, 1, false, this, v); },
        Apply$$Boolean$$Boolean: function(a0/*Boolean*/, a1/*Boolean*/) { 
            return CS.Call(4, 50, 0, false, this, a0, a1); //Ret: Void
        },
        Apply$$Boolean: function(a0/*Boolean*/) { 
            return CS.Call(4, 50, 1, false, this, a0); //Ret: Void
        },
        Apply: function() { 
            return CS.Call(4, 50, 2, false, this); //Ret: Void
        },
        GetPixels$$Int32$$Int32: function(a0/*Int32*/, a1/*Int32*/) { 
            return CS.Call(4, 50, 3, false, this, a0, a1); //Ret: Color[]
        },
        GetPixels$$Int32: function(a0/*Int32*/) { 
            return CS.Call(4, 50, 4, false, this, a0); //Ret: Color[]
        },
        GetPixels32$$Int32$$Int32: function(a0/*Int32*/, a1/*Int32*/) { 
            return CS.Call(4, 50, 5, false, this, a0, a1); //Ret: Color32[]
        },
        GetPixels32$$Int32: function(a0/*Int32*/) { 
            return CS.Call(4, 50, 6, false, this, a0); //Ret: Color32[]
        },
        SetPixels$$Color$Array$$Int32$$Int32: function(a0/*Color[]*/, a1/*Int32*/, a2/*Int32*/) { 
            return CS.Call(4, 50, 7, false, this, a0, a1, a2); //Ret: Void
        },
        SetPixels$$Color$Array$$Int32: function(a0/*Color[]*/, a1/*Int32*/) { 
            return CS.Call(4, 50, 8, false, this, a0, a1); //Ret: Void
        },
        SetPixels32$$Color32$Array$$Int32$$Int32: function(a0/*Color32[]*/, a1/*Int32*/, a2/*Int32*/) { 
            return CS.Call(4, 50, 9, false, this, a0, a1, a2); //Ret: Void
        },
        SetPixels32$$Color32$Array$$Int32: function(a0/*Color32[]*/, a1/*Int32*/) { 
            return CS.Call(4, 50, 10, false, this, a0, a1); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Texture2DArray);

// UnityEngine.SparseTexture
var UnityEngine$SparseTexture = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.SparseTexture",
    Kind: "Class",
    baseTypeName: "UnityEngine.Texture",
    definition: {
        ctor$$Int32$$Int32$$TextureFormat$$Int32: function(a0, a1, a2, a3) { CS.Call(5, 51, 0, true, this, a0, a1, a2, a3); },
        ctor$$Int32$$Int32$$TextureFormat$$Int32$$Boolean: function(a0, a1, a2, a3, a4) { CS.Call(5, 51, 1, true, this, a0, a1, a2, a3, a4); },
        get_tileWidth: function() { return CS.Call(2, 51, 0, false, this); },
        set_tileWidth: function(v) { return CS.Call(3, 51, 0, false, this, v); },
        get_tileHeight: function() { return CS.Call(2, 51, 1, false, this); },
        set_tileHeight: function(v) { return CS.Call(3, 51, 1, false, this, v); },
        get_isCreated: function() { return CS.Call(2, 51, 2, false, this); },
        set_isCreated: function(v) { return CS.Call(3, 51, 2, false, this, v); },
        UnloadTile: function(a0/*Int32*/, a1/*Int32*/, a2/*Int32*/) { 
            return CS.Call(4, 51, 0, false, this, a0, a1, a2); //Ret: Void
        },
        UpdateTile: function(a0/*Int32*/, a1/*Int32*/, a2/*Int32*/, a3/*Color32[]*/) { 
            return CS.Call(4, 51, 1, false, this, a0, a1, a2, a3); //Ret: Void
        },
        UpdateTileRaw: function(a0/*Int32*/, a1/*Int32*/, a2/*Int32*/, a3/*Byte[]*/) { 
            return CS.Call(4, 51, 2, false, this, a0, a1, a2, a3); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$SparseTexture);

// UnityEngine.RenderTexture
var UnityEngine$RenderTexture = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.RenderTexture",
    Kind: "Class",
    baseTypeName: "UnityEngine.Texture",
    staticDefinition: {
        get_active: function() { return CS.Call(2, 52, 14, true); },
        set_active: function(v) { return CS.Call(3, 52, 14, true, v); },
        GetTemporary$$Int32$$Int32$$Int32$$RenderTextureFormat$$RenderTextureReadWrite$$Int32: function(a0/*Int32*/, a1/*Int32*/, a2/*Int32*/, a3/*RenderTextureFormat*/, a4/*RenderTextureReadWrite*/, a5/*Int32*/) { 
            return CS.Call(4, 52, 9, true, a0, a1, a2, a3, a4, a5); //Ret: RenderTexture
        },
        GetTemporary$$Int32$$Int32$$Int32$$RenderTextureFormat$$RenderTextureReadWrite: function(a0/*Int32*/, a1/*Int32*/, a2/*Int32*/, a3/*RenderTextureFormat*/, a4/*RenderTextureReadWrite*/) { 
            return CS.Call(4, 52, 10, true, a0, a1, a2, a3, a4); //Ret: RenderTexture
        },
        GetTemporary$$Int32$$Int32$$Int32$$RenderTextureFormat: function(a0/*Int32*/, a1/*Int32*/, a2/*Int32*/, a3/*RenderTextureFormat*/) { 
            return CS.Call(4, 52, 11, true, a0, a1, a2, a3); //Ret: RenderTexture
        },
        GetTemporary$$Int32$$Int32$$Int32: function(a0/*Int32*/, a1/*Int32*/, a2/*Int32*/) { 
            return CS.Call(4, 52, 12, true, a0, a1, a2); //Ret: RenderTexture
        },
        GetTemporary$$Int32$$Int32: function(a0/*Int32*/, a1/*Int32*/) { 
            return CS.Call(4, 52, 13, true, a0, a1); //Ret: RenderTexture
        },
        ReleaseTemporary: function(a0/*RenderTexture*/) { 
            return CS.Call(4, 52, 14, true, a0); //Ret: Void
        },
        SupportsStencil: function(a0/*RenderTexture*/) { 
            return CS.Call(4, 52, 15, true, a0); //Ret: Boolean
        },
    },
    definition: {
        ctor$$Int32$$Int32$$Int32$$RenderTextureFormat$$RenderTextureReadWrite: function(a0, a1, a2, a3, a4) { CS.Call(5, 52, 0, true, this, a0, a1, a2, a3, a4); },
        ctor$$Int32$$Int32$$Int32$$RenderTextureFormat: function(a0, a1, a2, a3) { CS.Call(5, 52, 1, true, this, a0, a1, a2, a3); },
        ctor$$Int32$$Int32$$Int32: function(a0, a1, a2) { CS.Call(5, 52, 2, true, this, a0, a1, a2); },
        get_width: function() { return CS.Call(2, 52, 0, false, this); },
        set_width: function(v) { return CS.Call(3, 52, 0, false, this, v); },
        get_height: function() { return CS.Call(2, 52, 1, false, this); },
        set_height: function(v) { return CS.Call(3, 52, 1, false, this, v); },
        get_depth: function() { return CS.Call(2, 52, 2, false, this); },
        set_depth: function(v) { return CS.Call(3, 52, 2, false, this, v); },
        get_isPowerOfTwo: function() { return CS.Call(2, 52, 3, false, this); },
        set_isPowerOfTwo: function(v) { return CS.Call(3, 52, 3, false, this, v); },
        get_sRGB: function() { return CS.Call(2, 52, 4, false, this); },
        set_sRGB: function(v) { return CS.Call(3, 52, 4, false, this, v); },
        get_format: function() { return CS.Call(2, 52, 5, false, this); },
        set_format: function(v) { return CS.Call(3, 52, 5, false, this, v); },
        get_useMipMap: function() { return CS.Call(2, 52, 6, false, this); },
        set_useMipMap: function(v) { return CS.Call(3, 52, 6, false, this, v); },
        get_generateMips: function() { return CS.Call(2, 52, 7, false, this); },
        set_generateMips: function(v) { return CS.Call(3, 52, 7, false, this, v); },
        get_dimension: function() { return CS.Call(2, 52, 8, false, this); },
        set_dimension: function(v) { return CS.Call(3, 52, 8, false, this, v); },
        get_volumeDepth: function() { return CS.Call(2, 52, 9, false, this); },
        set_volumeDepth: function(v) { return CS.Call(3, 52, 9, false, this, v); },
        get_antiAliasing: function() { return CS.Call(2, 52, 10, false, this); },
        set_antiAliasing: function(v) { return CS.Call(3, 52, 10, false, this, v); },
        get_enableRandomWrite: function() { return CS.Call(2, 52, 11, false, this); },
        set_enableRandomWrite: function(v) { return CS.Call(3, 52, 11, false, this, v); },
        get_colorBuffer: function() { return CS.Call(2, 52, 12, false, this); },
        set_colorBuffer: function(v) { return CS.Call(3, 52, 12, false, this, v); },
        get_depthBuffer: function() { return CS.Call(2, 52, 13, false, this); },
        set_depthBuffer: function(v) { return CS.Call(3, 52, 13, false, this, v); },
        Create: function() { 
            return CS.Call(4, 52, 0, false, this); //Ret: Boolean
        },
        DiscardContents$$Boolean$$Boolean: function(a0/*Boolean*/, a1/*Boolean*/) { 
            return CS.Call(4, 52, 1, false, this, a0, a1); //Ret: Void
        },
        DiscardContents: function() { 
            return CS.Call(4, 52, 2, false, this); //Ret: Void
        },
        GetNativeDepthBufferPtr: function() { 
            return CS.Call(4, 52, 3, false, this); //Ret: IntPtr
        },
        GetTexelOffset: function() { 
            return CS.Call(4, 52, 4, false, this); //Ret: Vector2
        },
        IsCreated: function() { 
            return CS.Call(4, 52, 5, false, this); //Ret: Boolean
        },
        MarkRestoreExpected: function() { 
            return CS.Call(4, 52, 6, false, this); //Ret: Void
        },
        Release: function() { 
            return CS.Call(4, 52, 7, false, this); //Ret: Void
        },
        SetGlobalShaderProperty: function(a0/*String*/) { 
            return CS.Call(4, 52, 8, false, this, a0); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$RenderTexture);

// UnityEngine.ReflectionProbe
var UnityEngine$ReflectionProbe = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.ReflectionProbe",
    Kind: "Class",
    baseTypeName: "UnityEngine.Behaviour",
    staticDefinition: {
        get_minBakedCubemapResolution: function() { return CS.Call(2, 53, 22, true); },
        set_minBakedCubemapResolution: function(v) { return CS.Call(3, 53, 22, true, v); },
        get_maxBakedCubemapResolution: function() { return CS.Call(2, 53, 23, true); },
        set_maxBakedCubemapResolution: function(v) { return CS.Call(3, 53, 23, true, v); },
        BlendCubemap: function(a0/*Texture*/, a1/*Texture*/, a2/*Single*/, a3/*RenderTexture*/) { 
            return CS.Call(4, 53, 3, true, a0, a1, a2, a3); //Ret: Boolean
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 53, 0, true, this); },
        get_type: function() { return CS.Call(2, 53, 0, false, this); },
        set_type: function(v) { return CS.Call(3, 53, 0, false, this, v); },
        get_hdr: function() { return CS.Call(2, 53, 1, false, this); },
        set_hdr: function(v) { return CS.Call(3, 53, 1, false, this, v); },
        get_size: function() { return CS.Call(2, 53, 2, false, this); },
        set_size: function(v) { return CS.Call(3, 53, 2, false, this, v); },
        get_center: function() { return CS.Call(2, 53, 3, false, this); },
        set_center: function(v) { return CS.Call(3, 53, 3, false, this, v); },
        get_nearClipPlane: function() { return CS.Call(2, 53, 4, false, this); },
        set_nearClipPlane: function(v) { return CS.Call(3, 53, 4, false, this, v); },
        get_farClipPlane: function() { return CS.Call(2, 53, 5, false, this); },
        set_farClipPlane: function(v) { return CS.Call(3, 53, 5, false, this, v); },
        get_shadowDistance: function() { return CS.Call(2, 53, 6, false, this); },
        set_shadowDistance: function(v) { return CS.Call(3, 53, 6, false, this, v); },
        get_resolution: function() { return CS.Call(2, 53, 7, false, this); },
        set_resolution: function(v) { return CS.Call(3, 53, 7, false, this, v); },
        get_cullingMask: function() { return CS.Call(2, 53, 8, false, this); },
        set_cullingMask: function(v) { return CS.Call(3, 53, 8, false, this, v); },
        get_clearFlags: function() { return CS.Call(2, 53, 9, false, this); },
        set_clearFlags: function(v) { return CS.Call(3, 53, 9, false, this, v); },
        get_backgroundColor: function() { return CS.Call(2, 53, 10, false, this); },
        set_backgroundColor: function(v) { return CS.Call(3, 53, 10, false, this, v); },
        get_intensity: function() { return CS.Call(2, 53, 11, false, this); },
        set_intensity: function(v) { return CS.Call(3, 53, 11, false, this, v); },
        get_blendDistance: function() { return CS.Call(2, 53, 12, false, this); },
        set_blendDistance: function(v) { return CS.Call(3, 53, 12, false, this, v); },
        get_boxProjection: function() { return CS.Call(2, 53, 13, false, this); },
        set_boxProjection: function(v) { return CS.Call(3, 53, 13, false, this, v); },
        get_bounds: function() { return CS.Call(2, 53, 14, false, this); },
        set_bounds: function(v) { return CS.Call(3, 53, 14, false, this, v); },
        get_mode: function() { return CS.Call(2, 53, 15, false, this); },
        set_mode: function(v) { return CS.Call(3, 53, 15, false, this, v); },
        get_importance: function() { return CS.Call(2, 53, 16, false, this); },
        set_importance: function(v) { return CS.Call(3, 53, 16, false, this, v); },
        get_refreshMode: function() { return CS.Call(2, 53, 17, false, this); },
        set_refreshMode: function(v) { return CS.Call(3, 53, 17, false, this, v); },
        get_timeSlicingMode: function() { return CS.Call(2, 53, 18, false, this); },
        set_timeSlicingMode: function(v) { return CS.Call(3, 53, 18, false, this, v); },
        get_bakedTexture: function() { return CS.Call(2, 53, 19, false, this); },
        set_bakedTexture: function(v) { return CS.Call(3, 53, 19, false, this, v); },
        get_customBakedTexture: function() { return CS.Call(2, 53, 20, false, this); },
        set_customBakedTexture: function(v) { return CS.Call(3, 53, 20, false, this, v); },
        get_texture: function() { return CS.Call(2, 53, 21, false, this); },
        set_texture: function(v) { return CS.Call(3, 53, 21, false, this, v); },
        IsFinishedRendering: function(a0/*Int32*/) { 
            return CS.Call(4, 53, 0, false, this, a0); //Ret: Boolean
        },
        RenderProbe$$RenderTexture: function(a0/*RenderTexture*/) { 
            return CS.Call(4, 53, 1, false, this, a0); //Ret: Int32
        },
        RenderProbe: function() { 
            return CS.Call(4, 53, 2, false, this); //Ret: Int32
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$ReflectionProbe);

// UnityEngine.LOD
var UnityEngine$LOD = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.LOD",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    fields: {
        screenRelativeTransitionHeight: {
            get: function() { return CS.Call(0, 54, 0, false, this); }, 
            set: function(v) { return CS.Call(1, 54, 0, false, this, v); }
        },
        fadeTransitionWidth: {
            get: function() { return CS.Call(0, 54, 1, false, this); }, 
            set: function(v) { return CS.Call(1, 54, 1, false, this, v); }
        },
        renderers: {
            get: function() { return CS.Call(0, 54, 2, false, this); }, 
            set: function(v) { return CS.Call(1, 54, 2, false, this, v); }
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 54, 0, true, this); },
        ctor$$Single$$Renderer$Array: function(a0, a1) { CS.Call(5, 54, 1, true, this, a0, a1); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$LOD);

// UnityEngine.LODGroup
var UnityEngine$LODGroup = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.LODGroup",
    Kind: "Class",
    baseTypeName: "UnityEngine.Component",
    staticDefinition: {
        get_crossFadeAnimationDuration: function() { return CS.Call(2, 55, 6, true); },
        set_crossFadeAnimationDuration: function(v) { return CS.Call(3, 55, 6, true, v); },
    },
    definition: {
        ctor: function() { CS.Call(5, 55, 0, true, this); },
        get_localReferencePoint: function() { return CS.Call(2, 55, 0, false, this); },
        set_localReferencePoint: function(v) { return CS.Call(3, 55, 0, false, this, v); },
        get_size: function() { return CS.Call(2, 55, 1, false, this); },
        set_size: function(v) { return CS.Call(3, 55, 1, false, this, v); },
        get_lodCount: function() { return CS.Call(2, 55, 2, false, this); },
        set_lodCount: function(v) { return CS.Call(3, 55, 2, false, this, v); },
        get_fadeMode: function() { return CS.Call(2, 55, 3, false, this); },
        set_fadeMode: function(v) { return CS.Call(3, 55, 3, false, this, v); },
        get_animateCrossFading: function() { return CS.Call(2, 55, 4, false, this); },
        set_animateCrossFading: function(v) { return CS.Call(3, 55, 4, false, this, v); },
        get_enabled: function() { return CS.Call(2, 55, 5, false, this); },
        set_enabled: function(v) { return CS.Call(3, 55, 5, false, this, v); },
        ForceLOD: function(a0/*Int32*/) { 
            return CS.Call(4, 55, 0, false, this, a0); //Ret: Void
        },
        GetLODs: function() { 
            return CS.Call(4, 55, 1, false, this); //Ret: LOD[]
        },
        RecalculateBounds: function() { 
            return CS.Call(4, 55, 2, false, this); //Ret: Void
        },
        SetLODs: function(a0/*LOD[]*/) { 
            return CS.Call(4, 55, 3, false, this, a0); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$LODGroup);

// UnityEngine.BoundingSphere
var UnityEngine$BoundingSphere = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.BoundingSphere",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    fields: {
        position: {
            get: function() { return CS.Call(0, 56, 0, false, this); }, 
            set: function(v) { return CS.Call(1, 56, 0, false, this, v); }
        },
        radius: {
            get: function() { return CS.Call(0, 56, 1, false, this); }, 
            set: function(v) { return CS.Call(1, 56, 1, false, this, v); }
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 56, 0, true, this); },
        ctor$$Vector3$$Single: function(a0, a1) { CS.Call(5, 56, 1, true, this, a0, a1); },
        ctor$$Vector4: function(a0) { CS.Call(5, 56, 2, true, this, a0); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$BoundingSphere);

// UnityEngine.CullingGroupEvent
var UnityEngine$CullingGroupEvent = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.CullingGroupEvent",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    definition: {
        ctor: function() { CS.Call(5, 57, 0, true, this); },
        get_index: function() { return CS.Call(2, 57, 0, false, this); },
        set_index: function(v) { return CS.Call(3, 57, 0, false, this, v); },
        get_isVisible: function() { return CS.Call(2, 57, 1, false, this); },
        set_isVisible: function(v) { return CS.Call(3, 57, 1, false, this, v); },
        get_wasVisible: function() { return CS.Call(2, 57, 2, false, this); },
        set_wasVisible: function(v) { return CS.Call(3, 57, 2, false, this, v); },
        get_hasBecomeVisible: function() { return CS.Call(2, 57, 3, false, this); },
        set_hasBecomeVisible: function(v) { return CS.Call(3, 57, 3, false, this, v); },
        get_hasBecomeInvisible: function() { return CS.Call(2, 57, 4, false, this); },
        set_hasBecomeInvisible: function(v) { return CS.Call(3, 57, 4, false, this, v); },
        get_currentDistance: function() { return CS.Call(2, 57, 5, false, this); },
        set_currentDistance: function(v) { return CS.Call(3, 57, 5, false, this, v); },
        get_previousDistance: function() { return CS.Call(2, 57, 6, false, this); },
        set_previousDistance: function(v) { return CS.Call(3, 57, 6, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$CullingGroupEvent);

// UnityEngine.CullingGroup
var UnityEngine$CullingGroup = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.CullingGroup",
    Kind: "Class",
    baseTypeName: "System.Object",
    interfaceNames: ["System.IDisposable"],
    staticDefinition: {
        EraseSwapBack$1$$Int32$$T$Array$$Int32: function(t0, a0/*Int32*/, a1/*T[]*/, a2/*Int32&*/) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 58, 12, true, native_t0, a0, a1, a2); //Ret: Void
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 58, 0, true, this); },
        get_onStateChanged: function() { return CS.Call(2, 58, 0, false, this); },
        set_onStateChanged: function(v) { return CS.Call(3, 58, 0, false, this, v); },
        get_enabled: function() { return CS.Call(2, 58, 1, false, this); },
        set_enabled: function(v) { return CS.Call(3, 58, 1, false, this, v); },
        get_targetCamera: function() { return CS.Call(2, 58, 2, false, this); },
        set_targetCamera: function(v) { return CS.Call(3, 58, 2, false, this, v); },
        Dispose: function() { 
            return CS.Call(4, 58, 0, false, this); //Ret: Void
        },
        EraseSwapBack$$Int32: function(a0/*Int32*/) { 
            return CS.Call(4, 58, 1, false, this, a0); //Ret: Void
        },
        GetDistance: function(a0/*Int32*/) { 
            return CS.Call(4, 58, 2, false, this, a0); //Ret: Int32
        },
        IsVisible: function(a0/*Int32*/) { 
            return CS.Call(4, 58, 3, false, this, a0); //Ret: Boolean
        },
        QueryIndices$$Boolean$$Int32$$Int32$Array$$Int32: function(a0/*Boolean*/, a1/*Int32*/, a2/*Int32[]*/, a3/*Int32*/) { 
            return CS.Call(4, 58, 4, false, this, a0, a1, a2, a3); //Ret: Int32
        },
        QueryIndices$$Int32$$Int32$Array$$Int32: function(a0/*Int32*/, a1/*Int32[]*/, a2/*Int32*/) { 
            return CS.Call(4, 58, 5, false, this, a0, a1, a2); //Ret: Int32
        },
        QueryIndices$$Boolean$$Int32$Array$$Int32: function(a0/*Boolean*/, a1/*Int32[]*/, a2/*Int32*/) { 
            return CS.Call(4, 58, 6, false, this, a0, a1, a2); //Ret: Int32
        },
        SetBoundingDistances: function(a0/*Single[]*/) { 
            return CS.Call(4, 58, 7, false, this, a0); //Ret: Void
        },
        SetBoundingSphereCount: function(a0/*Int32*/) { 
            return CS.Call(4, 58, 8, false, this, a0); //Ret: Void
        },
        SetBoundingSpheres: function(a0/*BoundingSphere[]*/) { 
            return CS.Call(4, 58, 9, false, this, a0); //Ret: Void
        },
        SetDistanceReferencePoint$$Transform: function(a0/*Transform*/) { 
            return CS.Call(4, 58, 10, false, this, a0); //Ret: Void
        },
        SetDistanceReferencePoint$$Vector3: function(a0/*Vector3*/) { 
            return CS.Call(4, 58, 11, false, this, a0); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$CullingGroup);

// UnityEngine.GradientColorKey
var UnityEngine$GradientColorKey = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.GradientColorKey",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    fields: {
        color: {
            get: function() { return CS.Call(0, 59, 0, false, this); }, 
            set: function(v) { return CS.Call(1, 59, 0, false, this, v); }
        },
        time: {
            get: function() { return CS.Call(0, 59, 1, false, this); }, 
            set: function(v) { return CS.Call(1, 59, 1, false, this, v); }
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 59, 0, true, this); },
        ctor$$Color$$Single: function(a0, a1) { CS.Call(5, 59, 1, true, this, a0, a1); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$GradientColorKey);

// UnityEngine.GradientAlphaKey
var UnityEngine$GradientAlphaKey = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.GradientAlphaKey",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    fields: {
        alpha: {
            get: function() { return CS.Call(0, 60, 0, false, this); }, 
            set: function(v) { return CS.Call(1, 60, 0, false, this, v); }
        },
        time: {
            get: function() { return CS.Call(0, 60, 1, false, this); }, 
            set: function(v) { return CS.Call(1, 60, 1, false, this, v); }
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 60, 0, true, this); },
        ctor$$Single$$Single: function(a0, a1) { CS.Call(5, 60, 1, true, this, a0, a1); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$GradientAlphaKey);

// UnityEngine.Gradient
var UnityEngine$Gradient = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Gradient",
    Kind: "Class",
    baseTypeName: "System.Object",
    definition: {
        ctor: function() { CS.Call(5, 61, 0, true, this); },
        get_colorKeys: function() { return CS.Call(2, 61, 0, false, this); },
        set_colorKeys: function(v) { return CS.Call(3, 61, 0, false, this, v); },
        get_alphaKeys: function() { return CS.Call(2, 61, 1, false, this); },
        set_alphaKeys: function(v) { return CS.Call(3, 61, 1, false, this, v); },
        Evaluate: function(a0/*Single*/) { 
            return CS.Call(4, 61, 0, false, this, a0); //Ret: Color
        },
        SetKeys: function(a0/*GradientColorKey[]*/, a1/*GradientAlphaKey[]*/) { 
            return CS.Call(4, 61, 1, false, this, a0, a1); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Gradient);

// UnityEngine.FlareLayer
var UnityEngine$FlareLayer = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.FlareLayer",
    Kind: "Class",
    baseTypeName: "UnityEngine.Behaviour",
};
jsb_ReplaceOrPushJsType(UnityEngine$FlareLayer);

// UnityEngine.LayerMask
var UnityEngine$LayerMask = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.LayerMask",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    staticDefinition: {
        GetMask: function(a0/*String[]*/) { 
            return CS.Call(4, 63, 0, true, jsb_formatParamsArray(0, a0, arguments)); //Ret: Int32
        },
        LayerToName: function(a0/*Int32*/) { 
            return CS.Call(4, 63, 1, true, a0); //Ret: String
        },
        NameToLayer: function(a0/*String*/) { 
            return CS.Call(4, 63, 2, true, a0); //Ret: Int32
        },
        op_Implicit$$Int32: function(a0/*Int32*/) { 
            return CS.Call(4, 63, 3, true, a0); //Ret: LayerMask
        },
        op_Implicit$$LayerMask: function(a0/*LayerMask*/) { 
            return CS.Call(4, 63, 4, true, a0); //Ret: Int32
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 63, 0, true, this); },
        get_value: function() { return CS.Call(2, 63, 0, false, this); },
        set_value: function(v) { return CS.Call(3, 63, 0, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$LayerMask);

// UnityEngine.LightProbeGroup
var UnityEngine$LightProbeGroup = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.LightProbeGroup",
    Kind: "Class",
    baseTypeName: "UnityEngine.Behaviour",
    definition: {
        ctor: function() { CS.Call(5, 64, 0, true, this); },
        get_probePositions: function() { return CS.Call(2, 64, 0, false, this); },
        set_probePositions: function(v) { return CS.Call(3, 64, 0, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$LightProbeGroup);

// UnityEngine.LightProbeProxyVolume
var UnityEngine$LightProbeProxyVolume = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.LightProbeProxyVolume",
    Kind: "Class",
    baseTypeName: "UnityEngine.Behaviour",
    staticDefinition: {
        get_isFeatureSupported: function() { return CS.Call(2, 65, 11, true); },
        set_isFeatureSupported: function(v) { return CS.Call(3, 65, 11, true, v); },
    },
    definition: {
        ctor: function() { CS.Call(5, 65, 0, true, this); },
        get_boundsGlobal: function() { return CS.Call(2, 65, 0, false, this); },
        set_boundsGlobal: function(v) { return CS.Call(3, 65, 0, false, this, v); },
        get_sizeCustom: function() { return CS.Call(2, 65, 1, false, this); },
        set_sizeCustom: function(v) { return CS.Call(3, 65, 1, false, this, v); },
        get_originCustom: function() { return CS.Call(2, 65, 2, false, this); },
        set_originCustom: function(v) { return CS.Call(3, 65, 2, false, this, v); },
        get_boundingBoxMode: function() { return CS.Call(2, 65, 3, false, this); },
        set_boundingBoxMode: function(v) { return CS.Call(3, 65, 3, false, this, v); },
        get_resolutionMode: function() { return CS.Call(2, 65, 4, false, this); },
        set_resolutionMode: function(v) { return CS.Call(3, 65, 4, false, this, v); },
        get_probePositionMode: function() { return CS.Call(2, 65, 5, false, this); },
        set_probePositionMode: function(v) { return CS.Call(3, 65, 5, false, this, v); },
        get_refreshMode: function() { return CS.Call(2, 65, 6, false, this); },
        set_refreshMode: function(v) { return CS.Call(3, 65, 6, false, this, v); },
        get_probeDensity: function() { return CS.Call(2, 65, 7, false, this); },
        set_probeDensity: function(v) { return CS.Call(3, 65, 7, false, this, v); },
        get_gridResolutionX: function() { return CS.Call(2, 65, 8, false, this); },
        set_gridResolutionX: function(v) { return CS.Call(3, 65, 8, false, this, v); },
        get_gridResolutionY: function() { return CS.Call(2, 65, 9, false, this); },
        set_gridResolutionY: function(v) { return CS.Call(3, 65, 9, false, this, v); },
        get_gridResolutionZ: function() { return CS.Call(2, 65, 10, false, this); },
        set_gridResolutionZ: function(v) { return CS.Call(3, 65, 10, false, this, v); },
        Update: function() { 
            return CS.Call(4, 65, 0, false, this); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$LightProbeProxyVolume);

// UnityEngine.Vector2
var UnityEngine$Vector2 = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Vector2",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    staticFields: {
        kEpsilon: {
            get: function() { return CS.Call(0, 66, 0, true); }, 
            set: function(v) { return CS.Call(1, 66, 0, true, v); }
        },
    },
    fields: {
        x: {
            get: function() { return CS.Call(0, 66, 1, false, this); }, 
            set: function(v) { return CS.Call(1, 66, 1, false, this, v); }
        },
        y: {
            get: function() { return CS.Call(0, 66, 2, false, this); }, 
            set: function(v) { return CS.Call(1, 66, 2, false, this, v); }
        },
    },
    staticDefinition: {
        get_zero: function() { return CS.Call(2, 66, 4, true); },
        set_zero: function(v) { return CS.Call(3, 66, 4, true, v); },
        get_one: function() { return CS.Call(2, 66, 5, true); },
        set_one: function(v) { return CS.Call(3, 66, 5, true, v); },
        get_up: function() { return CS.Call(2, 66, 6, true); },
        set_up: function(v) { return CS.Call(3, 66, 6, true, v); },
        get_down: function() { return CS.Call(2, 66, 7, true); },
        set_down: function(v) { return CS.Call(3, 66, 7, true, v); },
        get_left: function() { return CS.Call(2, 66, 8, true); },
        set_left: function(v) { return CS.Call(3, 66, 8, true, v); },
        get_right: function() { return CS.Call(2, 66, 9, true); },
        set_right: function(v) { return CS.Call(3, 66, 9, true, v); },
        Angle: function(a0/*Vector2*/, a1/*Vector2*/) { 
            return CS.Call(4, 66, 8, true, a0, a1); //Ret: Single
        },
        ClampMagnitude: function(a0/*Vector2*/, a1/*Single*/) { 
            return CS.Call(4, 66, 9, true, a0, a1); //Ret: Vector2
        },
        Distance: function(a0/*Vector2*/, a1/*Vector2*/) { 
            return CS.Call(4, 66, 10, true, a0, a1); //Ret: Single
        },
        Dot: function(a0/*Vector2*/, a1/*Vector2*/) { 
            return CS.Call(4, 66, 11, true, a0, a1); //Ret: Single
        },
        Lerp: function(a0/*Vector2*/, a1/*Vector2*/, a2/*Single*/) { 
            return CS.Call(4, 66, 12, true, a0, a1, a2); //Ret: Vector2
        },
        LerpUnclamped: function(a0/*Vector2*/, a1/*Vector2*/, a2/*Single*/) { 
            return CS.Call(4, 66, 13, true, a0, a1, a2); //Ret: Vector2
        },
        Max: function(a0/*Vector2*/, a1/*Vector2*/) { 
            return CS.Call(4, 66, 14, true, a0, a1); //Ret: Vector2
        },
        Min: function(a0/*Vector2*/, a1/*Vector2*/) { 
            return CS.Call(4, 66, 15, true, a0, a1); //Ret: Vector2
        },
        MoveTowards: function(a0/*Vector2*/, a1/*Vector2*/, a2/*Single*/) { 
            return CS.Call(4, 66, 16, true, a0, a1, a2); //Ret: Vector2
        },
        op_Addition: function(a0/*Vector2*/, a1/*Vector2*/) { 
            return CS.Call(4, 66, 17, true, a0, a1); //Ret: Vector2
        },
        op_Division: function(a0/*Vector2*/, a1/*Single*/) { 
            return CS.Call(4, 66, 18, true, a0, a1); //Ret: Vector2
        },
        op_Equality: function(a0/*Vector2*/, a1/*Vector2*/) { 
            return CS.Call(4, 66, 19, true, a0, a1); //Ret: Boolean
        },
        op_Implicit$$Vector3: function(a0/*Vector3*/) { 
            return CS.Call(4, 66, 20, true, a0); //Ret: Vector2
        },
        op_Implicit$$Vector2: function(a0/*Vector2*/) { 
            return CS.Call(4, 66, 21, true, a0); //Ret: Vector3
        },
        op_Inequality: function(a0/*Vector2*/, a1/*Vector2*/) { 
            return CS.Call(4, 66, 22, true, a0, a1); //Ret: Boolean
        },
        op_Multiply$$Vector2$$Single: function(a0/*Vector2*/, a1/*Single*/) { 
            return CS.Call(4, 66, 23, true, a0, a1); //Ret: Vector2
        },
        op_Multiply$$Single$$Vector2: function(a0/*Single*/, a1/*Vector2*/) { 
            return CS.Call(4, 66, 24, true, a0, a1); //Ret: Vector2
        },
        op_Subtraction: function(a0/*Vector2*/, a1/*Vector2*/) { 
            return CS.Call(4, 66, 25, true, a0, a1); //Ret: Vector2
        },
        op_UnaryNegation: function(a0/*Vector2*/) { 
            return CS.Call(4, 66, 26, true, a0); //Ret: Vector2
        },
        Reflect: function(a0/*Vector2*/, a1/*Vector2*/) { 
            return CS.Call(4, 66, 27, true, a0, a1); //Ret: Vector2
        },
        Scale$$Vector2$$Vector2: function(a0/*Vector2*/, a1/*Vector2*/) { 
            return CS.Call(4, 66, 28, true, a0, a1); //Ret: Vector2
        },
        SmoothDamp$$Vector2$$Vector2$$Vector2$$Single$$Single$$Single: function(a0/*Vector2*/, a1/*Vector2*/, a2/*Vector2&*/, a3/*Single*/, a4/*Single*/, a5/*Single*/) { 
            return CS.Call(4, 66, 29, true, a0, a1, a2, a3, a4, a5); //Ret: Vector2
        },
        SmoothDamp$$Vector2$$Vector2$$Vector2$$Single$$Single: function(a0/*Vector2*/, a1/*Vector2*/, a2/*Vector2&*/, a3/*Single*/, a4/*Single*/) { 
            return CS.Call(4, 66, 30, true, a0, a1, a2, a3, a4); //Ret: Vector2
        },
        SmoothDamp$$Vector2$$Vector2$$Vector2$$Single: function(a0/*Vector2*/, a1/*Vector2*/, a2/*Vector2&*/, a3/*Single*/) { 
            return CS.Call(4, 66, 31, true, a0, a1, a2, a3); //Ret: Vector2
        },
        SqrMagnitude$$Vector2: function(a0/*Vector2*/) { 
            return CS.Call(4, 66, 32, true, a0); //Ret: Single
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 66, 0, true, this); },
        ctor$$Single$$Single: function(a0, a1) { CS.Call(5, 66, 1, true, this, a0, a1); },
        get_Item$$Int32: function(ind0) { return CS.Call(2, 66, 0, false, this, ind0); },
        set_Item$$Int32: function(ind0, v) { return CS.Call(3, 66, 0, false, this, ind0, v); },
        get_normalized: function() { return CS.Call(2, 66, 1, false, this); },
        set_normalized: function(v) { return CS.Call(3, 66, 1, false, this, v); },
        get_magnitude: function() { return CS.Call(2, 66, 2, false, this); },
        set_magnitude: function(v) { return CS.Call(3, 66, 2, false, this, v); },
        get_sqrMagnitude: function() { return CS.Call(2, 66, 3, false, this); },
        set_sqrMagnitude: function(v) { return CS.Call(3, 66, 3, false, this, v); },
        Equals: function(a0/*Object*/) { 
            return CS.Call(4, 66, 0, false, this, a0); //Ret: Boolean
        },
        GetHashCode: function() { 
            return CS.Call(4, 66, 1, false, this); //Ret: Int32
        },
        Normalize: function() { 
            return CS.Call(4, 66, 2, false, this); //Ret: Void
        },
        Scale$$Vector2: function(a0/*Vector2*/) { 
            return CS.Call(4, 66, 3, false, this, a0); //Ret: Void
        },
        Set: function(a0/*Single*/, a1/*Single*/) { 
            return CS.Call(4, 66, 4, false, this, a0, a1); //Ret: Void
        },
        SqrMagnitude: function() { 
            return CS.Call(4, 66, 5, false, this); //Ret: Single
        },
        toString$$String: function(a0/*String*/) { 
            return CS.Call(4, 66, 6, false, this, a0); //Ret: String
        },
        toString: function() { 
            return CS.Call(4, 66, 7, false, this); //Ret: String
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Vector2);

// UnityEngine.Vector3
var UnityEngine$Vector3 = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Vector3",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    staticFields: {
        kEpsilon: {
            get: function() { return CS.Call(0, 67, 0, true); }, 
            set: function(v) { return CS.Call(1, 67, 0, true, v); }
        },
    },
    fields: {
        x: {
            get: function() { return CS.Call(0, 67, 1, false, this); }, 
            set: function(v) { return CS.Call(1, 67, 1, false, this, v); }
        },
        y: {
            get: function() { return CS.Call(0, 67, 2, false, this); }, 
            set: function(v) { return CS.Call(1, 67, 2, false, this, v); }
        },
        z: {
            get: function() { return CS.Call(0, 67, 3, false, this); }, 
            set: function(v) { return CS.Call(1, 67, 3, false, this, v); }
        },
    },
    staticDefinition: {
        get_zero: function() { return CS.Call(2, 67, 4, true); },
        set_zero: function(v) { return CS.Call(3, 67, 4, true, v); },
        get_one: function() { return CS.Call(2, 67, 5, true); },
        set_one: function(v) { return CS.Call(3, 67, 5, true, v); },
        get_forward: function() { return CS.Call(2, 67, 6, true); },
        set_forward: function(v) { return CS.Call(3, 67, 6, true, v); },
        get_back: function() { return CS.Call(2, 67, 7, true); },
        set_back: function(v) { return CS.Call(3, 67, 7, true, v); },
        get_up: function() { return CS.Call(2, 67, 8, true); },
        set_up: function(v) { return CS.Call(3, 67, 8, true, v); },
        get_down: function() { return CS.Call(2, 67, 9, true); },
        set_down: function(v) { return CS.Call(3, 67, 9, true, v); },
        get_left: function() { return CS.Call(2, 67, 10, true); },
        set_left: function(v) { return CS.Call(3, 67, 10, true, v); },
        get_right: function() { return CS.Call(2, 67, 11, true); },
        set_right: function(v) { return CS.Call(3, 67, 11, true, v); },
        Angle: function(a0/*Vector3*/, a1/*Vector3*/) { 
            return CS.Call(4, 67, 7, true, a0, a1); //Ret: Single
        },
        ClampMagnitude: function(a0/*Vector3*/, a1/*Single*/) { 
            return CS.Call(4, 67, 8, true, a0, a1); //Ret: Vector3
        },
        Cross: function(a0/*Vector3*/, a1/*Vector3*/) { 
            return CS.Call(4, 67, 9, true, a0, a1); //Ret: Vector3
        },
        Distance: function(a0/*Vector3*/, a1/*Vector3*/) { 
            return CS.Call(4, 67, 10, true, a0, a1); //Ret: Single
        },
        Dot: function(a0/*Vector3*/, a1/*Vector3*/) { 
            return CS.Call(4, 67, 11, true, a0, a1); //Ret: Single
        },
        Lerp: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Single*/) { 
            return CS.Call(4, 67, 12, true, a0, a1, a2); //Ret: Vector3
        },
        LerpUnclamped: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Single*/) { 
            return CS.Call(4, 67, 13, true, a0, a1, a2); //Ret: Vector3
        },
        Magnitude: function(a0/*Vector3*/) { 
            return CS.Call(4, 67, 14, true, a0); //Ret: Single
        },
        Max: function(a0/*Vector3*/, a1/*Vector3*/) { 
            return CS.Call(4, 67, 15, true, a0, a1); //Ret: Vector3
        },
        Min: function(a0/*Vector3*/, a1/*Vector3*/) { 
            return CS.Call(4, 67, 16, true, a0, a1); //Ret: Vector3
        },
        MoveTowards: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Single*/) { 
            return CS.Call(4, 67, 17, true, a0, a1, a2); //Ret: Vector3
        },
        Normalize$$Vector3: function(a0/*Vector3*/) { 
            return CS.Call(4, 67, 18, true, a0); //Ret: Vector3
        },
        op_Addition: function(a0/*Vector3*/, a1/*Vector3*/) { 
            return CS.Call(4, 67, 19, true, a0, a1); //Ret: Vector3
        },
        op_Division: function(a0/*Vector3*/, a1/*Single*/) { 
            return CS.Call(4, 67, 20, true, a0, a1); //Ret: Vector3
        },
        op_Equality: function(a0/*Vector3*/, a1/*Vector3*/) { 
            return CS.Call(4, 67, 21, true, a0, a1); //Ret: Boolean
        },
        op_Inequality: function(a0/*Vector3*/, a1/*Vector3*/) { 
            return CS.Call(4, 67, 22, true, a0, a1); //Ret: Boolean
        },
        op_Multiply$$Single$$Vector3: function(a0/*Single*/, a1/*Vector3*/) { 
            return CS.Call(4, 67, 23, true, a0, a1); //Ret: Vector3
        },
        op_Multiply$$Vector3$$Single: function(a0/*Vector3*/, a1/*Single*/) { 
            return CS.Call(4, 67, 24, true, a0, a1); //Ret: Vector3
        },
        op_Subtraction: function(a0/*Vector3*/, a1/*Vector3*/) { 
            return CS.Call(4, 67, 25, true, a0, a1); //Ret: Vector3
        },
        op_UnaryNegation: function(a0/*Vector3*/) { 
            return CS.Call(4, 67, 26, true, a0); //Ret: Vector3
        },
        OrthoNormalize$$Vector3$$Vector3$$Vector3: function(a0/*Vector3&*/, a1/*Vector3&*/, a2/*Vector3&*/) { 
            return CS.Call(4, 67, 27, true, a0, a1, a2); //Ret: Void
        },
        OrthoNormalize$$Vector3$$Vector3: function(a0/*Vector3&*/, a1/*Vector3&*/) { 
            return CS.Call(4, 67, 28, true, a0, a1); //Ret: Void
        },
        Project: function(a0/*Vector3*/, a1/*Vector3*/) { 
            return CS.Call(4, 67, 29, true, a0, a1); //Ret: Vector3
        },
        ProjectOnPlane: function(a0/*Vector3*/, a1/*Vector3*/) { 
            return CS.Call(4, 67, 30, true, a0, a1); //Ret: Vector3
        },
        Reflect: function(a0/*Vector3*/, a1/*Vector3*/) { 
            return CS.Call(4, 67, 31, true, a0, a1); //Ret: Vector3
        },
        RotateTowards: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Single*/, a3/*Single*/) { 
            return CS.Call(4, 67, 32, true, a0, a1, a2, a3); //Ret: Vector3
        },
        Scale$$Vector3$$Vector3: function(a0/*Vector3*/, a1/*Vector3*/) { 
            return CS.Call(4, 67, 33, true, a0, a1); //Ret: Vector3
        },
        Slerp: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Single*/) { 
            return CS.Call(4, 67, 34, true, a0, a1, a2); //Ret: Vector3
        },
        SlerpUnclamped: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Single*/) { 
            return CS.Call(4, 67, 35, true, a0, a1, a2); //Ret: Vector3
        },
        SmoothDamp$$Vector3$$Vector3$$Vector3$$Single$$Single$$Single: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Vector3&*/, a3/*Single*/, a4/*Single*/, a5/*Single*/) { 
            return CS.Call(4, 67, 36, true, a0, a1, a2, a3, a4, a5); //Ret: Vector3
        },
        SmoothDamp$$Vector3$$Vector3$$Vector3$$Single$$Single: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Vector3&*/, a3/*Single*/, a4/*Single*/) { 
            return CS.Call(4, 67, 37, true, a0, a1, a2, a3, a4); //Ret: Vector3
        },
        SmoothDamp$$Vector3$$Vector3$$Vector3$$Single: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Vector3&*/, a3/*Single*/) { 
            return CS.Call(4, 67, 38, true, a0, a1, a2, a3); //Ret: Vector3
        },
        SqrMagnitude: function(a0/*Vector3*/) { 
            return CS.Call(4, 67, 39, true, a0); //Ret: Single
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 67, 0, true, this); },
        ctor$$Single$$Single$$Single: function(a0, a1, a2) { CS.Call(5, 67, 1, true, this, a0, a1, a2); },
        ctor$$Single$$Single: function(a0, a1) { CS.Call(5, 67, 2, true, this, a0, a1); },
        get_Item$$Int32: function(ind0) { return CS.Call(2, 67, 0, false, this, ind0); },
        set_Item$$Int32: function(ind0, v) { return CS.Call(3, 67, 0, false, this, ind0, v); },
        get_normalized: function() { return CS.Call(2, 67, 1, false, this); },
        set_normalized: function(v) { return CS.Call(3, 67, 1, false, this, v); },
        get_magnitude: function() { return CS.Call(2, 67, 2, false, this); },
        set_magnitude: function(v) { return CS.Call(3, 67, 2, false, this, v); },
        get_sqrMagnitude: function() { return CS.Call(2, 67, 3, false, this); },
        set_sqrMagnitude: function(v) { return CS.Call(3, 67, 3, false, this, v); },
        Equals: function(a0/*Object*/) { 
            return CS.Call(4, 67, 0, false, this, a0); //Ret: Boolean
        },
        GetHashCode: function() { 
            return CS.Call(4, 67, 1, false, this); //Ret: Int32
        },
        Normalize: function() { 
            return CS.Call(4, 67, 2, false, this); //Ret: Void
        },
        Scale$$Vector3: function(a0/*Vector3*/) { 
            return CS.Call(4, 67, 3, false, this, a0); //Ret: Void
        },
        Set: function(a0/*Single*/, a1/*Single*/, a2/*Single*/) { 
            return CS.Call(4, 67, 4, false, this, a0, a1, a2); //Ret: Void
        },
        toString$$String: function(a0/*String*/) { 
            return CS.Call(4, 67, 5, false, this, a0); //Ret: String
        },
        toString: function() { 
            return CS.Call(4, 67, 6, false, this); //Ret: String
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Vector3);

// UnityEngine.Color32
var UnityEngine$Color32 = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Color32",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    fields: {
        r: {
            get: function() { return CS.Call(0, 68, 0, false, this); }, 
            set: function(v) { return CS.Call(1, 68, 0, false, this, v); }
        },
        g: {
            get: function() { return CS.Call(0, 68, 1, false, this); }, 
            set: function(v) { return CS.Call(1, 68, 1, false, this, v); }
        },
        b: {
            get: function() { return CS.Call(0, 68, 2, false, this); }, 
            set: function(v) { return CS.Call(1, 68, 2, false, this, v); }
        },
        a: {
            get: function() { return CS.Call(0, 68, 3, false, this); }, 
            set: function(v) { return CS.Call(1, 68, 3, false, this, v); }
        },
    },
    staticDefinition: {
        Lerp: function(a0/*Color32*/, a1/*Color32*/, a2/*Single*/) { 
            return CS.Call(4, 68, 2, true, a0, a1, a2); //Ret: Color32
        },
        LerpUnclamped: function(a0/*Color32*/, a1/*Color32*/, a2/*Single*/) { 
            return CS.Call(4, 68, 3, true, a0, a1, a2); //Ret: Color32
        },
        op_Implicit$$Color32: function(a0/*Color32*/) { 
            return CS.Call(4, 68, 4, true, a0); //Ret: Color
        },
        op_Implicit$$Color: function(a0/*Color*/) { 
            return CS.Call(4, 68, 5, true, a0); //Ret: Color32
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 68, 0, true, this); },
        ctor$$Byte$$Byte$$Byte$$Byte: function(a0, a1, a2, a3) { CS.Call(5, 68, 1, true, this, a0, a1, a2, a3); },
        toString$$String: function(a0/*String*/) { 
            return CS.Call(4, 68, 0, false, this, a0); //Ret: String
        },
        toString: function() { 
            return CS.Call(4, 68, 1, false, this); //Ret: String
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Color32);

// UnityEngine.Quaternion
var UnityEngine$Quaternion = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Quaternion",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    staticFields: {
        kEpsilon: {
            get: function() { return CS.Call(0, 69, 0, true); }, 
            set: function(v) { return CS.Call(1, 69, 0, true, v); }
        },
    },
    fields: {
        x: {
            get: function() { return CS.Call(0, 69, 1, false, this); }, 
            set: function(v) { return CS.Call(1, 69, 1, false, this, v); }
        },
        y: {
            get: function() { return CS.Call(0, 69, 2, false, this); }, 
            set: function(v) { return CS.Call(1, 69, 2, false, this, v); }
        },
        z: {
            get: function() { return CS.Call(0, 69, 3, false, this); }, 
            set: function(v) { return CS.Call(1, 69, 3, false, this, v); }
        },
        w: {
            get: function() { return CS.Call(0, 69, 4, false, this); }, 
            set: function(v) { return CS.Call(1, 69, 4, false, this, v); }
        },
    },
    staticDefinition: {
        get_identity: function() { return CS.Call(2, 69, 1, true); },
        set_identity: function(v) { return CS.Call(3, 69, 1, true, v); },
        Angle: function(a0/*Quaternion*/, a1/*Quaternion*/) { 
            return CS.Call(4, 69, 9, true, a0, a1); //Ret: Single
        },
        AngleAxis: function(a0/*Single*/, a1/*Vector3*/) { 
            return CS.Call(4, 69, 10, true, a0, a1); //Ret: Quaternion
        },
        Dot: function(a0/*Quaternion*/, a1/*Quaternion*/) { 
            return CS.Call(4, 69, 11, true, a0, a1); //Ret: Single
        },
        Euler$$Single$$Single$$Single: function(a0/*Single*/, a1/*Single*/, a2/*Single*/) { 
            return CS.Call(4, 69, 12, true, a0, a1, a2); //Ret: Quaternion
        },
        Euler$$Vector3: function(a0/*Vector3*/) { 
            return CS.Call(4, 69, 13, true, a0); //Ret: Quaternion
        },
        FromToRotation: function(a0/*Vector3*/, a1/*Vector3*/) { 
            return CS.Call(4, 69, 14, true, a0, a1); //Ret: Quaternion
        },
        Inverse: function(a0/*Quaternion*/) { 
            return CS.Call(4, 69, 15, true, a0); //Ret: Quaternion
        },
        Lerp: function(a0/*Quaternion*/, a1/*Quaternion*/, a2/*Single*/) { 
            return CS.Call(4, 69, 16, true, a0, a1, a2); //Ret: Quaternion
        },
        LerpUnclamped: function(a0/*Quaternion*/, a1/*Quaternion*/, a2/*Single*/) { 
            return CS.Call(4, 69, 17, true, a0, a1, a2); //Ret: Quaternion
        },
        LookRotation$$Vector3$$Vector3: function(a0/*Vector3*/, a1/*Vector3*/) { 
            return CS.Call(4, 69, 18, true, a0, a1); //Ret: Quaternion
        },
        LookRotation$$Vector3: function(a0/*Vector3*/) { 
            return CS.Call(4, 69, 19, true, a0); //Ret: Quaternion
        },
        op_Equality: function(a0/*Quaternion*/, a1/*Quaternion*/) { 
            return CS.Call(4, 69, 20, true, a0, a1); //Ret: Boolean
        },
        op_Inequality: function(a0/*Quaternion*/, a1/*Quaternion*/) { 
            return CS.Call(4, 69, 21, true, a0, a1); //Ret: Boolean
        },
        op_Multiply$$Quaternion$$Vector3: function(a0/*Quaternion*/, a1/*Vector3*/) { 
            return CS.Call(4, 69, 22, true, a0, a1); //Ret: Vector3
        },
        op_Multiply$$Quaternion$$Quaternion: function(a0/*Quaternion*/, a1/*Quaternion*/) { 
            return CS.Call(4, 69, 23, true, a0, a1); //Ret: Quaternion
        },
        RotateTowards: function(a0/*Quaternion*/, a1/*Quaternion*/, a2/*Single*/) { 
            return CS.Call(4, 69, 24, true, a0, a1, a2); //Ret: Quaternion
        },
        Slerp: function(a0/*Quaternion*/, a1/*Quaternion*/, a2/*Single*/) { 
            return CS.Call(4, 69, 25, true, a0, a1, a2); //Ret: Quaternion
        },
        SlerpUnclamped: function(a0/*Quaternion*/, a1/*Quaternion*/, a2/*Single*/) { 
            return CS.Call(4, 69, 26, true, a0, a1, a2); //Ret: Quaternion
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 69, 0, true, this); },
        ctor$$Single$$Single$$Single$$Single: function(a0, a1, a2, a3) { CS.Call(5, 69, 1, true, this, a0, a1, a2, a3); },
        get_Item$$Int32: function(ind0) { return CS.Call(2, 69, 0, false, this, ind0); },
        set_Item$$Int32: function(ind0, v) { return CS.Call(3, 69, 0, false, this, ind0, v); },
        get_eulerAngles: function() { return CS.Call(2, 69, 2, false, this); },
        set_eulerAngles: function(v) { return CS.Call(3, 69, 2, false, this, v); },
        Equals: function(a0/*Object*/) { 
            return CS.Call(4, 69, 0, false, this, a0); //Ret: Boolean
        },
        GetHashCode: function() { 
            return CS.Call(4, 69, 1, false, this); //Ret: Int32
        },
        Set: function(a0/*Single*/, a1/*Single*/, a2/*Single*/, a3/*Single*/) { 
            return CS.Call(4, 69, 2, false, this, a0, a1, a2, a3); //Ret: Void
        },
        SetFromToRotation: function(a0/*Vector3*/, a1/*Vector3*/) { 
            return CS.Call(4, 69, 3, false, this, a0, a1); //Ret: Void
        },
        SetLookRotation$$Vector3$$Vector3: function(a0/*Vector3*/, a1/*Vector3*/) { 
            return CS.Call(4, 69, 4, false, this, a0, a1); //Ret: Void
        },
        SetLookRotation$$Vector3: function(a0/*Vector3*/) { 
            return CS.Call(4, 69, 5, false, this, a0); //Ret: Void
        },
        ToAngleAxis: function(a0/*Single&*/, a1/*Vector3&*/) { 
            return CS.Call(4, 69, 6, false, this, a0, a1); //Ret: Void
        },
        toString$$String: function(a0/*String*/) { 
            return CS.Call(4, 69, 7, false, this, a0); //Ret: String
        },
        toString: function() { 
            return CS.Call(4, 69, 8, false, this); //Ret: String
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Quaternion);

// UnityEngine.Rect
var UnityEngine$Rect = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Rect",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    staticDefinition: {
        MinMaxRect: function(a0/*Single*/, a1/*Single*/, a2/*Single*/, a3/*Single*/) { 
            return CS.Call(4, 70, 10, true, a0, a1, a2, a3); //Ret: Rect
        },
        NormalizedToPoint: function(a0/*Rect*/, a1/*Vector2*/) { 
            return CS.Call(4, 70, 11, true, a0, a1); //Ret: Vector2
        },
        op_Equality: function(a0/*Rect*/, a1/*Rect*/) { 
            return CS.Call(4, 70, 12, true, a0, a1); //Ret: Boolean
        },
        op_Inequality: function(a0/*Rect*/, a1/*Rect*/) { 
            return CS.Call(4, 70, 13, true, a0, a1); //Ret: Boolean
        },
        PointToNormalized: function(a0/*Rect*/, a1/*Vector2*/) { 
            return CS.Call(4, 70, 14, true, a0, a1); //Ret: Vector2
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 70, 0, true, this); },
        ctor$$Single$$Single$$Single$$Single: function(a0, a1, a2, a3) { CS.Call(5, 70, 1, true, this, a0, a1, a2, a3); },
        ctor$$Vector2$$Vector2: function(a0, a1) { CS.Call(5, 70, 2, true, this, a0, a1); },
        ctor$$Rect: function(a0) { CS.Call(5, 70, 3, true, this, a0); },
        get_x: function() { return CS.Call(2, 70, 0, false, this); },
        set_x: function(v) { return CS.Call(3, 70, 0, false, this, v); },
        get_y: function() { return CS.Call(2, 70, 1, false, this); },
        set_y: function(v) { return CS.Call(3, 70, 1, false, this, v); },
        get_position: function() { return CS.Call(2, 70, 2, false, this); },
        set_position: function(v) { return CS.Call(3, 70, 2, false, this, v); },
        get_center: function() { return CS.Call(2, 70, 3, false, this); },
        set_center: function(v) { return CS.Call(3, 70, 3, false, this, v); },
        get_min: function() { return CS.Call(2, 70, 4, false, this); },
        set_min: function(v) { return CS.Call(3, 70, 4, false, this, v); },
        get_max: function() { return CS.Call(2, 70, 5, false, this); },
        set_max: function(v) { return CS.Call(3, 70, 5, false, this, v); },
        get_width: function() { return CS.Call(2, 70, 6, false, this); },
        set_width: function(v) { return CS.Call(3, 70, 6, false, this, v); },
        get_height: function() { return CS.Call(2, 70, 7, false, this); },
        set_height: function(v) { return CS.Call(3, 70, 7, false, this, v); },
        get_size: function() { return CS.Call(2, 70, 8, false, this); },
        set_size: function(v) { return CS.Call(3, 70, 8, false, this, v); },
        get_xMin: function() { return CS.Call(2, 70, 9, false, this); },
        set_xMin: function(v) { return CS.Call(3, 70, 9, false, this, v); },
        get_yMin: function() { return CS.Call(2, 70, 10, false, this); },
        set_yMin: function(v) { return CS.Call(3, 70, 10, false, this, v); },
        get_xMax: function() { return CS.Call(2, 70, 11, false, this); },
        set_xMax: function(v) { return CS.Call(3, 70, 11, false, this, v); },
        get_yMax: function() { return CS.Call(2, 70, 12, false, this); },
        set_yMax: function(v) { return CS.Call(3, 70, 12, false, this, v); },
        Contains$$Vector3$$Boolean: function(a0/*Vector3*/, a1/*Boolean*/) { 
            return CS.Call(4, 70, 0, false, this, a0, a1); //Ret: Boolean
        },
        Contains$$Vector2: function(a0/*Vector2*/) { 
            return CS.Call(4, 70, 1, false, this, a0); //Ret: Boolean
        },
        Contains$$Vector3: function(a0/*Vector3*/) { 
            return CS.Call(4, 70, 2, false, this, a0); //Ret: Boolean
        },
        Equals: function(a0/*Object*/) { 
            return CS.Call(4, 70, 3, false, this, a0); //Ret: Boolean
        },
        GetHashCode: function() { 
            return CS.Call(4, 70, 4, false, this); //Ret: Int32
        },
        Overlaps$$Rect$$Boolean: function(a0/*Rect*/, a1/*Boolean*/) { 
            return CS.Call(4, 70, 5, false, this, a0, a1); //Ret: Boolean
        },
        Overlaps$$Rect: function(a0/*Rect*/) { 
            return CS.Call(4, 70, 6, false, this, a0); //Ret: Boolean
        },
        Set: function(a0/*Single*/, a1/*Single*/, a2/*Single*/, a3/*Single*/) { 
            return CS.Call(4, 70, 7, false, this, a0, a1, a2, a3); //Ret: Void
        },
        toString$$String: function(a0/*String*/) { 
            return CS.Call(4, 70, 8, false, this, a0); //Ret: String
        },
        toString: function() { 
            return CS.Call(4, 70, 9, false, this); //Ret: String
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Rect);

// UnityEngine.Matrix4x4
var UnityEngine$Matrix4x4 = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Matrix4x4",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    fields: {
        m00: {
            get: function() { return CS.Call(0, 71, 0, false, this); }, 
            set: function(v) { return CS.Call(1, 71, 0, false, this, v); }
        },
        m10: {
            get: function() { return CS.Call(0, 71, 1, false, this); }, 
            set: function(v) { return CS.Call(1, 71, 1, false, this, v); }
        },
        m20: {
            get: function() { return CS.Call(0, 71, 2, false, this); }, 
            set: function(v) { return CS.Call(1, 71, 2, false, this, v); }
        },
        m30: {
            get: function() { return CS.Call(0, 71, 3, false, this); }, 
            set: function(v) { return CS.Call(1, 71, 3, false, this, v); }
        },
        m01: {
            get: function() { return CS.Call(0, 71, 4, false, this); }, 
            set: function(v) { return CS.Call(1, 71, 4, false, this, v); }
        },
        m11: {
            get: function() { return CS.Call(0, 71, 5, false, this); }, 
            set: function(v) { return CS.Call(1, 71, 5, false, this, v); }
        },
        m21: {
            get: function() { return CS.Call(0, 71, 6, false, this); }, 
            set: function(v) { return CS.Call(1, 71, 6, false, this, v); }
        },
        m31: {
            get: function() { return CS.Call(0, 71, 7, false, this); }, 
            set: function(v) { return CS.Call(1, 71, 7, false, this, v); }
        },
        m02: {
            get: function() { return CS.Call(0, 71, 8, false, this); }, 
            set: function(v) { return CS.Call(1, 71, 8, false, this, v); }
        },
        m12: {
            get: function() { return CS.Call(0, 71, 9, false, this); }, 
            set: function(v) { return CS.Call(1, 71, 9, false, this, v); }
        },
        m22: {
            get: function() { return CS.Call(0, 71, 10, false, this); }, 
            set: function(v) { return CS.Call(1, 71, 10, false, this, v); }
        },
        m32: {
            get: function() { return CS.Call(0, 71, 11, false, this); }, 
            set: function(v) { return CS.Call(1, 71, 11, false, this, v); }
        },
        m03: {
            get: function() { return CS.Call(0, 71, 12, false, this); }, 
            set: function(v) { return CS.Call(1, 71, 12, false, this, v); }
        },
        m13: {
            get: function() { return CS.Call(0, 71, 13, false, this); }, 
            set: function(v) { return CS.Call(1, 71, 13, false, this, v); }
        },
        m23: {
            get: function() { return CS.Call(0, 71, 14, false, this); }, 
            set: function(v) { return CS.Call(1, 71, 14, false, this, v); }
        },
        m33: {
            get: function() { return CS.Call(0, 71, 15, false, this); }, 
            set: function(v) { return CS.Call(1, 71, 15, false, this, v); }
        },
    },
    staticDefinition: {
        get_zero: function() { return CS.Call(2, 71, 6, true); },
        set_zero: function(v) { return CS.Call(3, 71, 6, true, v); },
        get_identity: function() { return CS.Call(2, 71, 7, true); },
        set_identity: function(v) { return CS.Call(3, 71, 7, true, v); },
        Determinant: function(a0/*Matrix4x4*/) { 
            return CS.Call(4, 71, 12, true, a0); //Ret: Single
        },
        Inverse: function(a0/*Matrix4x4*/) { 
            return CS.Call(4, 71, 13, true, a0); //Ret: Matrix4x4
        },
        op_Equality: function(a0/*Matrix4x4*/, a1/*Matrix4x4*/) { 
            return CS.Call(4, 71, 14, true, a0, a1); //Ret: Boolean
        },
        op_Inequality: function(a0/*Matrix4x4*/, a1/*Matrix4x4*/) { 
            return CS.Call(4, 71, 15, true, a0, a1); //Ret: Boolean
        },
        op_Multiply$$Matrix4x4$$Matrix4x4: function(a0/*Matrix4x4*/, a1/*Matrix4x4*/) { 
            return CS.Call(4, 71, 16, true, a0, a1); //Ret: Matrix4x4
        },
        op_Multiply$$Matrix4x4$$Vector4: function(a0/*Matrix4x4*/, a1/*Vector4*/) { 
            return CS.Call(4, 71, 17, true, a0, a1); //Ret: Vector4
        },
        Ortho: function(a0/*Single*/, a1/*Single*/, a2/*Single*/, a3/*Single*/, a4/*Single*/, a5/*Single*/) { 
            return CS.Call(4, 71, 18, true, a0, a1, a2, a3, a4, a5); //Ret: Matrix4x4
        },
        Perspective: function(a0/*Single*/, a1/*Single*/, a2/*Single*/, a3/*Single*/) { 
            return CS.Call(4, 71, 19, true, a0, a1, a2, a3); //Ret: Matrix4x4
        },
        Scale: function(a0/*Vector3*/) { 
            return CS.Call(4, 71, 20, true, a0); //Ret: Matrix4x4
        },
        Transpose: function(a0/*Matrix4x4*/) { 
            return CS.Call(4, 71, 21, true, a0); //Ret: Matrix4x4
        },
        TRS: function(a0/*Vector3*/, a1/*Quaternion*/, a2/*Vector3*/) { 
            return CS.Call(4, 71, 22, true, a0, a1, a2); //Ret: Matrix4x4
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 71, 0, true, this); },
        get_Item$$Int32$$Int32: function(ind0, ind1) { return CS.Call(2, 71, 0, false, this, ind0, ind1); },
        set_Item$$Int32$$Int32: function(ind0, ind1, v) { return CS.Call(3, 71, 0, false, this, ind0, ind1, v); },
        get_Item$$Int32: function(ind0) { return CS.Call(2, 71, 1, false, this, ind0); },
        set_Item$$Int32: function(ind0, v) { return CS.Call(3, 71, 1, false, this, ind0, v); },
        get_inverse: function() { return CS.Call(2, 71, 2, false, this); },
        set_inverse: function(v) { return CS.Call(3, 71, 2, false, this, v); },
        get_transpose: function() { return CS.Call(2, 71, 3, false, this); },
        set_transpose: function(v) { return CS.Call(3, 71, 3, false, this, v); },
        get_isIdentity: function() { return CS.Call(2, 71, 4, false, this); },
        set_isIdentity: function(v) { return CS.Call(3, 71, 4, false, this, v); },
        get_determinant: function() { return CS.Call(2, 71, 5, false, this); },
        set_determinant: function(v) { return CS.Call(3, 71, 5, false, this, v); },
        Equals: function(a0/*Object*/) { 
            return CS.Call(4, 71, 0, false, this, a0); //Ret: Boolean
        },
        GetColumn: function(a0/*Int32*/) { 
            return CS.Call(4, 71, 1, false, this, a0); //Ret: Vector4
        },
        GetHashCode: function() { 
            return CS.Call(4, 71, 2, false, this); //Ret: Int32
        },
        GetRow: function(a0/*Int32*/) { 
            return CS.Call(4, 71, 3, false, this, a0); //Ret: Vector4
        },
        MultiplyPoint: function(a0/*Vector3*/) { 
            return CS.Call(4, 71, 4, false, this, a0); //Ret: Vector3
        },
        MultiplyPoint3x4: function(a0/*Vector3*/) { 
            return CS.Call(4, 71, 5, false, this, a0); //Ret: Vector3
        },
        MultiplyVector: function(a0/*Vector3*/) { 
            return CS.Call(4, 71, 6, false, this, a0); //Ret: Vector3
        },
        SetColumn: function(a0/*Int32*/, a1/*Vector4*/) { 
            return CS.Call(4, 71, 7, false, this, a0, a1); //Ret: Void
        },
        SetRow: function(a0/*Int32*/, a1/*Vector4*/) { 
            return CS.Call(4, 71, 8, false, this, a0, a1); //Ret: Void
        },
        SetTRS: function(a0/*Vector3*/, a1/*Quaternion*/, a2/*Vector3*/) { 
            return CS.Call(4, 71, 9, false, this, a0, a1, a2); //Ret: Void
        },
        toString$$String: function(a0/*String*/) { 
            return CS.Call(4, 71, 10, false, this, a0); //Ret: String
        },
        toString: function() { 
            return CS.Call(4, 71, 11, false, this); //Ret: String
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Matrix4x4);

// UnityEngine.Bounds
var UnityEngine$Bounds = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Bounds",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    staticDefinition: {
        op_Equality: function(a0/*Bounds*/, a1/*Bounds*/) { 
            return CS.Call(4, 72, 15, true, a0, a1); //Ret: Boolean
        },
        op_Inequality: function(a0/*Bounds*/, a1/*Bounds*/) { 
            return CS.Call(4, 72, 16, true, a0, a1); //Ret: Boolean
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 72, 0, true, this); },
        ctor$$Vector3$$Vector3: function(a0, a1) { CS.Call(5, 72, 1, true, this, a0, a1); },
        get_center: function() { return CS.Call(2, 72, 0, false, this); },
        set_center: function(v) { return CS.Call(3, 72, 0, false, this, v); },
        get_size: function() { return CS.Call(2, 72, 1, false, this); },
        set_size: function(v) { return CS.Call(3, 72, 1, false, this, v); },
        get_extents: function() { return CS.Call(2, 72, 2, false, this); },
        set_extents: function(v) { return CS.Call(3, 72, 2, false, this, v); },
        get_min: function() { return CS.Call(2, 72, 3, false, this); },
        set_min: function(v) { return CS.Call(3, 72, 3, false, this, v); },
        get_max: function() { return CS.Call(2, 72, 4, false, this); },
        set_max: function(v) { return CS.Call(3, 72, 4, false, this, v); },
        ClosestPoint: function(a0/*Vector3*/) { 
            return CS.Call(4, 72, 0, false, this, a0); //Ret: Vector3
        },
        Contains: function(a0/*Vector3*/) { 
            return CS.Call(4, 72, 1, false, this, a0); //Ret: Boolean
        },
        Encapsulate$$Bounds: function(a0/*Bounds*/) { 
            return CS.Call(4, 72, 2, false, this, a0); //Ret: Void
        },
        Encapsulate$$Vector3: function(a0/*Vector3*/) { 
            return CS.Call(4, 72, 3, false, this, a0); //Ret: Void
        },
        Equals: function(a0/*Object*/) { 
            return CS.Call(4, 72, 4, false, this, a0); //Ret: Boolean
        },
        Expand$$Vector3: function(a0/*Vector3*/) { 
            return CS.Call(4, 72, 5, false, this, a0); //Ret: Void
        },
        Expand$$Single: function(a0/*Single*/) { 
            return CS.Call(4, 72, 6, false, this, a0); //Ret: Void
        },
        GetHashCode: function() { 
            return CS.Call(4, 72, 7, false, this); //Ret: Int32
        },
        IntersectRay$$Ray$$Single: function(a0/*Ray*/, a1/*Single&*/) { 
            return CS.Call(4, 72, 8, false, this, a0, a1); //Ret: Boolean
        },
        IntersectRay$$Ray: function(a0/*Ray*/) { 
            return CS.Call(4, 72, 9, false, this, a0); //Ret: Boolean
        },
        Intersects: function(a0/*Bounds*/) { 
            return CS.Call(4, 72, 10, false, this, a0); //Ret: Boolean
        },
        SetMinMax: function(a0/*Vector3*/, a1/*Vector3*/) { 
            return CS.Call(4, 72, 11, false, this, a0, a1); //Ret: Void
        },
        SqrDistance: function(a0/*Vector3*/) { 
            return CS.Call(4, 72, 12, false, this, a0); //Ret: Single
        },
        toString$$String: function(a0/*String*/) { 
            return CS.Call(4, 72, 13, false, this, a0); //Ret: String
        },
        toString: function() { 
            return CS.Call(4, 72, 14, false, this); //Ret: String
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Bounds);

// UnityEngine.Vector4
var UnityEngine$Vector4 = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Vector4",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    staticFields: {
        kEpsilon: {
            get: function() { return CS.Call(0, 73, 0, true); }, 
            set: function(v) { return CS.Call(1, 73, 0, true, v); }
        },
    },
    fields: {
        x: {
            get: function() { return CS.Call(0, 73, 1, false, this); }, 
            set: function(v) { return CS.Call(1, 73, 1, false, this, v); }
        },
        y: {
            get: function() { return CS.Call(0, 73, 2, false, this); }, 
            set: function(v) { return CS.Call(1, 73, 2, false, this, v); }
        },
        z: {
            get: function() { return CS.Call(0, 73, 3, false, this); }, 
            set: function(v) { return CS.Call(1, 73, 3, false, this, v); }
        },
        w: {
            get: function() { return CS.Call(0, 73, 4, false, this); }, 
            set: function(v) { return CS.Call(1, 73, 4, false, this, v); }
        },
    },
    staticDefinition: {
        get_zero: function() { return CS.Call(2, 73, 4, true); },
        set_zero: function(v) { return CS.Call(3, 73, 4, true, v); },
        get_one: function() { return CS.Call(2, 73, 5, true); },
        set_one: function(v) { return CS.Call(3, 73, 5, true, v); },
        Distance: function(a0/*Vector4*/, a1/*Vector4*/) { 
            return CS.Call(4, 73, 8, true, a0, a1); //Ret: Single
        },
        Dot: function(a0/*Vector4*/, a1/*Vector4*/) { 
            return CS.Call(4, 73, 9, true, a0, a1); //Ret: Single
        },
        Lerp: function(a0/*Vector4*/, a1/*Vector4*/, a2/*Single*/) { 
            return CS.Call(4, 73, 10, true, a0, a1, a2); //Ret: Vector4
        },
        LerpUnclamped: function(a0/*Vector4*/, a1/*Vector4*/, a2/*Single*/) { 
            return CS.Call(4, 73, 11, true, a0, a1, a2); //Ret: Vector4
        },
        Magnitude: function(a0/*Vector4*/) { 
            return CS.Call(4, 73, 12, true, a0); //Ret: Single
        },
        Max: function(a0/*Vector4*/, a1/*Vector4*/) { 
            return CS.Call(4, 73, 13, true, a0, a1); //Ret: Vector4
        },
        Min: function(a0/*Vector4*/, a1/*Vector4*/) { 
            return CS.Call(4, 73, 14, true, a0, a1); //Ret: Vector4
        },
        MoveTowards: function(a0/*Vector4*/, a1/*Vector4*/, a2/*Single*/) { 
            return CS.Call(4, 73, 15, true, a0, a1, a2); //Ret: Vector4
        },
        Normalize$$Vector4: function(a0/*Vector4*/) { 
            return CS.Call(4, 73, 16, true, a0); //Ret: Vector4
        },
        op_Addition: function(a0/*Vector4*/, a1/*Vector4*/) { 
            return CS.Call(4, 73, 17, true, a0, a1); //Ret: Vector4
        },
        op_Division: function(a0/*Vector4*/, a1/*Single*/) { 
            return CS.Call(4, 73, 18, true, a0, a1); //Ret: Vector4
        },
        op_Equality: function(a0/*Vector4*/, a1/*Vector4*/) { 
            return CS.Call(4, 73, 19, true, a0, a1); //Ret: Boolean
        },
        op_Implicit$$Vector3: function(a0/*Vector3*/) { 
            return CS.Call(4, 73, 20, true, a0); //Ret: Vector4
        },
        op_Implicit$$Vector4: function(a0/*Vector4*/) { 
            return CS.Call(4, 73, 21, true, a0); //Ret: Vector3
        },
        op_Implicit$$Vector2: function(a0/*Vector2*/) { 
            return CS.Call(4, 73, 22, true, a0); //Ret: Vector4
        },
        op_Implicit$$Vector4: function(a0/*Vector4*/) { 
            return CS.Call(4, 73, 23, true, a0); //Ret: Vector2
        },
        op_Inequality: function(a0/*Vector4*/, a1/*Vector4*/) { 
            return CS.Call(4, 73, 24, true, a0, a1); //Ret: Boolean
        },
        op_Multiply$$Vector4$$Single: function(a0/*Vector4*/, a1/*Single*/) { 
            return CS.Call(4, 73, 25, true, a0, a1); //Ret: Vector4
        },
        op_Multiply$$Single$$Vector4: function(a0/*Single*/, a1/*Vector4*/) { 
            return CS.Call(4, 73, 26, true, a0, a1); //Ret: Vector4
        },
        op_Subtraction: function(a0/*Vector4*/, a1/*Vector4*/) { 
            return CS.Call(4, 73, 27, true, a0, a1); //Ret: Vector4
        },
        op_UnaryNegation: function(a0/*Vector4*/) { 
            return CS.Call(4, 73, 28, true, a0); //Ret: Vector4
        },
        Project: function(a0/*Vector4*/, a1/*Vector4*/) { 
            return CS.Call(4, 73, 29, true, a0, a1); //Ret: Vector4
        },
        Scale$$Vector4$$Vector4: function(a0/*Vector4*/, a1/*Vector4*/) { 
            return CS.Call(4, 73, 30, true, a0, a1); //Ret: Vector4
        },
        SqrMagnitude$$Vector4: function(a0/*Vector4*/) { 
            return CS.Call(4, 73, 31, true, a0); //Ret: Single
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 73, 0, true, this); },
        ctor$$Single$$Single$$Single$$Single: function(a0, a1, a2, a3) { CS.Call(5, 73, 1, true, this, a0, a1, a2, a3); },
        ctor$$Single$$Single$$Single: function(a0, a1, a2) { CS.Call(5, 73, 2, true, this, a0, a1, a2); },
        ctor$$Single$$Single: function(a0, a1) { CS.Call(5, 73, 3, true, this, a0, a1); },
        get_Item$$Int32: function(ind0) { return CS.Call(2, 73, 0, false, this, ind0); },
        set_Item$$Int32: function(ind0, v) { return CS.Call(3, 73, 0, false, this, ind0, v); },
        get_normalized: function() { return CS.Call(2, 73, 1, false, this); },
        set_normalized: function(v) { return CS.Call(3, 73, 1, false, this, v); },
        get_magnitude: function() { return CS.Call(2, 73, 2, false, this); },
        set_magnitude: function(v) { return CS.Call(3, 73, 2, false, this, v); },
        get_sqrMagnitude: function() { return CS.Call(2, 73, 3, false, this); },
        set_sqrMagnitude: function(v) { return CS.Call(3, 73, 3, false, this, v); },
        Equals: function(a0/*Object*/) { 
            return CS.Call(4, 73, 0, false, this, a0); //Ret: Boolean
        },
        GetHashCode: function() { 
            return CS.Call(4, 73, 1, false, this); //Ret: Int32
        },
        Normalize: function() { 
            return CS.Call(4, 73, 2, false, this); //Ret: Void
        },
        Scale$$Vector4: function(a0/*Vector4*/) { 
            return CS.Call(4, 73, 3, false, this, a0); //Ret: Void
        },
        Set: function(a0/*Single*/, a1/*Single*/, a2/*Single*/, a3/*Single*/) { 
            return CS.Call(4, 73, 4, false, this, a0, a1, a2, a3); //Ret: Void
        },
        SqrMagnitude: function() { 
            return CS.Call(4, 73, 5, false, this); //Ret: Single
        },
        toString$$String: function(a0/*String*/) { 
            return CS.Call(4, 73, 6, false, this, a0); //Ret: String
        },
        toString: function() { 
            return CS.Call(4, 73, 7, false, this); //Ret: String
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Vector4);

// UnityEngine.Ray
var UnityEngine$Ray = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Ray",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    definition: {
        ctor: function() { CS.Call(5, 74, 0, true, this); },
        ctor$$Vector3$$Vector3: function(a0, a1) { CS.Call(5, 74, 1, true, this, a0, a1); },
        get_origin: function() { return CS.Call(2, 74, 0, false, this); },
        set_origin: function(v) { return CS.Call(3, 74, 0, false, this, v); },
        get_direction: function() { return CS.Call(2, 74, 1, false, this); },
        set_direction: function(v) { return CS.Call(3, 74, 1, false, this, v); },
        GetPoint: function(a0/*Single*/) { 
            return CS.Call(4, 74, 0, false, this, a0); //Ret: Vector3
        },
        toString$$String: function(a0/*String*/) { 
            return CS.Call(4, 74, 1, false, this, a0); //Ret: String
        },
        toString: function() { 
            return CS.Call(4, 74, 2, false, this); //Ret: String
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Ray);

// UnityEngine.Ray2D
var UnityEngine$Ray2D = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Ray2D",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    definition: {
        ctor: function() { CS.Call(5, 75, 0, true, this); },
        ctor$$Vector2$$Vector2: function(a0, a1) { CS.Call(5, 75, 1, true, this, a0, a1); },
        get_origin: function() { return CS.Call(2, 75, 0, false, this); },
        set_origin: function(v) { return CS.Call(3, 75, 0, false, this, v); },
        get_direction: function() { return CS.Call(2, 75, 1, false, this); },
        set_direction: function(v) { return CS.Call(3, 75, 1, false, this, v); },
        GetPoint: function(a0/*Single*/) { 
            return CS.Call(4, 75, 0, false, this, a0); //Ret: Vector2
        },
        toString$$String: function(a0/*String*/) { 
            return CS.Call(4, 75, 1, false, this, a0); //Ret: String
        },
        toString: function() { 
            return CS.Call(4, 75, 2, false, this); //Ret: String
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Ray2D);

// UnityEngine.Plane
var UnityEngine$Plane = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Plane",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    definition: {
        ctor: function() { CS.Call(5, 76, 0, true, this); },
        ctor$$Vector3$$Vector3: function(a0, a1) { CS.Call(5, 76, 1, true, this, a0, a1); },
        ctor$$Vector3$$Single: function(a0, a1) { CS.Call(5, 76, 2, true, this, a0, a1); },
        ctor$$Vector3$$Vector3$$Vector3: function(a0, a1, a2) { CS.Call(5, 76, 3, true, this, a0, a1, a2); },
        get_normal: function() { return CS.Call(2, 76, 0, false, this); },
        set_normal: function(v) { return CS.Call(3, 76, 0, false, this, v); },
        get_distance: function() { return CS.Call(2, 76, 1, false, this); },
        set_distance: function(v) { return CS.Call(3, 76, 1, false, this, v); },
        GetDistanceToPoint: function(a0/*Vector3*/) { 
            return CS.Call(4, 76, 0, false, this, a0); //Ret: Single
        },
        GetSide: function(a0/*Vector3*/) { 
            return CS.Call(4, 76, 1, false, this, a0); //Ret: Boolean
        },
        Raycast: function(a0/*Ray*/, a1/*Single&*/) { 
            return CS.Call(4, 76, 2, false, this, a0, a1); //Ret: Boolean
        },
        SameSide: function(a0/*Vector3*/, a1/*Vector3*/) { 
            return CS.Call(4, 76, 3, false, this, a0, a1); //Ret: Boolean
        },
        Set3Points: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Vector3*/) { 
            return CS.Call(4, 76, 4, false, this, a0, a1, a2); //Ret: Void
        },
        SetNormalAndPosition: function(a0/*Vector3*/, a1/*Vector3*/) { 
            return CS.Call(4, 76, 5, false, this, a0, a1); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Plane);

// UnityEngine.Mathf
var UnityEngine$Mathf = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Mathf",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    staticFields: {
        PI: {
            get: function() { return CS.Call(0, 77, 0, true); }, 
            set: function(v) { return CS.Call(1, 77, 0, true, v); }
        },
        Infinity: {
            get: function() { return CS.Call(0, 77, 1, true); }, 
            set: function(v) { return CS.Call(1, 77, 1, true, v); }
        },
        NegativeInfinity: {
            get: function() { return CS.Call(0, 77, 2, true); }, 
            set: function(v) { return CS.Call(1, 77, 2, true, v); }
        },
        Deg2Rad: {
            get: function() { return CS.Call(0, 77, 3, true); }, 
            set: function(v) { return CS.Call(1, 77, 3, true, v); }
        },
        Rad2Deg: {
            get: function() { return CS.Call(0, 77, 4, true); }, 
            set: function(v) { return CS.Call(1, 77, 4, true, v); }
        },
        Epsilon: {
            get: function() { return CS.Call(0, 77, 5, true); }, 
            set: function(v) { return CS.Call(1, 77, 5, true, v); }
        },
    },
    staticDefinition: {
        Abs$$Int32: function(a0/*Int32*/) { 
            return CS.Call(4, 77, 0, true, a0); //Ret: Int32
        },
        Abs$$Single: function(a0/*Single*/) { 
            return CS.Call(4, 77, 1, true, a0); //Ret: Single
        },
        Acos: function(a0/*Single*/) { 
            return CS.Call(4, 77, 2, true, a0); //Ret: Single
        },
        Approximately: function(a0/*Single*/, a1/*Single*/) { 
            return CS.Call(4, 77, 3, true, a0, a1); //Ret: Boolean
        },
        Asin: function(a0/*Single*/) { 
            return CS.Call(4, 77, 4, true, a0); //Ret: Single
        },
        Atan: function(a0/*Single*/) { 
            return CS.Call(4, 77, 5, true, a0); //Ret: Single
        },
        Atan2: function(a0/*Single*/, a1/*Single*/) { 
            return CS.Call(4, 77, 6, true, a0, a1); //Ret: Single
        },
        Ceil: function(a0/*Single*/) { 
            return CS.Call(4, 77, 7, true, a0); //Ret: Single
        },
        CeilToInt: function(a0/*Single*/) { 
            return CS.Call(4, 77, 8, true, a0); //Ret: Int32
        },
        Clamp$$Int32$$Int32$$Int32: function(a0/*Int32*/, a1/*Int32*/, a2/*Int32*/) { 
            return CS.Call(4, 77, 9, true, a0, a1, a2); //Ret: Int32
        },
        Clamp$$Single$$Single$$Single: function(a0/*Single*/, a1/*Single*/, a2/*Single*/) { 
            return CS.Call(4, 77, 10, true, a0, a1, a2); //Ret: Single
        },
        Clamp01: function(a0/*Single*/) { 
            return CS.Call(4, 77, 11, true, a0); //Ret: Single
        },
        ClosestPowerOfTwo: function(a0/*Int32*/) { 
            return CS.Call(4, 77, 12, true, a0); //Ret: Int32
        },
        Cos: function(a0/*Single*/) { 
            return CS.Call(4, 77, 13, true, a0); //Ret: Single
        },
        DeltaAngle: function(a0/*Single*/, a1/*Single*/) { 
            return CS.Call(4, 77, 14, true, a0, a1); //Ret: Single
        },
        Exp: function(a0/*Single*/) { 
            return CS.Call(4, 77, 15, true, a0); //Ret: Single
        },
        FloatToHalf: function(a0/*Single*/) { 
            return CS.Call(4, 77, 16, true, a0); //Ret: UInt16
        },
        Floor: function(a0/*Single*/) { 
            return CS.Call(4, 77, 17, true, a0); //Ret: Single
        },
        FloorToInt: function(a0/*Single*/) { 
            return CS.Call(4, 77, 18, true, a0); //Ret: Int32
        },
        Gamma: function(a0/*Single*/, a1/*Single*/, a2/*Single*/) { 
            return CS.Call(4, 77, 19, true, a0, a1, a2); //Ret: Single
        },
        GammaToLinearSpace: function(a0/*Single*/) { 
            return CS.Call(4, 77, 20, true, a0); //Ret: Single
        },
        HalfToFloat: function(a0/*UInt16*/) { 
            return CS.Call(4, 77, 21, true, a0); //Ret: Single
        },
        InverseLerp: function(a0/*Single*/, a1/*Single*/, a2/*Single*/) { 
            return CS.Call(4, 77, 22, true, a0, a1, a2); //Ret: Single
        },
        IsPowerOfTwo: function(a0/*Int32*/) { 
            return CS.Call(4, 77, 23, true, a0); //Ret: Boolean
        },
        Lerp: function(a0/*Single*/, a1/*Single*/, a2/*Single*/) { 
            return CS.Call(4, 77, 24, true, a0, a1, a2); //Ret: Single
        },
        LerpAngle: function(a0/*Single*/, a1/*Single*/, a2/*Single*/) { 
            return CS.Call(4, 77, 25, true, a0, a1, a2); //Ret: Single
        },
        LerpUnclamped: function(a0/*Single*/, a1/*Single*/, a2/*Single*/) { 
            return CS.Call(4, 77, 26, true, a0, a1, a2); //Ret: Single
        },
        LinearToGammaSpace: function(a0/*Single*/) { 
            return CS.Call(4, 77, 27, true, a0); //Ret: Single
        },
        Log$$Single$$Single: function(a0/*Single*/, a1/*Single*/) { 
            return CS.Call(4, 77, 28, true, a0, a1); //Ret: Single
        },
        Log$$Single: function(a0/*Single*/) { 
            return CS.Call(4, 77, 29, true, a0); //Ret: Single
        },
        Log10: function(a0/*Single*/) { 
            return CS.Call(4, 77, 30, true, a0); //Ret: Single
        },
        Max$$Single$$Single: function(a0/*Single*/, a1/*Single*/) { 
            return CS.Call(4, 77, 31, true, a0, a1); //Ret: Single
        },
        Max$$Int32$$Int32: function(a0/*Int32*/, a1/*Int32*/) { 
            return CS.Call(4, 77, 32, true, a0, a1); //Ret: Int32
        },
        Max$$Single$Array: function(a0/*Single[]*/) { 
            return CS.Call(4, 77, 33, true, jsb_formatParamsArray(0, a0, arguments)); //Ret: Single
        },
        Max$$Int32$Array: function(a0/*Int32[]*/) { 
            return CS.Call(4, 77, 34, true, jsb_formatParamsArray(0, a0, arguments)); //Ret: Int32
        },
        Min$$Int32$$Int32: function(a0/*Int32*/, a1/*Int32*/) { 
            return CS.Call(4, 77, 35, true, a0, a1); //Ret: Int32
        },
        Min$$Single$$Single: function(a0/*Single*/, a1/*Single*/) { 
            return CS.Call(4, 77, 36, true, a0, a1); //Ret: Single
        },
        Min$$Int32$Array: function(a0/*Int32[]*/) { 
            return CS.Call(4, 77, 37, true, jsb_formatParamsArray(0, a0, arguments)); //Ret: Int32
        },
        Min$$Single$Array: function(a0/*Single[]*/) { 
            return CS.Call(4, 77, 38, true, jsb_formatParamsArray(0, a0, arguments)); //Ret: Single
        },
        MoveTowards: function(a0/*Single*/, a1/*Single*/, a2/*Single*/) { 
            return CS.Call(4, 77, 39, true, a0, a1, a2); //Ret: Single
        },
        MoveTowardsAngle: function(a0/*Single*/, a1/*Single*/, a2/*Single*/) { 
            return CS.Call(4, 77, 40, true, a0, a1, a2); //Ret: Single
        },
        NextPowerOfTwo: function(a0/*Int32*/) { 
            return CS.Call(4, 77, 41, true, a0); //Ret: Int32
        },
        PerlinNoise: function(a0/*Single*/, a1/*Single*/) { 
            return CS.Call(4, 77, 42, true, a0, a1); //Ret: Single
        },
        PingPong: function(a0/*Single*/, a1/*Single*/) { 
            return CS.Call(4, 77, 43, true, a0, a1); //Ret: Single
        },
        Pow: function(a0/*Single*/, a1/*Single*/) { 
            return CS.Call(4, 77, 44, true, a0, a1); //Ret: Single
        },
        Repeat: function(a0/*Single*/, a1/*Single*/) { 
            return CS.Call(4, 77, 45, true, a0, a1); //Ret: Single
        },
        Round: function(a0/*Single*/) { 
            return CS.Call(4, 77, 46, true, a0); //Ret: Single
        },
        RoundToInt: function(a0/*Single*/) { 
            return CS.Call(4, 77, 47, true, a0); //Ret: Int32
        },
        Sign: function(a0/*Single*/) { 
            return CS.Call(4, 77, 48, true, a0); //Ret: Single
        },
        Sin: function(a0/*Single*/) { 
            return CS.Call(4, 77, 49, true, a0); //Ret: Single
        },
        SmoothDamp$$Single$$Single$$Single$$Single$$Single$$Single: function(a0/*Single*/, a1/*Single*/, a2/*Single&*/, a3/*Single*/, a4/*Single*/, a5/*Single*/) { 
            return CS.Call(4, 77, 50, true, a0, a1, a2, a3, a4, a5); //Ret: Single
        },
        SmoothDamp$$Single$$Single$$Single$$Single$$Single: function(a0/*Single*/, a1/*Single*/, a2/*Single&*/, a3/*Single*/, a4/*Single*/) { 
            return CS.Call(4, 77, 51, true, a0, a1, a2, a3, a4); //Ret: Single
        },
        SmoothDamp$$Single$$Single$$Single$$Single: function(a0/*Single*/, a1/*Single*/, a2/*Single&*/, a3/*Single*/) { 
            return CS.Call(4, 77, 52, true, a0, a1, a2, a3); //Ret: Single
        },
        SmoothDampAngle$$Single$$Single$$Single$$Single$$Single$$Single: function(a0/*Single*/, a1/*Single*/, a2/*Single&*/, a3/*Single*/, a4/*Single*/, a5/*Single*/) { 
            return CS.Call(4, 77, 53, true, a0, a1, a2, a3, a4, a5); //Ret: Single
        },
        SmoothDampAngle$$Single$$Single$$Single$$Single$$Single: function(a0/*Single*/, a1/*Single*/, a2/*Single&*/, a3/*Single*/, a4/*Single*/) { 
            return CS.Call(4, 77, 54, true, a0, a1, a2, a3, a4); //Ret: Single
        },
        SmoothDampAngle$$Single$$Single$$Single$$Single: function(a0/*Single*/, a1/*Single*/, a2/*Single&*/, a3/*Single*/) { 
            return CS.Call(4, 77, 55, true, a0, a1, a2, a3); //Ret: Single
        },
        SmoothStep: function(a0/*Single*/, a1/*Single*/, a2/*Single*/) { 
            return CS.Call(4, 77, 56, true, a0, a1, a2); //Ret: Single
        },
        Sqrt: function(a0/*Single*/) { 
            return CS.Call(4, 77, 57, true, a0); //Ret: Single
        },
        Tan: function(a0/*Single*/) { 
            return CS.Call(4, 77, 58, true, a0); //Ret: Single
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 77, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Mathf);

// UnityEngine.Keyframe
var UnityEngine$Keyframe = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Keyframe",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    definition: {
        ctor: function() { CS.Call(5, 78, 0, true, this); },
        ctor$$Single$$Single: function(a0, a1) { CS.Call(5, 78, 1, true, this, a0, a1); },
        ctor$$Single$$Single$$Single$$Single: function(a0, a1, a2, a3) { CS.Call(5, 78, 2, true, this, a0, a1, a2, a3); },
        get_time: function() { return CS.Call(2, 78, 0, false, this); },
        set_time: function(v) { return CS.Call(3, 78, 0, false, this, v); },
        get_value: function() { return CS.Call(2, 78, 1, false, this); },
        set_value: function(v) { return CS.Call(3, 78, 1, false, this, v); },
        get_inTangent: function() { return CS.Call(2, 78, 2, false, this); },
        set_inTangent: function(v) { return CS.Call(3, 78, 2, false, this, v); },
        get_outTangent: function() { return CS.Call(2, 78, 3, false, this); },
        set_outTangent: function(v) { return CS.Call(3, 78, 3, false, this, v); },
        get_tangentMode: function() { return CS.Call(2, 78, 4, false, this); },
        set_tangentMode: function(v) { return CS.Call(3, 78, 4, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Keyframe);

// UnityEngine.AnimationCurve
var UnityEngine$AnimationCurve = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.AnimationCurve",
    Kind: "Class",
    baseTypeName: "System.Object",
    staticDefinition: {
        EaseInOut: function(a0/*Single*/, a1/*Single*/, a2/*Single*/, a3/*Single*/) { 
            return CS.Call(4, 79, 6, true, a0, a1, a2, a3); //Ret: AnimationCurve
        },
        Linear: function(a0/*Single*/, a1/*Single*/, a2/*Single*/, a3/*Single*/) { 
            return CS.Call(4, 79, 7, true, a0, a1, a2, a3); //Ret: AnimationCurve
        },
    },
    definition: {
        ctor$$Keyframe$Array: function(a0) { CS.Call(5, 79, 0, true, this, a0); },
        ctor: function() { CS.Call(5, 79, 1, true, this); },
        get_keys: function() { return CS.Call(2, 79, 0, false, this); },
        set_keys: function(v) { return CS.Call(3, 79, 0, false, this, v); },
        get_Item$$Int32: function(ind0) { return CS.Call(2, 79, 1, false, this, ind0); },
        set_Item$$Int32: function(ind0, v) { return CS.Call(3, 79, 1, false, this, ind0, v); },
        get_length: function() { return CS.Call(2, 79, 2, false, this); },
        set_length: function(v) { return CS.Call(3, 79, 2, false, this, v); },
        get_preWrapMode: function() { return CS.Call(2, 79, 3, false, this); },
        set_preWrapMode: function(v) { return CS.Call(3, 79, 3, false, this, v); },
        get_postWrapMode: function() { return CS.Call(2, 79, 4, false, this); },
        set_postWrapMode: function(v) { return CS.Call(3, 79, 4, false, this, v); },
        AddKey$$Single$$Single: function(a0/*Single*/, a1/*Single*/) { 
            return CS.Call(4, 79, 0, false, this, a0, a1); //Ret: Int32
        },
        AddKey$$Keyframe: function(a0/*Keyframe*/) { 
            return CS.Call(4, 79, 1, false, this, a0); //Ret: Int32
        },
        Evaluate: function(a0/*Single*/) { 
            return CS.Call(4, 79, 2, false, this, a0); //Ret: Single
        },
        MoveKey: function(a0/*Int32*/, a1/*Keyframe*/) { 
            return CS.Call(4, 79, 3, false, this, a0, a1); //Ret: Int32
        },
        RemoveKey: function(a0/*Int32*/) { 
            return CS.Call(4, 79, 4, false, this, a0); //Ret: Void
        },
        SmoothTangents: function(a0/*Int32*/, a1/*Single*/) { 
            return CS.Call(4, 79, 5, false, this, a0, a1); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$AnimationCurve);

// UnityEngine.Mesh
var UnityEngine$Mesh = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Mesh",
    Kind: "Class",
    baseTypeName: "UnityEngine.Object",
    definition: {
        ctor: function() { CS.Call(5, 80, 0, true, this); },
        get_isReadable: function() { return CS.Call(2, 80, 0, false, this); },
        set_isReadable: function(v) { return CS.Call(3, 80, 0, false, this, v); },
        get_blendShapeCount: function() { return CS.Call(2, 80, 1, false, this); },
        set_blendShapeCount: function(v) { return CS.Call(3, 80, 1, false, this, v); },
        get_bounds: function() { return CS.Call(2, 80, 2, false, this); },
        set_bounds: function(v) { return CS.Call(3, 80, 2, false, this, v); },
        get_vertexCount: function() { return CS.Call(2, 80, 3, false, this); },
        set_vertexCount: function(v) { return CS.Call(3, 80, 3, false, this, v); },
        get_subMeshCount: function() { return CS.Call(2, 80, 4, false, this); },
        set_subMeshCount: function(v) { return CS.Call(3, 80, 4, false, this, v); },
        get_boneWeights: function() { return CS.Call(2, 80, 5, false, this); },
        set_boneWeights: function(v) { return CS.Call(3, 80, 5, false, this, v); },
        get_bindposes: function() { return CS.Call(2, 80, 6, false, this); },
        set_bindposes: function(v) { return CS.Call(3, 80, 6, false, this, v); },
        get_vertices: function() { return CS.Call(2, 80, 7, false, this); },
        set_vertices: function(v) { return CS.Call(3, 80, 7, false, this, v); },
        get_normals: function() { return CS.Call(2, 80, 8, false, this); },
        set_normals: function(v) { return CS.Call(3, 80, 8, false, this, v); },
        get_tangents: function() { return CS.Call(2, 80, 9, false, this); },
        set_tangents: function(v) { return CS.Call(3, 80, 9, false, this, v); },
        get_uv: function() { return CS.Call(2, 80, 10, false, this); },
        set_uv: function(v) { return CS.Call(3, 80, 10, false, this, v); },
        get_uv2: function() { return CS.Call(2, 80, 11, false, this); },
        set_uv2: function(v) { return CS.Call(3, 80, 11, false, this, v); },
        get_uv3: function() { return CS.Call(2, 80, 12, false, this); },
        set_uv3: function(v) { return CS.Call(3, 80, 12, false, this, v); },
        get_uv4: function() { return CS.Call(2, 80, 13, false, this); },
        set_uv4: function(v) { return CS.Call(3, 80, 13, false, this, v); },
        get_colors: function() { return CS.Call(2, 80, 14, false, this); },
        set_colors: function(v) { return CS.Call(3, 80, 14, false, this, v); },
        get_colors32: function() { return CS.Call(2, 80, 15, false, this); },
        set_colors32: function(v) { return CS.Call(3, 80, 15, false, this, v); },
        get_triangles: function() { return CS.Call(2, 80, 16, false, this); },
        set_triangles: function(v) { return CS.Call(3, 80, 16, false, this, v); },
        AddBlendShapeFrame: function(a0/*String*/, a1/*Single*/, a2/*Vector3[]*/, a3/*Vector3[]*/, a4/*Vector3[]*/) { 
            return CS.Call(4, 80, 0, false, this, a0, a1, a2, a3, a4); //Ret: Void
        },
        Clear$$Boolean: function(a0/*Boolean*/) { 
            return CS.Call(4, 80, 1, false, this, a0); //Ret: Void
        },
        Clear: function() { 
            return CS.Call(4, 80, 2, false, this); //Ret: Void
        },
        ClearBlendShapes: function() { 
            return CS.Call(4, 80, 3, false, this); //Ret: Void
        },
        CombineMeshes$$CombineInstance$Array$$Boolean$$Boolean: function(a0/*CombineInstance[]*/, a1/*Boolean*/, a2/*Boolean*/) { 
            return CS.Call(4, 80, 4, false, this, a0, a1, a2); //Ret: Void
        },
        CombineMeshes$$CombineInstance$Array$$Boolean: function(a0/*CombineInstance[]*/, a1/*Boolean*/) { 
            return CS.Call(4, 80, 5, false, this, a0, a1); //Ret: Void
        },
        CombineMeshes$$CombineInstance$Array: function(a0/*CombineInstance[]*/) { 
            return CS.Call(4, 80, 6, false, this, a0); //Ret: Void
        },
        GetBlendShapeFrameCount: function(a0/*Int32*/) { 
            return CS.Call(4, 80, 7, false, this, a0); //Ret: Int32
        },
        GetBlendShapeFrameVertices: function(a0/*Int32*/, a1/*Int32*/, a2/*Vector3[]*/, a3/*Vector3[]*/, a4/*Vector3[]*/) { 
            return CS.Call(4, 80, 8, false, this, a0, a1, a2, a3, a4); //Ret: Void
        },
        GetBlendShapeFrameWeight: function(a0/*Int32*/, a1/*Int32*/) { 
            return CS.Call(4, 80, 9, false, this, a0, a1); //Ret: Single
        },
        GetBlendShapeIndex: function(a0/*String*/) { 
            return CS.Call(4, 80, 10, false, this, a0); //Ret: Int32
        },
        GetBlendShapeName: function(a0/*Int32*/) { 
            return CS.Call(4, 80, 11, false, this, a0); //Ret: String
        },
        GetIndices: function(a0/*Int32*/) { 
            return CS.Call(4, 80, 12, false, this, a0); //Ret: Int32[]
        },
        GetTopology: function(a0/*Int32*/) { 
            return CS.Call(4, 80, 13, false, this, a0); //Ret: MeshTopology
        },
        GetTriangles: function(a0/*Int32*/) { 
            return CS.Call(4, 80, 14, false, this, a0); //Ret: Int32[]
        },
        GetUVs$$Int32$$List$1$Vector2: function(a0/*Int32*/, a1/*List`1*/) { 
            return CS.Call(4, 80, 15, false, this, a0, a1); //Ret: Void
        },
        GetUVs$$Int32$$List$1$Vector4: function(a0/*Int32*/, a1/*List`1*/) { 
            return CS.Call(4, 80, 16, false, this, a0, a1); //Ret: Void
        },
        GetUVs$$Int32$$List$1$Vector3: function(a0/*Int32*/, a1/*List`1*/) { 
            return CS.Call(4, 80, 17, false, this, a0, a1); //Ret: Void
        },
        MarkDynamic: function() { 
            return CS.Call(4, 80, 18, false, this); //Ret: Void
        },
        Optimize: function() { 
            return CS.Call(4, 80, 19, false, this); //Ret: Void
        },
        RecalculateBounds: function() { 
            return CS.Call(4, 80, 20, false, this); //Ret: Void
        },
        RecalculateNormals: function() { 
            return CS.Call(4, 80, 21, false, this); //Ret: Void
        },
        SetColors$$List$1$Color: function(a0/*List`1*/) { 
            return CS.Call(4, 80, 22, false, this, a0); //Ret: Void
        },
        SetColors$$List$1$Color32: function(a0/*List`1*/) { 
            return CS.Call(4, 80, 23, false, this, a0); //Ret: Void
        },
        SetIndices$$Int32$Array$$MeshTopology$$Int32$$Boolean: function(a0/*Int32[]*/, a1/*MeshTopology*/, a2/*Int32*/, a3/*Boolean*/) { 
            return CS.Call(4, 80, 24, false, this, a0, a1, a2, a3); //Ret: Void
        },
        SetIndices$$Int32$Array$$MeshTopology$$Int32: function(a0/*Int32[]*/, a1/*MeshTopology*/, a2/*Int32*/) { 
            return CS.Call(4, 80, 25, false, this, a0, a1, a2); //Ret: Void
        },
        SetNormals: function(a0/*List`1*/) { 
            return CS.Call(4, 80, 26, false, this, a0); //Ret: Void
        },
        SetTangents: function(a0/*List`1*/) { 
            return CS.Call(4, 80, 27, false, this, a0); //Ret: Void
        },
        SetTriangles$$Int32$Array$$Int32$$Boolean: function(a0/*Int32[]*/, a1/*Int32*/, a2/*Boolean*/) { 
            return CS.Call(4, 80, 28, false, this, a0, a1, a2); //Ret: Void
        },
        SetTriangles$$List$1$Int32$$Int32$$Boolean: function(a0/*List`1*/, a1/*Int32*/, a2/*Boolean*/) { 
            return CS.Call(4, 80, 29, false, this, a0, a1, a2); //Ret: Void
        },
        SetTriangles$$List$1$Int32$$Int32: function(a0/*List`1*/, a1/*Int32*/) { 
            return CS.Call(4, 80, 30, false, this, a0, a1); //Ret: Void
        },
        SetTriangles$$Int32$Array$$Int32: function(a0/*Int32[]*/, a1/*Int32*/) { 
            return CS.Call(4, 80, 31, false, this, a0, a1); //Ret: Void
        },
        SetUVs$$Int32$$List$1$Vector2: function(a0/*Int32*/, a1/*List`1*/) { 
            return CS.Call(4, 80, 32, false, this, a0, a1); //Ret: Void
        },
        SetUVs$$Int32$$List$1$Vector3: function(a0/*Int32*/, a1/*List`1*/) { 
            return CS.Call(4, 80, 33, false, this, a0, a1); //Ret: Void
        },
        SetUVs$$Int32$$List$1$Vector4: function(a0/*Int32*/, a1/*List`1*/) { 
            return CS.Call(4, 80, 34, false, this, a0, a1); //Ret: Void
        },
        SetVertices: function(a0/*List`1*/) { 
            return CS.Call(4, 80, 35, false, this, a0); //Ret: Void
        },
        UploadMeshData: function(a0/*Boolean*/) { 
            return CS.Call(4, 80, 36, false, this, a0); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Mesh);

// UnityEngine.ResourceRequest
var UnityEngine$ResourceRequest = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.ResourceRequest",
    Kind: "Class",
    baseTypeName: "UnityEngine.AsyncOperation",
    definition: {
        ctor: function() { CS.Call(5, 81, 0, true, this); },
        get_asset: function() { return CS.Call(2, 81, 0, false, this); },
        set_asset: function(v) { return CS.Call(3, 81, 0, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$ResourceRequest);

// UnityEngine.Resources
var UnityEngine$Resources = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Resources",
    Kind: "Class",
    baseTypeName: "System.Object",
    staticDefinition: {
        FindObjectsOfTypeAll$$Type: function(a0/*Type*/) { 
            return CS.Call(4, 82, 0, true, a0.get_FullName()); //Ret: Object[]
        },
        FindObjectsOfTypeAll$1: function(t0) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 82, 1, true, native_t0); //Ret: T[]
        },
        GetBuiltinResource$$Type$$String: function(a0/*Type*/, a1/*String*/) { 
            return CS.Call(4, 82, 2, true, a0.get_FullName(), a1); //Ret: Object
        },
        GetBuiltinResource$1$$String: function(t0, a0/*String*/) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 82, 3, true, native_t0, a0); //Ret: T
        },
        Load$$String$$Type: function(a0/*String*/, a1/*Type*/) { 
            return CS.Call(4, 82, 4, true, a0, a1.get_FullName()); //Ret: Object
        },
        Load$$String: function(a0/*String*/) { 
            return CS.Call(4, 82, 5, true, a0); //Ret: Object
        },
        Load$1$$String: function(t0, a0/*String*/) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 82, 6, true, native_t0, a0); //Ret: T
        },
        LoadAll$$String$$Type: function(a0/*String*/, a1/*Type*/) { 
            return CS.Call(4, 82, 7, true, a0, a1.get_FullName()); //Ret: Object[]
        },
        LoadAll$$String: function(a0/*String*/) { 
            return CS.Call(4, 82, 8, true, a0); //Ret: Object[]
        },
        LoadAll$1$$String: function(t0, a0/*String*/) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 82, 9, true, native_t0, a0); //Ret: T[]
        },
        LoadAsync$$String$$Type: function(a0/*String*/, a1/*Type*/) { 
            return CS.Call(4, 82, 10, true, a0, a1.get_FullName()); //Ret: ResourceRequest
        },
        LoadAsync$$String: function(a0/*String*/) { 
            return CS.Call(4, 82, 11, true, a0); //Ret: ResourceRequest
        },
        LoadAsync$1$$String: function(t0, a0/*String*/) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 82, 12, true, native_t0, a0); //Ret: ResourceRequest
        },
        UnloadAsset: function(a0/*Object*/) { 
            return CS.Call(4, 82, 13, true, a0); //Ret: Void
        },
        UnloadUnusedAssets: function() { 
            return CS.Call(4, 82, 14, true); //Ret: AsyncOperation
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 82, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Resources);

// UnityEngine.TextAsset
var UnityEngine$TextAsset = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.TextAsset",
    Kind: "Class",
    baseTypeName: "UnityEngine.Object",
    definition: {
        ctor: function() { CS.Call(5, 83, 0, true, this); },
        get_text: function() { return CS.Call(2, 83, 0, false, this); },
        set_text: function(v) { return CS.Call(3, 83, 0, false, this, v); },
        get_bytes: function() { return CS.Call(2, 83, 1, false, this); },
        set_bytes: function(v) { return CS.Call(3, 83, 1, false, this, v); },
        toString: function() { 
            return CS.Call(4, 83, 0, false, this); //Ret: String
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$TextAsset);

// UnityEngine.Security
var UnityEngine$Security = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Security",
    Kind: "Class",
    baseTypeName: "System.Object",
    staticDefinition: {
        LoadAndVerifyAssembly$$Byte$Array$$String: function(a0/*Byte[]*/, a1/*String*/) { 
            return CS.Call(4, 84, 0, true, a0, a1); //Ret: Assembly
        },
        LoadAndVerifyAssembly$$Byte$Array: function(a0/*Byte[]*/) { 
            return CS.Call(4, 84, 1, true, a0); //Ret: Assembly
        },
        PrefetchSocketPolicy$$String$$Int32$$Int32: function(a0/*String*/, a1/*Int32*/, a2/*Int32*/) { 
            return CS.Call(4, 84, 2, true, a0, a1, a2); //Ret: Boolean
        },
        PrefetchSocketPolicy$$String$$Int32: function(a0/*String*/, a1/*Int32*/) { 
            return CS.Call(4, 84, 3, true, a0, a1); //Ret: Boolean
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 84, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Security);

// UnityEngine.Shader
var UnityEngine$Shader = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Shader",
    Kind: "Class",
    baseTypeName: "UnityEngine.Object",
    staticDefinition: {
        get_globalShaderHardwareTier: function() { return CS.Call(2, 85, 1, true); },
        set_globalShaderHardwareTier: function(v) { return CS.Call(3, 85, 1, true, v); },
        get_globalMaximumLOD: function() { return CS.Call(2, 85, 3, true); },
        set_globalMaximumLOD: function(v) { return CS.Call(3, 85, 3, true, v); },
        DisableKeyword: function(a0/*String*/) { 
            return CS.Call(4, 85, 0, true, a0); //Ret: Void
        },
        EnableKeyword: function(a0/*String*/) { 
            return CS.Call(4, 85, 1, true, a0); //Ret: Void
        },
        Find: function(a0/*String*/) { 
            return CS.Call(4, 85, 2, true, a0); //Ret: Shader
        },
        IsKeywordEnabled: function(a0/*String*/) { 
            return CS.Call(4, 85, 3, true, a0); //Ret: Boolean
        },
        PropertyToID: function(a0/*String*/) { 
            return CS.Call(4, 85, 4, true, a0); //Ret: Int32
        },
        SetGlobalBuffer: function(a0/*String*/, a1/*ComputeBuffer*/) { 
            return CS.Call(4, 85, 5, true, a0, a1); //Ret: Void
        },
        SetGlobalColor$$String$$Color: function(a0/*String*/, a1/*Color*/) { 
            return CS.Call(4, 85, 6, true, a0, a1); //Ret: Void
        },
        SetGlobalColor$$Int32$$Color: function(a0/*Int32*/, a1/*Color*/) { 
            return CS.Call(4, 85, 7, true, a0, a1); //Ret: Void
        },
        SetGlobalFloat$$Int32$$Single: function(a0/*Int32*/, a1/*Single*/) { 
            return CS.Call(4, 85, 8, true, a0, a1); //Ret: Void
        },
        SetGlobalFloat$$String$$Single: function(a0/*String*/, a1/*Single*/) { 
            return CS.Call(4, 85, 9, true, a0, a1); //Ret: Void
        },
        SetGlobalFloatArray$$Int32$$Single$Array: function(a0/*Int32*/, a1/*Single[]*/) { 
            return CS.Call(4, 85, 10, true, a0, a1); //Ret: Void
        },
        SetGlobalFloatArray$$String$$Single$Array: function(a0/*String*/, a1/*Single[]*/) { 
            return CS.Call(4, 85, 11, true, a0, a1); //Ret: Void
        },
        SetGlobalInt$$String$$Int32: function(a0/*String*/, a1/*Int32*/) { 
            return CS.Call(4, 85, 12, true, a0, a1); //Ret: Void
        },
        SetGlobalInt$$Int32$$Int32: function(a0/*Int32*/, a1/*Int32*/) { 
            return CS.Call(4, 85, 13, true, a0, a1); //Ret: Void
        },
        SetGlobalMatrix$$Int32$$Matrix4x4: function(a0/*Int32*/, a1/*Matrix4x4*/) { 
            return CS.Call(4, 85, 14, true, a0, a1); //Ret: Void
        },
        SetGlobalMatrix$$String$$Matrix4x4: function(a0/*String*/, a1/*Matrix4x4*/) { 
            return CS.Call(4, 85, 15, true, a0, a1); //Ret: Void
        },
        SetGlobalMatrixArray$$Int32$$Matrix4x4$Array: function(a0/*Int32*/, a1/*Matrix4x4[]*/) { 
            return CS.Call(4, 85, 16, true, a0, a1); //Ret: Void
        },
        SetGlobalMatrixArray$$String$$Matrix4x4$Array: function(a0/*String*/, a1/*Matrix4x4[]*/) { 
            return CS.Call(4, 85, 17, true, a0, a1); //Ret: Void
        },
        SetGlobalTexture$$Int32$$Texture: function(a0/*Int32*/, a1/*Texture*/) { 
            return CS.Call(4, 85, 18, true, a0, a1); //Ret: Void
        },
        SetGlobalTexture$$String$$Texture: function(a0/*String*/, a1/*Texture*/) { 
            return CS.Call(4, 85, 19, true, a0, a1); //Ret: Void
        },
        SetGlobalVector$$Int32$$Vector4: function(a0/*Int32*/, a1/*Vector4*/) { 
            return CS.Call(4, 85, 20, true, a0, a1); //Ret: Void
        },
        SetGlobalVector$$String$$Vector4: function(a0/*String*/, a1/*Vector4*/) { 
            return CS.Call(4, 85, 21, true, a0, a1); //Ret: Void
        },
        SetGlobalVectorArray$$Int32$$Vector4$Array: function(a0/*Int32*/, a1/*Vector4[]*/) { 
            return CS.Call(4, 85, 22, true, a0, a1); //Ret: Void
        },
        SetGlobalVectorArray$$String$$Vector4$Array: function(a0/*String*/, a1/*Vector4[]*/) { 
            return CS.Call(4, 85, 23, true, a0, a1); //Ret: Void
        },
        WarmupAllShaders: function() { 
            return CS.Call(4, 85, 24, true); //Ret: Void
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 85, 0, true, this); },
        get_isSupported: function() { return CS.Call(2, 85, 0, false, this); },
        set_isSupported: function(v) { return CS.Call(3, 85, 0, false, this, v); },
        get_maximumLOD: function() { return CS.Call(2, 85, 2, false, this); },
        set_maximumLOD: function(v) { return CS.Call(3, 85, 2, false, this, v); },
        get_renderQueue: function() { return CS.Call(2, 85, 4, false, this); },
        set_renderQueue: function(v) { return CS.Call(3, 85, 4, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Shader);

// UnityEngine.Material
var UnityEngine$Material = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Material",
    Kind: "Class",
    baseTypeName: "UnityEngine.Object",
    definition: {
        ctor$$Shader: function(a0) { CS.Call(5, 86, 0, true, this, a0); },
        ctor$$Material: function(a0) { CS.Call(5, 86, 1, true, this, a0); },
        get_shader: function() { return CS.Call(2, 86, 0, false, this); },
        set_shader: function(v) { return CS.Call(3, 86, 0, false, this, v); },
        get_color: function() { return CS.Call(2, 86, 1, false, this); },
        set_color: function(v) { return CS.Call(3, 86, 1, false, this, v); },
        get_mainTexture: function() { return CS.Call(2, 86, 2, false, this); },
        set_mainTexture: function(v) { return CS.Call(3, 86, 2, false, this, v); },
        get_mainTextureOffset: function() { return CS.Call(2, 86, 3, false, this); },
        set_mainTextureOffset: function(v) { return CS.Call(3, 86, 3, false, this, v); },
        get_mainTextureScale: function() { return CS.Call(2, 86, 4, false, this); },
        set_mainTextureScale: function(v) { return CS.Call(3, 86, 4, false, this, v); },
        get_passCount: function() { return CS.Call(2, 86, 5, false, this); },
        set_passCount: function(v) { return CS.Call(3, 86, 5, false, this, v); },
        get_renderQueue: function() { return CS.Call(2, 86, 6, false, this); },
        set_renderQueue: function(v) { return CS.Call(3, 86, 6, false, this, v); },
        get_shaderKeywords: function() { return CS.Call(2, 86, 7, false, this); },
        set_shaderKeywords: function(v) { return CS.Call(3, 86, 7, false, this, v); },
        get_globalIlluminationFlags: function() { return CS.Call(2, 86, 8, false, this); },
        set_globalIlluminationFlags: function(v) { return CS.Call(3, 86, 8, false, this, v); },
        CopyPropertiesFromMaterial: function(a0/*Material*/) { 
            return CS.Call(4, 86, 0, false, this, a0); //Ret: Void
        },
        DisableKeyword: function(a0/*String*/) { 
            return CS.Call(4, 86, 1, false, this, a0); //Ret: Void
        },
        EnableKeyword: function(a0/*String*/) { 
            return CS.Call(4, 86, 2, false, this, a0); //Ret: Void
        },
        GetColor$$Int32: function(a0/*Int32*/) { 
            return CS.Call(4, 86, 3, false, this, a0); //Ret: Color
        },
        GetColor$$String: function(a0/*String*/) { 
            return CS.Call(4, 86, 4, false, this, a0); //Ret: Color
        },
        GetFloat$$String: function(a0/*String*/) { 
            return CS.Call(4, 86, 5, false, this, a0); //Ret: Single
        },
        GetFloat$$Int32: function(a0/*Int32*/) { 
            return CS.Call(4, 86, 6, false, this, a0); //Ret: Single
        },
        GetInt$$Int32: function(a0/*Int32*/) { 
            return CS.Call(4, 86, 7, false, this, a0); //Ret: Int32
        },
        GetInt$$String: function(a0/*String*/) { 
            return CS.Call(4, 86, 8, false, this, a0); //Ret: Int32
        },
        GetMatrix$$String: function(a0/*String*/) { 
            return CS.Call(4, 86, 9, false, this, a0); //Ret: Matrix4x4
        },
        GetMatrix$$Int32: function(a0/*Int32*/) { 
            return CS.Call(4, 86, 10, false, this, a0); //Ret: Matrix4x4
        },
        GetTag$$String$$Boolean$$String: function(a0/*String*/, a1/*Boolean*/, a2/*String*/) { 
            return CS.Call(4, 86, 11, false, this, a0, a1, a2); //Ret: String
        },
        GetTag$$String$$Boolean: function(a0/*String*/, a1/*Boolean*/) { 
            return CS.Call(4, 86, 12, false, this, a0, a1); //Ret: String
        },
        GetTexture$$String: function(a0/*String*/) { 
            return CS.Call(4, 86, 13, false, this, a0); //Ret: Texture
        },
        GetTexture$$Int32: function(a0/*Int32*/) { 
            return CS.Call(4, 86, 14, false, this, a0); //Ret: Texture
        },
        GetTextureOffset: function(a0/*String*/) { 
            return CS.Call(4, 86, 15, false, this, a0); //Ret: Vector2
        },
        GetTextureScale: function(a0/*String*/) { 
            return CS.Call(4, 86, 16, false, this, a0); //Ret: Vector2
        },
        GetVector$$Int32: function(a0/*Int32*/) { 
            return CS.Call(4, 86, 17, false, this, a0); //Ret: Vector4
        },
        GetVector$$String: function(a0/*String*/) { 
            return CS.Call(4, 86, 18, false, this, a0); //Ret: Vector4
        },
        HasProperty$$Int32: function(a0/*Int32*/) { 
            return CS.Call(4, 86, 19, false, this, a0); //Ret: Boolean
        },
        HasProperty$$String: function(a0/*String*/) { 
            return CS.Call(4, 86, 20, false, this, a0); //Ret: Boolean
        },
        IsKeywordEnabled: function(a0/*String*/) { 
            return CS.Call(4, 86, 21, false, this, a0); //Ret: Boolean
        },
        Lerp: function(a0/*Material*/, a1/*Material*/, a2/*Single*/) { 
            return CS.Call(4, 86, 22, false, this, a0, a1, a2); //Ret: Void
        },
        SetBuffer: function(a0/*String*/, a1/*ComputeBuffer*/) { 
            return CS.Call(4, 86, 23, false, this, a0, a1); //Ret: Void
        },
        SetColor$$String$$Color: function(a0/*String*/, a1/*Color*/) { 
            return CS.Call(4, 86, 24, false, this, a0, a1); //Ret: Void
        },
        SetColor$$Int32$$Color: function(a0/*Int32*/, a1/*Color*/) { 
            return CS.Call(4, 86, 25, false, this, a0, a1); //Ret: Void
        },
        SetColorArray$$String$$Color$Array: function(a0/*String*/, a1/*Color[]*/) { 
            return CS.Call(4, 86, 26, false, this, a0, a1); //Ret: Void
        },
        SetColorArray$$Int32$$Color$Array: function(a0/*Int32*/, a1/*Color[]*/) { 
            return CS.Call(4, 86, 27, false, this, a0, a1); //Ret: Void
        },
        SetFloat$$String$$Single: function(a0/*String*/, a1/*Single*/) { 
            return CS.Call(4, 86, 28, false, this, a0, a1); //Ret: Void
        },
        SetFloat$$Int32$$Single: function(a0/*Int32*/, a1/*Single*/) { 
            return CS.Call(4, 86, 29, false, this, a0, a1); //Ret: Void
        },
        SetFloatArray$$Int32$$Single$Array: function(a0/*Int32*/, a1/*Single[]*/) { 
            return CS.Call(4, 86, 30, false, this, a0, a1); //Ret: Void
        },
        SetFloatArray$$String$$Single$Array: function(a0/*String*/, a1/*Single[]*/) { 
            return CS.Call(4, 86, 31, false, this, a0, a1); //Ret: Void
        },
        SetInt$$Int32$$Int32: function(a0/*Int32*/, a1/*Int32*/) { 
            return CS.Call(4, 86, 32, false, this, a0, a1); //Ret: Void
        },
        SetInt$$String$$Int32: function(a0/*String*/, a1/*Int32*/) { 
            return CS.Call(4, 86, 33, false, this, a0, a1); //Ret: Void
        },
        SetMatrix$$String$$Matrix4x4: function(a0/*String*/, a1/*Matrix4x4*/) { 
            return CS.Call(4, 86, 34, false, this, a0, a1); //Ret: Void
        },
        SetMatrix$$Int32$$Matrix4x4: function(a0/*Int32*/, a1/*Matrix4x4*/) { 
            return CS.Call(4, 86, 35, false, this, a0, a1); //Ret: Void
        },
        SetMatrixArray$$String$$Matrix4x4$Array: function(a0/*String*/, a1/*Matrix4x4[]*/) { 
            return CS.Call(4, 86, 36, false, this, a0, a1); //Ret: Void
        },
        SetMatrixArray$$Int32$$Matrix4x4$Array: function(a0/*Int32*/, a1/*Matrix4x4[]*/) { 
            return CS.Call(4, 86, 37, false, this, a0, a1); //Ret: Void
        },
        SetOverrideTag: function(a0/*String*/, a1/*String*/) { 
            return CS.Call(4, 86, 38, false, this, a0, a1); //Ret: Void
        },
        SetPass: function(a0/*Int32*/) { 
            return CS.Call(4, 86, 39, false, this, a0); //Ret: Boolean
        },
        SetTexture$$String$$Texture: function(a0/*String*/, a1/*Texture*/) { 
            return CS.Call(4, 86, 40, false, this, a0, a1); //Ret: Void
        },
        SetTexture$$Int32$$Texture: function(a0/*Int32*/, a1/*Texture*/) { 
            return CS.Call(4, 86, 41, false, this, a0, a1); //Ret: Void
        },
        SetTextureOffset: function(a0/*String*/, a1/*Vector2*/) { 
            return CS.Call(4, 86, 42, false, this, a0, a1); //Ret: Void
        },
        SetTextureScale: function(a0/*String*/, a1/*Vector2*/) { 
            return CS.Call(4, 86, 43, false, this, a0, a1); //Ret: Void
        },
        SetVector$$Int32$$Vector4: function(a0/*Int32*/, a1/*Vector4*/) { 
            return CS.Call(4, 86, 44, false, this, a0, a1); //Ret: Void
        },
        SetVector$$String$$Vector4: function(a0/*String*/, a1/*Vector4*/) { 
            return CS.Call(4, 86, 45, false, this, a0, a1); //Ret: Void
        },
        SetVectorArray$$String$$Vector4$Array: function(a0/*String*/, a1/*Vector4[]*/) { 
            return CS.Call(4, 86, 46, false, this, a0, a1); //Ret: Void
        },
        SetVectorArray$$Int32$$Vector4$Array: function(a0/*Int32*/, a1/*Vector4[]*/) { 
            return CS.Call(4, 86, 47, false, this, a0, a1); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Material);

// UnityEngine.SortingLayer
var UnityEngine$SortingLayer = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.SortingLayer",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    staticDefinition: {
        get_layers: function() { return CS.Call(2, 87, 3, true); },
        set_layers: function(v) { return CS.Call(3, 87, 3, true, v); },
        GetLayerValueFromID: function(a0/*Int32*/) { 
            return CS.Call(4, 87, 0, true, a0); //Ret: Int32
        },
        GetLayerValueFromName: function(a0/*String*/) { 
            return CS.Call(4, 87, 1, true, a0); //Ret: Int32
        },
        IDToName: function(a0/*Int32*/) { 
            return CS.Call(4, 87, 2, true, a0); //Ret: String
        },
        IsValid: function(a0/*Int32*/) { 
            return CS.Call(4, 87, 3, true, a0); //Ret: Boolean
        },
        NameToID: function(a0/*String*/) { 
            return CS.Call(4, 87, 4, true, a0); //Ret: Int32
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 87, 0, true, this); },
        get_id: function() { return CS.Call(2, 87, 0, false, this); },
        set_id: function(v) { return CS.Call(3, 87, 0, false, this, v); },
        get_name: function() { return CS.Call(2, 87, 1, false, this); },
        set_name: function(v) { return CS.Call(3, 87, 1, false, this, v); },
        get_value: function() { return CS.Call(2, 87, 2, false, this); },
        set_value: function(v) { return CS.Call(3, 87, 2, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$SortingLayer);

// UnityEngine.ProceduralPropertyDescription
var UnityEngine$ProceduralPropertyDescription = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.ProceduralPropertyDescription",
    Kind: "Class",
    baseTypeName: "System.Object",
    fields: {
        name: {
            get: function() { return CS.Call(0, 88, 0, false, this); }, 
            set: function(v) { return CS.Call(1, 88, 0, false, this, v); }
        },
        label: {
            get: function() { return CS.Call(0, 88, 1, false, this); }, 
            set: function(v) { return CS.Call(1, 88, 1, false, this, v); }
        },
        group: {
            get: function() { return CS.Call(0, 88, 2, false, this); }, 
            set: function(v) { return CS.Call(1, 88, 2, false, this, v); }
        },
        type: {
            get: function() { return CS.Call(0, 88, 3, false, this); }, 
            set: function(v) { return CS.Call(1, 88, 3, false, this, v); }
        },
        hasRange: {
            get: function() { return CS.Call(0, 88, 4, false, this); }, 
            set: function(v) { return CS.Call(1, 88, 4, false, this, v); }
        },
        minimum: {
            get: function() { return CS.Call(0, 88, 5, false, this); }, 
            set: function(v) { return CS.Call(1, 88, 5, false, this, v); }
        },
        maximum: {
            get: function() { return CS.Call(0, 88, 6, false, this); }, 
            set: function(v) { return CS.Call(1, 88, 6, false, this, v); }
        },
        step: {
            get: function() { return CS.Call(0, 88, 7, false, this); }, 
            set: function(v) { return CS.Call(1, 88, 7, false, this, v); }
        },
        enumOptions: {
            get: function() { return CS.Call(0, 88, 8, false, this); }, 
            set: function(v) { return CS.Call(1, 88, 8, false, this, v); }
        },
        componentLabels: {
            get: function() { return CS.Call(0, 88, 9, false, this); }, 
            set: function(v) { return CS.Call(1, 88, 9, false, this, v); }
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 88, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$ProceduralPropertyDescription);

// UnityEngine.ProceduralMaterial
var UnityEngine$ProceduralMaterial = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.ProceduralMaterial",
    Kind: "Class",
    baseTypeName: "UnityEngine.Material",
    staticDefinition: {
        get_isSupported: function() { return CS.Call(2, 89, 6, true); },
        set_isSupported: function(v) { return CS.Call(3, 89, 6, true, v); },
        get_substanceProcessorUsage: function() { return CS.Call(2, 89, 7, true); },
        set_substanceProcessorUsage: function(v) { return CS.Call(3, 89, 7, true, v); },
        StopRebuilds: function() { 
            return CS.Call(4, 89, 23, true); //Ret: Void
        },
    },
    definition: {
        get_cacheSize: function() { return CS.Call(2, 89, 0, false, this); },
        set_cacheSize: function(v) { return CS.Call(3, 89, 0, false, this, v); },
        get_animationUpdateRate: function() { return CS.Call(2, 89, 1, false, this); },
        set_animationUpdateRate: function(v) { return CS.Call(3, 89, 1, false, this, v); },
        get_isProcessing: function() { return CS.Call(2, 89, 2, false, this); },
        set_isProcessing: function(v) { return CS.Call(3, 89, 2, false, this, v); },
        get_isCachedDataAvailable: function() { return CS.Call(2, 89, 3, false, this); },
        set_isCachedDataAvailable: function(v) { return CS.Call(3, 89, 3, false, this, v); },
        get_isLoadTimeGenerated: function() { return CS.Call(2, 89, 4, false, this); },
        set_isLoadTimeGenerated: function(v) { return CS.Call(3, 89, 4, false, this, v); },
        get_loadingBehavior: function() { return CS.Call(2, 89, 5, false, this); },
        set_loadingBehavior: function(v) { return CS.Call(3, 89, 5, false, this, v); },
        get_preset: function() { return CS.Call(2, 89, 8, false, this); },
        set_preset: function(v) { return CS.Call(3, 89, 8, false, this, v); },
        get_isReadable: function() { return CS.Call(2, 89, 9, false, this); },
        set_isReadable: function(v) { return CS.Call(3, 89, 9, false, this, v); },
        get_isFrozen: function() { return CS.Call(2, 89, 10, false, this); },
        set_isFrozen: function(v) { return CS.Call(3, 89, 10, false, this, v); },
        CacheProceduralProperty: function(a0/*String*/, a1/*Boolean*/) { 
            return CS.Call(4, 89, 0, false, this, a0, a1); //Ret: Void
        },
        ClearCache: function() { 
            return CS.Call(4, 89, 1, false, this); //Ret: Void
        },
        FreezeAndReleaseSourceData: function() { 
            return CS.Call(4, 89, 2, false, this); //Ret: Void
        },
        GetGeneratedTexture: function(a0/*String*/) { 
            return CS.Call(4, 89, 3, false, this, a0); //Ret: ProceduralTexture
        },
        GetGeneratedTextures: function() { 
            return CS.Call(4, 89, 4, false, this); //Ret: Texture[]
        },
        GetProceduralBoolean: function(a0/*String*/) { 
            return CS.Call(4, 89, 5, false, this, a0); //Ret: Boolean
        },
        GetProceduralColor: function(a0/*String*/) { 
            return CS.Call(4, 89, 6, false, this, a0); //Ret: Color
        },
        GetProceduralEnum: function(a0/*String*/) { 
            return CS.Call(4, 89, 7, false, this, a0); //Ret: Int32
        },
        GetProceduralFloat: function(a0/*String*/) { 
            return CS.Call(4, 89, 8, false, this, a0); //Ret: Single
        },
        GetProceduralPropertyDescriptions: function() { 
            return CS.Call(4, 89, 9, false, this); //Ret: ProceduralPropertyDescription[]
        },
        GetProceduralTexture: function(a0/*String*/) { 
            return CS.Call(4, 89, 10, false, this, a0); //Ret: Texture2D
        },
        GetProceduralVector: function(a0/*String*/) { 
            return CS.Call(4, 89, 11, false, this, a0); //Ret: Vector4
        },
        HasProceduralProperty: function(a0/*String*/) { 
            return CS.Call(4, 89, 12, false, this, a0); //Ret: Boolean
        },
        IsProceduralPropertyCached: function(a0/*String*/) { 
            return CS.Call(4, 89, 13, false, this, a0); //Ret: Boolean
        },
        IsProceduralPropertyVisible: function(a0/*String*/) { 
            return CS.Call(4, 89, 14, false, this, a0); //Ret: Boolean
        },
        RebuildTextures: function() { 
            return CS.Call(4, 89, 15, false, this); //Ret: Void
        },
        RebuildTexturesImmediately: function() { 
            return CS.Call(4, 89, 16, false, this); //Ret: Void
        },
        SetProceduralBoolean: function(a0/*String*/, a1/*Boolean*/) { 
            return CS.Call(4, 89, 17, false, this, a0, a1); //Ret: Void
        },
        SetProceduralColor: function(a0/*String*/, a1/*Color*/) { 
            return CS.Call(4, 89, 18, false, this, a0, a1); //Ret: Void
        },
        SetProceduralEnum: function(a0/*String*/, a1/*Int32*/) { 
            return CS.Call(4, 89, 19, false, this, a0, a1); //Ret: Void
        },
        SetProceduralFloat: function(a0/*String*/, a1/*Single*/) { 
            return CS.Call(4, 89, 20, false, this, a0, a1); //Ret: Void
        },
        SetProceduralTexture: function(a0/*String*/, a1/*Texture2D*/) { 
            return CS.Call(4, 89, 21, false, this, a0, a1); //Ret: Void
        },
        SetProceduralVector: function(a0/*String*/, a1/*Vector4*/) { 
            return CS.Call(4, 89, 22, false, this, a0, a1); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$ProceduralMaterial);

// UnityEngine.ProceduralTexture
var UnityEngine$ProceduralTexture = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.ProceduralTexture",
    Kind: "Class",
    baseTypeName: "UnityEngine.Texture",
    definition: {
        ctor: function() { CS.Call(5, 90, 0, true, this); },
        get_hasAlpha: function() { return CS.Call(2, 90, 0, false, this); },
        set_hasAlpha: function(v) { return CS.Call(3, 90, 0, false, this, v); },
        get_format: function() { return CS.Call(2, 90, 1, false, this); },
        set_format: function(v) { return CS.Call(3, 90, 1, false, this, v); },
        GetPixels32: function(a0/*Int32*/, a1/*Int32*/, a2/*Int32*/, a3/*Int32*/) { 
            return CS.Call(4, 90, 0, false, this, a0, a1, a2, a3); //Ret: Color32[]
        },
        GetProceduralOutputType: function() { 
            return CS.Call(4, 90, 1, false, this); //Ret: ProceduralOutputType
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$ProceduralTexture);

// UnityEngine.Sprite
var UnityEngine$Sprite = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Sprite",
    Kind: "Class",
    baseTypeName: "UnityEngine.Object",
    staticDefinition: {
        Create$$Texture2D$$Rect$$Vector2$$Single$$UInt32$$SpriteMeshType$$Vector4: function(a0/*Texture2D*/, a1/*Rect*/, a2/*Vector2*/, a3/*Single*/, a4/*UInt32*/, a5/*SpriteMeshType*/, a6/*Vector4*/) { 
            return CS.Call(4, 91, 1, true, a0, a1, a2, a3, a4, a5, a6); //Ret: Sprite
        },
        Create$$Texture2D$$Rect$$Vector2$$Single$$UInt32$$SpriteMeshType: function(a0/*Texture2D*/, a1/*Rect*/, a2/*Vector2*/, a3/*Single*/, a4/*UInt32*/, a5/*SpriteMeshType*/) { 
            return CS.Call(4, 91, 2, true, a0, a1, a2, a3, a4, a5); //Ret: Sprite
        },
        Create$$Texture2D$$Rect$$Vector2$$Single$$UInt32: function(a0/*Texture2D*/, a1/*Rect*/, a2/*Vector2*/, a3/*Single*/, a4/*UInt32*/) { 
            return CS.Call(4, 91, 3, true, a0, a1, a2, a3, a4); //Ret: Sprite
        },
        Create$$Texture2D$$Rect$$Vector2$$Single: function(a0/*Texture2D*/, a1/*Rect*/, a2/*Vector2*/, a3/*Single*/) { 
            return CS.Call(4, 91, 4, true, a0, a1, a2, a3); //Ret: Sprite
        },
        Create$$Texture2D$$Rect$$Vector2: function(a0/*Texture2D*/, a1/*Rect*/, a2/*Vector2*/) { 
            return CS.Call(4, 91, 5, true, a0, a1, a2); //Ret: Sprite
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 91, 0, true, this); },
        get_bounds: function() { return CS.Call(2, 91, 0, false, this); },
        set_bounds: function(v) { return CS.Call(3, 91, 0, false, this, v); },
        get_rect: function() { return CS.Call(2, 91, 1, false, this); },
        set_rect: function(v) { return CS.Call(3, 91, 1, false, this, v); },
        get_pixelsPerUnit: function() { return CS.Call(2, 91, 2, false, this); },
        set_pixelsPerUnit: function(v) { return CS.Call(3, 91, 2, false, this, v); },
        get_texture: function() { return CS.Call(2, 91, 3, false, this); },
        set_texture: function(v) { return CS.Call(3, 91, 3, false, this, v); },
        get_associatedAlphaSplitTexture: function() { return CS.Call(2, 91, 4, false, this); },
        set_associatedAlphaSplitTexture: function(v) { return CS.Call(3, 91, 4, false, this, v); },
        get_textureRect: function() { return CS.Call(2, 91, 5, false, this); },
        set_textureRect: function(v) { return CS.Call(3, 91, 5, false, this, v); },
        get_textureRectOffset: function() { return CS.Call(2, 91, 6, false, this); },
        set_textureRectOffset: function(v) { return CS.Call(3, 91, 6, false, this, v); },
        get_packed: function() { return CS.Call(2, 91, 7, false, this); },
        set_packed: function(v) { return CS.Call(3, 91, 7, false, this, v); },
        get_packingMode: function() { return CS.Call(2, 91, 8, false, this); },
        set_packingMode: function(v) { return CS.Call(3, 91, 8, false, this, v); },
        get_packingRotation: function() { return CS.Call(2, 91, 9, false, this); },
        set_packingRotation: function(v) { return CS.Call(3, 91, 9, false, this, v); },
        get_pivot: function() { return CS.Call(2, 91, 10, false, this); },
        set_pivot: function(v) { return CS.Call(3, 91, 10, false, this, v); },
        get_border: function() { return CS.Call(2, 91, 11, false, this); },
        set_border: function(v) { return CS.Call(3, 91, 11, false, this, v); },
        get_vertices: function() { return CS.Call(2, 91, 12, false, this); },
        set_vertices: function(v) { return CS.Call(3, 91, 12, false, this, v); },
        get_triangles: function() { return CS.Call(2, 91, 13, false, this); },
        set_triangles: function(v) { return CS.Call(3, 91, 13, false, this, v); },
        get_uv: function() { return CS.Call(2, 91, 14, false, this); },
        set_uv: function(v) { return CS.Call(3, 91, 14, false, this, v); },
        OverrideGeometry: function(a0/*Vector2[]*/, a1/*UInt16[]*/) { 
            return CS.Call(4, 91, 0, false, this, a0, a1); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Sprite);

// UnityEngine.SpriteRenderer
var UnityEngine$SpriteRenderer = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.SpriteRenderer",
    Kind: "Class",
    baseTypeName: "UnityEngine.Renderer",
    definition: {
        ctor: function() { CS.Call(5, 92, 0, true, this); },
        get_sprite: function() { return CS.Call(2, 92, 0, false, this); },
        set_sprite: function(v) { return CS.Call(3, 92, 0, false, this, v); },
        get_color: function() { return CS.Call(2, 92, 1, false, this); },
        set_color: function(v) { return CS.Call(3, 92, 1, false, this, v); },
        get_flipX: function() { return CS.Call(2, 92, 2, false, this); },
        set_flipX: function(v) { return CS.Call(3, 92, 2, false, this, v); },
        get_flipY: function() { return CS.Call(2, 92, 3, false, this); },
        set_flipY: function(v) { return CS.Call(3, 92, 3, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$SpriteRenderer);

// UnityEngine.Hash128
var UnityEngine$Hash128 = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Hash128",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    staticDefinition: {
        op_Equality: function(a0/*Hash128*/, a1/*Hash128*/) { 
            return CS.Call(4, 93, 3, true, a0, a1); //Ret: Boolean
        },
        op_Inequality: function(a0/*Hash128*/, a1/*Hash128*/) { 
            return CS.Call(4, 93, 4, true, a0, a1); //Ret: Boolean
        },
        Parse: function(a0/*String*/) { 
            return CS.Call(4, 93, 5, true, a0); //Ret: Hash128
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 93, 0, true, this); },
        ctor$$UInt32$$UInt32$$UInt32$$UInt32: function(a0, a1, a2, a3) { CS.Call(5, 93, 1, true, this, a0, a1, a2, a3); },
        get_isValid: function() { return CS.Call(2, 93, 0, false, this); },
        set_isValid: function(v) { return CS.Call(3, 93, 0, false, this, v); },
        Equals: function(a0/*Object*/) { 
            return CS.Call(4, 93, 0, false, this, a0); //Ret: Boolean
        },
        GetHashCode: function() { 
            return CS.Call(4, 93, 1, false, this); //Ret: Int32
        },
        toString: function() { 
            return CS.Call(4, 93, 2, false, this); //Ret: String
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Hash128);

// UnityEngine.WWW
var UnityEngine$WWW = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.WWW",
    Kind: "Class",
    baseTypeName: "System.Object",
    interfaceNames: ["System.IDisposable"],
    staticDefinition: {
        EscapeURL$$String$$Encoding: function(a0/*String*/, a1/*Encoding*/) { 
            return CS.Call(4, 94, 9, true, a0, a1); //Ret: String
        },
        EscapeURL$$String: function(a0/*String*/) { 
            return CS.Call(4, 94, 10, true, a0); //Ret: String
        },
        LoadFromCacheOrDownload$$String$$Int32$$UInt32: function(a0/*String*/, a1/*Int32*/, a2/*UInt32*/) { 
            return CS.Call(4, 94, 11, true, a0, a1, a2); //Ret: WWW
        },
        LoadFromCacheOrDownload$$String$$Hash128$$UInt32: function(a0/*String*/, a1/*Hash128*/, a2/*UInt32*/) { 
            return CS.Call(4, 94, 12, true, a0, a1, a2); //Ret: WWW
        },
        LoadFromCacheOrDownload$$String$$Hash128: function(a0/*String*/, a1/*Hash128*/) { 
            return CS.Call(4, 94, 13, true, a0, a1); //Ret: WWW
        },
        LoadFromCacheOrDownload$$String$$Int32: function(a0/*String*/, a1/*Int32*/) { 
            return CS.Call(4, 94, 14, true, a0, a1); //Ret: WWW
        },
        UnEscapeURL$$String$$Encoding: function(a0/*String*/, a1/*Encoding*/) { 
            return CS.Call(4, 94, 15, true, a0, a1); //Ret: String
        },
        UnEscapeURL$$String: function(a0/*String*/) { 
            return CS.Call(4, 94, 16, true, a0); //Ret: String
        },
    },
    definition: {
        ctor$$String: function(a0) { CS.Call(5, 94, 0, true, this, a0); },
        ctor$$String$$WWWForm: function(a0, a1) { CS.Call(5, 94, 1, true, this, a0, a1); },
        ctor$$String$$Byte$Array: function(a0, a1) { CS.Call(5, 94, 2, true, this, a0, a1); },
        ctor$$String$$Byte$Array$$Dictionary$2$String$String: function(a0, a1, a2) { CS.Call(5, 94, 3, true, this, a0, a1, a2); },
        get_responseHeaders: function() { return CS.Call(2, 94, 0, false, this); },
        set_responseHeaders: function(v) { return CS.Call(3, 94, 0, false, this, v); },
        get_text: function() { return CS.Call(2, 94, 1, false, this); },
        set_text: function(v) { return CS.Call(3, 94, 1, false, this, v); },
        get_bytes: function() { return CS.Call(2, 94, 2, false, this); },
        set_bytes: function(v) { return CS.Call(3, 94, 2, false, this, v); },
        get_size: function() { return CS.Call(2, 94, 3, false, this); },
        set_size: function(v) { return CS.Call(3, 94, 3, false, this, v); },
        get_error: function() { return CS.Call(2, 94, 4, false, this); },
        set_error: function(v) { return CS.Call(3, 94, 4, false, this, v); },
        get_texture: function() { return CS.Call(2, 94, 5, false, this); },
        set_texture: function(v) { return CS.Call(3, 94, 5, false, this, v); },
        get_textureNonReadable: function() { return CS.Call(2, 94, 6, false, this); },
        set_textureNonReadable: function(v) { return CS.Call(3, 94, 6, false, this, v); },
        get_audioClip: function() { return CS.Call(2, 94, 7, false, this); },
        set_audioClip: function(v) { return CS.Call(3, 94, 7, false, this, v); },
        get_isDone: function() { return CS.Call(2, 94, 8, false, this); },
        set_isDone: function(v) { return CS.Call(3, 94, 8, false, this, v); },
        get_progress: function() { return CS.Call(2, 94, 9, false, this); },
        set_progress: function(v) { return CS.Call(3, 94, 9, false, this, v); },
        get_uploadProgress: function() { return CS.Call(2, 94, 10, false, this); },
        set_uploadProgress: function(v) { return CS.Call(3, 94, 10, false, this, v); },
        get_bytesDownloaded: function() { return CS.Call(2, 94, 11, false, this); },
        set_bytesDownloaded: function(v) { return CS.Call(3, 94, 11, false, this, v); },
        get_url: function() { return CS.Call(2, 94, 12, false, this); },
        set_url: function(v) { return CS.Call(3, 94, 12, false, this, v); },
        get_assetBundle: function() { return CS.Call(2, 94, 13, false, this); },
        set_assetBundle: function(v) { return CS.Call(3, 94, 13, false, this, v); },
        get_threadPriority: function() { return CS.Call(2, 94, 14, false, this); },
        set_threadPriority: function(v) { return CS.Call(3, 94, 14, false, this, v); },
        Dispose: function() { 
            return CS.Call(4, 94, 0, false, this); //Ret: Void
        },
        GetAudioClip$$Boolean$$Boolean$$AudioType: function(a0/*Boolean*/, a1/*Boolean*/, a2/*AudioType*/) { 
            return CS.Call(4, 94, 1, false, this, a0, a1, a2); //Ret: AudioClip
        },
        GetAudioClip$$Boolean$$Boolean: function(a0/*Boolean*/, a1/*Boolean*/) { 
            return CS.Call(4, 94, 2, false, this, a0, a1); //Ret: AudioClip
        },
        GetAudioClip$$Boolean: function(a0/*Boolean*/) { 
            return CS.Call(4, 94, 3, false, this, a0); //Ret: AudioClip
        },
        GetAudioClipCompressed$$Boolean$$AudioType: function(a0/*Boolean*/, a1/*AudioType*/) { 
            return CS.Call(4, 94, 4, false, this, a0, a1); //Ret: AudioClip
        },
        GetAudioClipCompressed$$Boolean: function(a0/*Boolean*/) { 
            return CS.Call(4, 94, 5, false, this, a0); //Ret: AudioClip
        },
        GetAudioClipCompressed: function() { 
            return CS.Call(4, 94, 6, false, this); //Ret: AudioClip
        },
        InitWWW: function(a0/*String*/, a1/*Byte[]*/, a2/*String[]*/) { 
            return CS.Call(4, 94, 7, false, this, a0, a1, a2); //Ret: Void
        },
        LoadImageIntoTexture: function(a0/*Texture2D*/) { 
            return CS.Call(4, 94, 8, false, this, a0); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$WWW);

// UnityEngine.WWWForm
var UnityEngine$WWWForm = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.WWWForm",
    Kind: "Class",
    baseTypeName: "System.Object",
    definition: {
        ctor: function() { CS.Call(5, 95, 0, true, this); },
        get_headers: function() { return CS.Call(2, 95, 0, false, this); },
        set_headers: function(v) { return CS.Call(3, 95, 0, false, this, v); },
        get_data: function() { return CS.Call(2, 95, 1, false, this); },
        set_data: function(v) { return CS.Call(3, 95, 1, false, this, v); },
        AddBinaryData$$String$$Byte$Array$$String$$String: function(a0/*String*/, a1/*Byte[]*/, a2/*String*/, a3/*String*/) { 
            return CS.Call(4, 95, 0, false, this, a0, a1, a2, a3); //Ret: Void
        },
        AddBinaryData$$String$$Byte$Array$$String: function(a0/*String*/, a1/*Byte[]*/, a2/*String*/) { 
            return CS.Call(4, 95, 1, false, this, a0, a1, a2); //Ret: Void
        },
        AddBinaryData$$String$$Byte$Array: function(a0/*String*/, a1/*Byte[]*/) { 
            return CS.Call(4, 95, 2, false, this, a0, a1); //Ret: Void
        },
        AddField$$String$$String$$Encoding: function(a0/*String*/, a1/*String*/, a2/*Encoding*/) { 
            return CS.Call(4, 95, 3, false, this, a0, a1, a2); //Ret: Void
        },
        AddField$$String$$String: function(a0/*String*/, a1/*String*/) { 
            return CS.Call(4, 95, 4, false, this, a0, a1); //Ret: Void
        },
        AddField$$String$$Int32: function(a0/*String*/, a1/*Int32*/) { 
            return CS.Call(4, 95, 5, false, this, a0, a1); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$WWWForm);

// UnityEngine.UnityEventQueueSystem
var UnityEngine$UnityEventQueueSystem = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.UnityEventQueueSystem",
    Kind: "Class",
    baseTypeName: "System.Object",
    staticDefinition: {
        GenerateEventIdForPayload: function(a0/*String*/) { 
            return CS.Call(4, 96, 0, true, a0); //Ret: String
        },
        GetGlobalEventQueue: function() { 
            return CS.Call(4, 96, 1, true); //Ret: IntPtr
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 96, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$UnityEventQueueSystem);

// UnityEngine.ColorUtility
var UnityEngine$ColorUtility = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.ColorUtility",
    Kind: "Class",
    baseTypeName: "System.Object",
    staticDefinition: {
        ToHtmlStringRGB: function(a0/*Color*/) { 
            return CS.Call(4, 97, 0, true, a0); //Ret: String
        },
        ToHtmlStringRGBA: function(a0/*Color*/) { 
            return CS.Call(4, 97, 1, true, a0); //Ret: String
        },
        TryParseHtmlString: function(a0/*String*/, a1/*Color&*/) { 
            return CS.Call(4, 97, 2, true, a0, a1); //Ret: Boolean
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 97, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$ColorUtility);

// UnityEngine.AsyncOperation
var UnityEngine$AsyncOperation = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.AsyncOperation",
    Kind: "Class",
    baseTypeName: "UnityEngine.YieldInstruction",
    definition: {
        ctor: function() { CS.Call(5, 98, 0, true, this); },
        get_isDone: function() { return CS.Call(2, 98, 0, false, this); },
        set_isDone: function(v) { return CS.Call(3, 98, 0, false, this, v); },
        get_progress: function() { return CS.Call(2, 98, 1, false, this); },
        set_progress: function(v) { return CS.Call(3, 98, 1, false, this, v); },
        get_priority: function() { return CS.Call(2, 98, 2, false, this); },
        set_priority: function(v) { return CS.Call(3, 98, 2, false, this, v); },
        get_allowSceneActivation: function() { return CS.Call(2, 98, 3, false, this); },
        set_allowSceneActivation: function(v) { return CS.Call(3, 98, 3, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$AsyncOperation);

// UnityEngine.Application
var UnityEngine$Application = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Application",
    Kind: "Class",
    baseTypeName: "System.Object",
    staticDefinition: {
        get_streamedBytes: function() { return CS.Call(2, 99, 0, true); },
        set_streamedBytes: function(v) { return CS.Call(3, 99, 0, true, v); },
        get_isPlaying: function() { return CS.Call(2, 99, 1, true); },
        set_isPlaying: function(v) { return CS.Call(3, 99, 1, true, v); },
        get_isEditor: function() { return CS.Call(2, 99, 2, true); },
        set_isEditor: function(v) { return CS.Call(3, 99, 2, true, v); },
        get_isWebPlayer: function() { return CS.Call(2, 99, 3, true); },
        set_isWebPlayer: function(v) { return CS.Call(3, 99, 3, true, v); },
        get_platform: function() { return CS.Call(2, 99, 4, true); },
        set_platform: function(v) { return CS.Call(3, 99, 4, true, v); },
        get_isMobilePlatform: function() { return CS.Call(2, 99, 5, true); },
        set_isMobilePlatform: function(v) { return CS.Call(3, 99, 5, true, v); },
        get_isConsolePlatform: function() { return CS.Call(2, 99, 6, true); },
        set_isConsolePlatform: function(v) { return CS.Call(3, 99, 6, true, v); },
        get_runInBackground: function() { return CS.Call(2, 99, 7, true); },
        set_runInBackground: function(v) { return CS.Call(3, 99, 7, true, v); },
        get_dataPath: function() { return CS.Call(2, 99, 8, true); },
        set_dataPath: function(v) { return CS.Call(3, 99, 8, true, v); },
        get_streamingAssetsPath: function() { return CS.Call(2, 99, 9, true); },
        set_streamingAssetsPath: function(v) { return CS.Call(3, 99, 9, true, v); },
        get_persistentDataPath: function() { return CS.Call(2, 99, 10, true); },
        set_persistentDataPath: function(v) { return CS.Call(3, 99, 10, true, v); },
        get_temporaryCachePath: function() { return CS.Call(2, 99, 11, true); },
        set_temporaryCachePath: function(v) { return CS.Call(3, 99, 11, true, v); },
        get_srcValue: function() { return CS.Call(2, 99, 12, true); },
        set_srcValue: function(v) { return CS.Call(3, 99, 12, true, v); },
        get_absoluteURL: function() { return CS.Call(2, 99, 13, true); },
        set_absoluteURL: function(v) { return CS.Call(3, 99, 13, true, v); },
        get_unityVersion: function() { return CS.Call(2, 99, 14, true); },
        set_unityVersion: function(v) { return CS.Call(3, 99, 14, true, v); },
        get_version: function() { return CS.Call(2, 99, 15, true); },
        set_version: function(v) { return CS.Call(3, 99, 15, true, v); },
        get_bundleIdentifier: function() { return CS.Call(2, 99, 16, true); },
        set_bundleIdentifier: function(v) { return CS.Call(3, 99, 16, true, v); },
        get_installMode: function() { return CS.Call(2, 99, 17, true); },
        set_installMode: function(v) { return CS.Call(3, 99, 17, true, v); },
        get_sandboxType: function() { return CS.Call(2, 99, 18, true); },
        set_sandboxType: function(v) { return CS.Call(3, 99, 18, true, v); },
        get_productName: function() { return CS.Call(2, 99, 19, true); },
        set_productName: function(v) { return CS.Call(3, 99, 19, true, v); },
        get_companyName: function() { return CS.Call(2, 99, 20, true); },
        set_companyName: function(v) { return CS.Call(3, 99, 20, true, v); },
        get_cloudProjectId: function() { return CS.Call(2, 99, 21, true); },
        set_cloudProjectId: function(v) { return CS.Call(3, 99, 21, true, v); },
        get_webSecurityEnabled: function() { return CS.Call(2, 99, 22, true); },
        set_webSecurityEnabled: function(v) { return CS.Call(3, 99, 22, true, v); },
        get_webSecurityHostUrl: function() { return CS.Call(2, 99, 23, true); },
        set_webSecurityHostUrl: function(v) { return CS.Call(3, 99, 23, true, v); },
        get_targetFrameRate: function() { return CS.Call(2, 99, 24, true); },
        set_targetFrameRate: function(v) { return CS.Call(3, 99, 24, true, v); },
        get_systemLanguage: function() { return CS.Call(2, 99, 25, true); },
        set_systemLanguage: function(v) { return CS.Call(3, 99, 25, true, v); },
        get_backgroundLoadingPriority: function() { return CS.Call(2, 99, 26, true); },
        set_backgroundLoadingPriority: function(v) { return CS.Call(3, 99, 26, true, v); },
        get_internetReachability: function() { return CS.Call(2, 99, 27, true); },
        set_internetReachability: function(v) { return CS.Call(3, 99, 27, true, v); },
        get_genuine: function() { return CS.Call(2, 99, 28, true); },
        set_genuine: function(v) { return CS.Call(3, 99, 28, true, v); },
        get_genuineCheckAvailable: function() { return CS.Call(2, 99, 29, true); },
        set_genuineCheckAvailable: function(v) { return CS.Call(3, 99, 29, true, v); },
        get_isShowingSplashScreen: function() { return CS.Call(2, 99, 30, true); },
        set_isShowingSplashScreen: function(v) { return CS.Call(3, 99, 30, true, v); },
        add_logMessageReceived: function(a0/*LogCallback*/) { 
            return CS.Call(4, 99, 0, true, a0); //Ret: Void
        },
        add_logMessageReceivedThreaded: function(a0/*LogCallback*/) { 
            return CS.Call(4, 99, 1, true, a0); //Ret: Void
        },
        CancelQuit: function() { 
            return CS.Call(4, 99, 2, true); //Ret: Void
        },
        CanStreamedLevelBeLoaded$$Int32: function(a0/*Int32*/) { 
            return CS.Call(4, 99, 3, true, a0); //Ret: Boolean
        },
        CanStreamedLevelBeLoaded$$String: function(a0/*String*/) { 
            return CS.Call(4, 99, 4, true, a0); //Ret: Boolean
        },
        CaptureScreenshot$$String$$Int32: function(a0/*String*/, a1/*Int32*/) { 
            return CS.Call(4, 99, 5, true, a0, a1); //Ret: Void
        },
        CaptureScreenshot$$String: function(a0/*String*/) { 
            return CS.Call(4, 99, 6, true, a0); //Ret: Void
        },
        ExternalCall: function(a0/*String*/, a1/*Object[]*/) { 
            return CS.Call(4, 99, 7, true, a0, jsb_formatParamsArray(1, a1, arguments)); //Ret: Void
        },
        GetStackTraceLogType: function(a0/*LogType*/) { 
            return CS.Call(4, 99, 8, true, a0); //Ret: StackTraceLogType
        },
        GetStreamProgressForLevel$$Int32: function(a0/*Int32*/) { 
            return CS.Call(4, 99, 9, true, a0); //Ret: Single
        },
        GetStreamProgressForLevel$$String: function(a0/*String*/) { 
            return CS.Call(4, 99, 10, true, a0); //Ret: Single
        },
        HasProLicense: function() { 
            return CS.Call(4, 99, 11, true); //Ret: Boolean
        },
        HasUserAuthorization: function(a0/*UserAuthorization*/) { 
            return CS.Call(4, 99, 12, true, a0); //Ret: Boolean
        },
        OpenURL: function(a0/*String*/) { 
            return CS.Call(4, 99, 13, true, a0); //Ret: Void
        },
        Quit: function() { 
            return CS.Call(4, 99, 14, true); //Ret: Void
        },
        remove_logMessageReceived: function(a0/*LogCallback*/) { 
            return CS.Call(4, 99, 15, true, a0); //Ret: Void
        },
        remove_logMessageReceivedThreaded: function(a0/*LogCallback*/) { 
            return CS.Call(4, 99, 16, true, a0); //Ret: Void
        },
        RequestAdvertisingIdentifierAsync: function(a0/*AdvertisingIdentifierCallback*/) { 
            return CS.Call(4, 99, 17, true, a0); //Ret: Boolean
        },
        RequestUserAuthorization: function(a0/*UserAuthorization*/) { 
            return CS.Call(4, 99, 18, true, a0); //Ret: AsyncOperation
        },
        SetStackTraceLogType: function(a0/*LogType*/, a1/*StackTraceLogType*/) { 
            return CS.Call(4, 99, 19, true, a0, a1); //Ret: Void
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 99, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Application);

// UnityEngine.Behaviour
var UnityEngine$Behaviour = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Behaviour",
    Kind: "Class",
    baseTypeName: "UnityEngine.Component",
    definition: {
        ctor: function() { CS.Call(5, 100, 0, true, this); },
        get_enabled: function() { return CS.Call(2, 100, 0, false, this); },
        set_enabled: function(v) { return CS.Call(3, 100, 0, false, this, v); },
        get_isActiveAndEnabled: function() { return CS.Call(2, 100, 1, false, this); },
        set_isActiveAndEnabled: function(v) { return CS.Call(3, 100, 1, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Behaviour);

// UnityEngine.Camera
var UnityEngine$Camera = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Camera",
    Kind: "Class",
    baseTypeName: "UnityEngine.Behaviour",
    staticFields: {
        onPreCull: {
            get: function() { return CS.Call(0, 101, 0, true); }, 
            set: function(v) { return CS.Call(1, 101, 0, true, v); }
        },
        onPreRender: {
            get: function() { return CS.Call(0, 101, 1, true); }, 
            set: function(v) { return CS.Call(1, 101, 1, true, v); }
        },
        onPostRender: {
            get: function() { return CS.Call(0, 101, 2, true); }, 
            set: function(v) { return CS.Call(1, 101, 2, true, v); }
        },
    },
    staticDefinition: {
        get_main: function() { return CS.Call(2, 101, 33, true); },
        set_main: function(v) { return CS.Call(3, 101, 33, true, v); },
        get_current: function() { return CS.Call(2, 101, 34, true); },
        set_current: function(v) { return CS.Call(3, 101, 34, true, v); },
        get_allCameras: function() { return CS.Call(2, 101, 35, true); },
        set_allCameras: function(v) { return CS.Call(3, 101, 35, true, v); },
        get_allCamerasCount: function() { return CS.Call(2, 101, 36, true); },
        set_allCamerasCount: function(v) { return CS.Call(3, 101, 36, true, v); },
        GetAllCameras: function(a0/*Camera[]*/) { 
            return CS.Call(4, 101, 39, true, a0); //Ret: Int32
        },
        SetupCurrent: function(a0/*Camera*/) { 
            return CS.Call(4, 101, 40, true, a0); //Ret: Void
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 101, 0, true, this); },
        get_fieldOfView: function() { return CS.Call(2, 101, 0, false, this); },
        set_fieldOfView: function(v) { return CS.Call(3, 101, 0, false, this, v); },
        get_nearClipPlane: function() { return CS.Call(2, 101, 1, false, this); },
        set_nearClipPlane: function(v) { return CS.Call(3, 101, 1, false, this, v); },
        get_farClipPlane: function() { return CS.Call(2, 101, 2, false, this); },
        set_farClipPlane: function(v) { return CS.Call(3, 101, 2, false, this, v); },
        get_renderingPath: function() { return CS.Call(2, 101, 3, false, this); },
        set_renderingPath: function(v) { return CS.Call(3, 101, 3, false, this, v); },
        get_actualRenderingPath: function() { return CS.Call(2, 101, 4, false, this); },
        set_actualRenderingPath: function(v) { return CS.Call(3, 101, 4, false, this, v); },
        get_hdr: function() { return CS.Call(2, 101, 5, false, this); },
        set_hdr: function(v) { return CS.Call(3, 101, 5, false, this, v); },
        get_orthographicSize: function() { return CS.Call(2, 101, 6, false, this); },
        set_orthographicSize: function(v) { return CS.Call(3, 101, 6, false, this, v); },
        get_orthographic: function() { return CS.Call(2, 101, 7, false, this); },
        set_orthographic: function(v) { return CS.Call(3, 101, 7, false, this, v); },
        get_opaqueSortMode: function() { return CS.Call(2, 101, 8, false, this); },
        set_opaqueSortMode: function(v) { return CS.Call(3, 101, 8, false, this, v); },
        get_transparencySortMode: function() { return CS.Call(2, 101, 9, false, this); },
        set_transparencySortMode: function(v) { return CS.Call(3, 101, 9, false, this, v); },
        get_depth: function() { return CS.Call(2, 101, 10, false, this); },
        set_depth: function(v) { return CS.Call(3, 101, 10, false, this, v); },
        get_aspect: function() { return CS.Call(2, 101, 11, false, this); },
        set_aspect: function(v) { return CS.Call(3, 101, 11, false, this, v); },
        get_cullingMask: function() { return CS.Call(2, 101, 12, false, this); },
        set_cullingMask: function(v) { return CS.Call(3, 101, 12, false, this, v); },
        get_eventMask: function() { return CS.Call(2, 101, 13, false, this); },
        set_eventMask: function(v) { return CS.Call(3, 101, 13, false, this, v); },
        get_backgroundColor: function() { return CS.Call(2, 101, 14, false, this); },
        set_backgroundColor: function(v) { return CS.Call(3, 101, 14, false, this, v); },
        get_rect: function() { return CS.Call(2, 101, 15, false, this); },
        set_rect: function(v) { return CS.Call(3, 101, 15, false, this, v); },
        get_pixelRect: function() { return CS.Call(2, 101, 16, false, this); },
        set_pixelRect: function(v) { return CS.Call(3, 101, 16, false, this, v); },
        get_targetTexture: function() { return CS.Call(2, 101, 17, false, this); },
        set_targetTexture: function(v) { return CS.Call(3, 101, 17, false, this, v); },
        get_pixelWidth: function() { return CS.Call(2, 101, 18, false, this); },
        set_pixelWidth: function(v) { return CS.Call(3, 101, 18, false, this, v); },
        get_pixelHeight: function() { return CS.Call(2, 101, 19, false, this); },
        set_pixelHeight: function(v) { return CS.Call(3, 101, 19, false, this, v); },
        get_cameraToWorldMatrix: function() { return CS.Call(2, 101, 20, false, this); },
        set_cameraToWorldMatrix: function(v) { return CS.Call(3, 101, 20, false, this, v); },
        get_worldToCameraMatrix: function() { return CS.Call(2, 101, 21, false, this); },
        set_worldToCameraMatrix: function(v) { return CS.Call(3, 101, 21, false, this, v); },
        get_projectionMatrix: function() { return CS.Call(2, 101, 22, false, this); },
        set_projectionMatrix: function(v) { return CS.Call(3, 101, 22, false, this, v); },
        get_nonJitteredProjectionMatrix: function() { return CS.Call(2, 101, 23, false, this); },
        set_nonJitteredProjectionMatrix: function(v) { return CS.Call(3, 101, 23, false, this, v); },
        get_velocity: function() { return CS.Call(2, 101, 24, false, this); },
        set_velocity: function(v) { return CS.Call(3, 101, 24, false, this, v); },
        get_clearFlags: function() { return CS.Call(2, 101, 25, false, this); },
        set_clearFlags: function(v) { return CS.Call(3, 101, 25, false, this, v); },
        get_stereoEnabled: function() { return CS.Call(2, 101, 26, false, this); },
        set_stereoEnabled: function(v) { return CS.Call(3, 101, 26, false, this, v); },
        get_stereoSeparation: function() { return CS.Call(2, 101, 27, false, this); },
        set_stereoSeparation: function(v) { return CS.Call(3, 101, 27, false, this, v); },
        get_stereoConvergence: function() { return CS.Call(2, 101, 28, false, this); },
        set_stereoConvergence: function(v) { return CS.Call(3, 101, 28, false, this, v); },
        get_cameraType: function() { return CS.Call(2, 101, 29, false, this); },
        set_cameraType: function(v) { return CS.Call(3, 101, 29, false, this, v); },
        get_stereoMirrorMode: function() { return CS.Call(2, 101, 30, false, this); },
        set_stereoMirrorMode: function(v) { return CS.Call(3, 101, 30, false, this, v); },
        get_stereoTargetEye: function() { return CS.Call(2, 101, 31, false, this); },
        set_stereoTargetEye: function(v) { return CS.Call(3, 101, 31, false, this, v); },
        get_targetDisplay: function() { return CS.Call(2, 101, 32, false, this); },
        set_targetDisplay: function(v) { return CS.Call(3, 101, 32, false, this, v); },
        get_useOcclusionCulling: function() { return CS.Call(2, 101, 37, false, this); },
        set_useOcclusionCulling: function(v) { return CS.Call(3, 101, 37, false, this, v); },
        get_cullingMatrix: function() { return CS.Call(2, 101, 38, false, this); },
        set_cullingMatrix: function(v) { return CS.Call(3, 101, 38, false, this, v); },
        get_layerCullDistances: function() { return CS.Call(2, 101, 39, false, this); },
        set_layerCullDistances: function(v) { return CS.Call(3, 101, 39, false, this, v); },
        get_layerCullSpherical: function() { return CS.Call(2, 101, 40, false, this); },
        set_layerCullSpherical: function(v) { return CS.Call(3, 101, 40, false, this, v); },
        get_depthTextureMode: function() { return CS.Call(2, 101, 41, false, this); },
        set_depthTextureMode: function(v) { return CS.Call(3, 101, 41, false, this, v); },
        get_clearStencilAfterLightingPass: function() { return CS.Call(2, 101, 42, false, this); },
        set_clearStencilAfterLightingPass: function(v) { return CS.Call(3, 101, 42, false, this, v); },
        get_commandBufferCount: function() { return CS.Call(2, 101, 43, false, this); },
        set_commandBufferCount: function(v) { return CS.Call(3, 101, 43, false, this, v); },
        AddCommandBuffer: function(a0/*CameraEvent*/, a1/*CommandBuffer*/) { 
            return CS.Call(4, 101, 0, false, this, a0, a1); //Ret: Void
        },
        CalculateObliqueMatrix: function(a0/*Vector4*/) { 
            return CS.Call(4, 101, 1, false, this, a0); //Ret: Matrix4x4
        },
        CopyFrom: function(a0/*Camera*/) { 
            return CS.Call(4, 101, 2, false, this, a0); //Ret: Void
        },
        GetCommandBuffers: function(a0/*CameraEvent*/) { 
            return CS.Call(4, 101, 3, false, this, a0); //Ret: CommandBuffer[]
        },
        GetStereoProjectionMatrix: function(a0/*StereoscopicEye*/) { 
            return CS.Call(4, 101, 4, false, this, a0); //Ret: Matrix4x4
        },
        GetStereoViewMatrix: function(a0/*StereoscopicEye*/) { 
            return CS.Call(4, 101, 5, false, this, a0); //Ret: Matrix4x4
        },
        RemoveAllCommandBuffers: function() { 
            return CS.Call(4, 101, 6, false, this); //Ret: Void
        },
        RemoveCommandBuffer: function(a0/*CameraEvent*/, a1/*CommandBuffer*/) { 
            return CS.Call(4, 101, 7, false, this, a0, a1); //Ret: Void
        },
        RemoveCommandBuffers: function(a0/*CameraEvent*/) { 
            return CS.Call(4, 101, 8, false, this, a0); //Ret: Void
        },
        Render: function() { 
            return CS.Call(4, 101, 9, false, this); //Ret: Void
        },
        RenderDontRestore: function() { 
            return CS.Call(4, 101, 10, false, this); //Ret: Void
        },
        RenderToCubemap$$Cubemap$$Int32: function(a0/*Cubemap*/, a1/*Int32*/) { 
            return CS.Call(4, 101, 11, false, this, a0, a1); //Ret: Boolean
        },
        RenderToCubemap$$RenderTexture$$Int32: function(a0/*RenderTexture*/, a1/*Int32*/) { 
            return CS.Call(4, 101, 12, false, this, a0, a1); //Ret: Boolean
        },
        RenderToCubemap$$RenderTexture: function(a0/*RenderTexture*/) { 
            return CS.Call(4, 101, 13, false, this, a0); //Ret: Boolean
        },
        RenderToCubemap$$Cubemap: function(a0/*Cubemap*/) { 
            return CS.Call(4, 101, 14, false, this, a0); //Ret: Boolean
        },
        RenderWithShader: function(a0/*Shader*/, a1/*String*/) { 
            return CS.Call(4, 101, 15, false, this, a0, a1); //Ret: Void
        },
        ResetAspect: function() { 
            return CS.Call(4, 101, 16, false, this); //Ret: Void
        },
        ResetCullingMatrix: function() { 
            return CS.Call(4, 101, 17, false, this); //Ret: Void
        },
        ResetFieldOfView: function() { 
            return CS.Call(4, 101, 18, false, this); //Ret: Void
        },
        ResetProjectionMatrix: function() { 
            return CS.Call(4, 101, 19, false, this); //Ret: Void
        },
        ResetReplacementShader: function() { 
            return CS.Call(4, 101, 20, false, this); //Ret: Void
        },
        ResetStereoProjectionMatrices: function() { 
            return CS.Call(4, 101, 21, false, this); //Ret: Void
        },
        ResetStereoViewMatrices: function() { 
            return CS.Call(4, 101, 22, false, this); //Ret: Void
        },
        ResetWorldToCameraMatrix: function() { 
            return CS.Call(4, 101, 23, false, this); //Ret: Void
        },
        ScreenPointToRay: function(a0/*Vector3*/) { 
            return CS.Call(4, 101, 24, false, this, a0); //Ret: Ray
        },
        ScreenToViewportPoint: function(a0/*Vector3*/) { 
            return CS.Call(4, 101, 25, false, this, a0); //Ret: Vector3
        },
        ScreenToWorldPoint: function(a0/*Vector3*/) { 
            return CS.Call(4, 101, 26, false, this, a0); //Ret: Vector3
        },
        SetReplacementShader: function(a0/*Shader*/, a1/*String*/) { 
            return CS.Call(4, 101, 27, false, this, a0, a1); //Ret: Void
        },
        SetStereoProjectionMatrices: function(a0/*Matrix4x4*/, a1/*Matrix4x4*/) { 
            return CS.Call(4, 101, 28, false, this, a0, a1); //Ret: Void
        },
        SetStereoProjectionMatrix: function(a0/*StereoscopicEye*/, a1/*Matrix4x4*/) { 
            return CS.Call(4, 101, 29, false, this, a0, a1); //Ret: Void
        },
        SetStereoViewMatrices: function(a0/*Matrix4x4*/, a1/*Matrix4x4*/) { 
            return CS.Call(4, 101, 30, false, this, a0, a1); //Ret: Void
        },
        SetStereoViewMatrix: function(a0/*StereoscopicEye*/, a1/*Matrix4x4*/) { 
            return CS.Call(4, 101, 31, false, this, a0, a1); //Ret: Void
        },
        SetTargetBuffers$$RenderBuffer$$RenderBuffer: function(a0/*RenderBuffer*/, a1/*RenderBuffer*/) { 
            return CS.Call(4, 101, 32, false, this, a0, a1); //Ret: Void
        },
        SetTargetBuffers$$RenderBuffer$Array$$RenderBuffer: function(a0/*RenderBuffer[]*/, a1/*RenderBuffer*/) { 
            return CS.Call(4, 101, 33, false, this, a0, a1); //Ret: Void
        },
        ViewportPointToRay: function(a0/*Vector3*/) { 
            return CS.Call(4, 101, 34, false, this, a0); //Ret: Ray
        },
        ViewportToScreenPoint: function(a0/*Vector3*/) { 
            return CS.Call(4, 101, 35, false, this, a0); //Ret: Vector3
        },
        ViewportToWorldPoint: function(a0/*Vector3*/) { 
            return CS.Call(4, 101, 36, false, this, a0); //Ret: Vector3
        },
        WorldToScreenPoint: function(a0/*Vector3*/) { 
            return CS.Call(4, 101, 37, false, this, a0); //Ret: Vector3
        },
        WorldToViewportPoint: function(a0/*Vector3*/) { 
            return CS.Call(4, 101, 38, false, this, a0); //Ret: Vector3
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Camera);

// UnityEngine.ComputeShader
var UnityEngine$ComputeShader = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.ComputeShader",
    Kind: "Class",
    baseTypeName: "UnityEngine.Object",
    definition: {
        ctor: function() { CS.Call(5, 102, 0, true, this); },
        Dispatch: function(a0/*Int32*/, a1/*Int32*/, a2/*Int32*/, a3/*Int32*/) { 
            return CS.Call(4, 102, 0, false, this, a0, a1, a2, a3); //Ret: Void
        },
        DispatchIndirect$$Int32$$ComputeBuffer$$UInt32: function(a0/*Int32*/, a1/*ComputeBuffer*/, a2/*UInt32*/) { 
            return CS.Call(4, 102, 1, false, this, a0, a1, a2); //Ret: Void
        },
        DispatchIndirect$$Int32$$ComputeBuffer: function(a0/*Int32*/, a1/*ComputeBuffer*/) { 
            return CS.Call(4, 102, 2, false, this, a0, a1); //Ret: Void
        },
        FindKernel: function(a0/*String*/) { 
            return CS.Call(4, 102, 3, false, this, a0); //Ret: Int32
        },
        GetKernelThreadGroupSizes: function(a0/*Int32*/, a1/*UInt32&*/, a2/*UInt32&*/, a3/*UInt32&*/) { 
            return CS.Call(4, 102, 4, false, this, a0, a1, a2, a3); //Ret: Void
        },
        HasKernel: function(a0/*String*/) { 
            return CS.Call(4, 102, 5, false, this, a0); //Ret: Boolean
        },
        SetBuffer: function(a0/*Int32*/, a1/*String*/, a2/*ComputeBuffer*/) { 
            return CS.Call(4, 102, 6, false, this, a0, a1, a2); //Ret: Void
        },
        SetFloat: function(a0/*String*/, a1/*Single*/) { 
            return CS.Call(4, 102, 7, false, this, a0, a1); //Ret: Void
        },
        SetFloats: function(a0/*String*/, a1/*Single[]*/) { 
            return CS.Call(4, 102, 8, false, this, a0, jsb_formatParamsArray(1, a1, arguments)); //Ret: Void
        },
        SetInt: function(a0/*String*/, a1/*Int32*/) { 
            return CS.Call(4, 102, 9, false, this, a0, a1); //Ret: Void
        },
        SetInts: function(a0/*String*/, a1/*Int32[]*/) { 
            return CS.Call(4, 102, 10, false, this, a0, jsb_formatParamsArray(1, a1, arguments)); //Ret: Void
        },
        SetTexture: function(a0/*Int32*/, a1/*String*/, a2/*Texture*/) { 
            return CS.Call(4, 102, 11, false, this, a0, a1, a2); //Ret: Void
        },
        SetTextureFromGlobal: function(a0/*Int32*/, a1/*String*/, a2/*String*/) { 
            return CS.Call(4, 102, 12, false, this, a0, a1, a2); //Ret: Void
        },
        SetVector: function(a0/*String*/, a1/*Vector4*/) { 
            return CS.Call(4, 102, 13, false, this, a0, a1); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$ComputeShader);

// UnityEngine.ComputeBuffer
var UnityEngine$ComputeBuffer = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.ComputeBuffer",
    Kind: "Class",
    baseTypeName: "System.Object",
    interfaceNames: ["System.IDisposable"],
    staticDefinition: {
        CopyCount: function(a0/*ComputeBuffer*/, a1/*ComputeBuffer*/, a2/*Int32*/) { 
            return CS.Call(4, 103, 5, true, a0, a1, a2); //Ret: Void
        },
    },
    definition: {
        ctor$$Int32$$Int32: function(a0, a1) { CS.Call(5, 103, 0, true, this, a0, a1); },
        ctor$$Int32$$Int32$$ComputeBufferType: function(a0, a1, a2) { CS.Call(5, 103, 1, true, this, a0, a1, a2); },
        get_count: function() { return CS.Call(2, 103, 0, false, this); },
        set_count: function(v) { return CS.Call(3, 103, 0, false, this, v); },
        get_stride: function() { return CS.Call(2, 103, 1, false, this); },
        set_stride: function(v) { return CS.Call(3, 103, 1, false, this, v); },
        Dispose: function() { 
            return CS.Call(4, 103, 0, false, this); //Ret: Void
        },
        GetData: function(a0/*Array*/) { 
            return CS.Call(4, 103, 1, false, this, a0); //Ret: Void
        },
        Release: function() { 
            return CS.Call(4, 103, 2, false, this); //Ret: Void
        },
        SetCounterValue: function(a0/*UInt32*/) { 
            return CS.Call(4, 103, 3, false, this, a0); //Ret: Void
        },
        SetData: function(a0/*Array*/) { 
            return CS.Call(4, 103, 4, false, this, a0); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$ComputeBuffer);

// UnityEngine.Debug
var UnityEngine$Debug = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Debug",
    Kind: "Class",
    baseTypeName: "System.Object",
    staticDefinition: {
        get_logger: function() { return CS.Call(2, 104, 0, true); },
        set_logger: function(v) { return CS.Call(3, 104, 0, true, v); },
        get_developerConsoleVisible: function() { return CS.Call(2, 104, 1, true); },
        set_developerConsoleVisible: function(v) { return CS.Call(3, 104, 1, true, v); },
        get_isDebugBuild: function() { return CS.Call(2, 104, 2, true); },
        set_isDebugBuild: function(v) { return CS.Call(3, 104, 2, true, v); },
        Assert$$Boolean$$String$$Object: function(a0/*Boolean*/, a1/*String*/, a2/*Object*/) { 
            return CS.Call(4, 104, 0, true, a0, a1, a2); //Ret: Void
        },
        Assert$$Boolean$$Object$$Object: function(a0/*Boolean*/, a1/*Object*/, a2/*Object*/) { 
            return CS.Call(4, 104, 1, true, a0, a1, a2); //Ret: Void
        },
        Assert$$Boolean$$Object: function(a0/*Boolean*/, a1/*Object*/) { 
            return CS.Call(4, 104, 2, true, a0, a1); //Ret: Void
        },
        Assert$$Boolean$$Object: function(a0/*Boolean*/, a1/*Object*/) { 
            return CS.Call(4, 104, 3, true, a0, a1); //Ret: Void
        },
        Assert$$Boolean$$String: function(a0/*Boolean*/, a1/*String*/) { 
            return CS.Call(4, 104, 4, true, a0, a1); //Ret: Void
        },
        Assert$$Boolean: function(a0/*Boolean*/) { 
            return CS.Call(4, 104, 5, true, a0); //Ret: Void
        },
        AssertFormat$$Boolean$$Object$$String$$Object$Array: function(a0/*Boolean*/, a1/*Object*/, a2/*String*/, a3/*Object[]*/) { 
            return CS.Call(4, 104, 6, true, a0, a1, a2, jsb_formatParamsArray(3, a3, arguments)); //Ret: Void
        },
        AssertFormat$$Boolean$$String$$Object$Array: function(a0/*Boolean*/, a1/*String*/, a2/*Object[]*/) { 
            return CS.Call(4, 104, 7, true, a0, a1, jsb_formatParamsArray(2, a2, arguments)); //Ret: Void
        },
        Break: function() { 
            return CS.Call(4, 104, 8, true); //Ret: Void
        },
        ClearDeveloperConsole: function() { 
            return CS.Call(4, 104, 9, true); //Ret: Void
        },
        DebugBreak: function() { 
            return CS.Call(4, 104, 10, true); //Ret: Void
        },
        DrawLine$$Vector3$$Vector3$$Color$$Single$$Boolean: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Color*/, a3/*Single*/, a4/*Boolean*/) { 
            return CS.Call(4, 104, 11, true, a0, a1, a2, a3, a4); //Ret: Void
        },
        DrawLine$$Vector3$$Vector3$$Color$$Single: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Color*/, a3/*Single*/) { 
            return CS.Call(4, 104, 12, true, a0, a1, a2, a3); //Ret: Void
        },
        DrawLine$$Vector3$$Vector3$$Color: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Color*/) { 
            return CS.Call(4, 104, 13, true, a0, a1, a2); //Ret: Void
        },
        DrawLine$$Vector3$$Vector3: function(a0/*Vector3*/, a1/*Vector3*/) { 
            return CS.Call(4, 104, 14, true, a0, a1); //Ret: Void
        },
        DrawRay$$Vector3$$Vector3$$Color$$Single$$Boolean: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Color*/, a3/*Single*/, a4/*Boolean*/) { 
            return CS.Call(4, 104, 15, true, a0, a1, a2, a3, a4); //Ret: Void
        },
        DrawRay$$Vector3$$Vector3$$Color$$Single: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Color*/, a3/*Single*/) { 
            return CS.Call(4, 104, 16, true, a0, a1, a2, a3); //Ret: Void
        },
        DrawRay$$Vector3$$Vector3$$Color: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Color*/) { 
            return CS.Call(4, 104, 17, true, a0, a1, a2); //Ret: Void
        },
        DrawRay$$Vector3$$Vector3: function(a0/*Vector3*/, a1/*Vector3*/) { 
            return CS.Call(4, 104, 18, true, a0, a1); //Ret: Void
        },
        Log$$Object$$Object: function(a0/*Object*/, a1/*Object*/) { 
            return CS.Call(4, 104, 19, true, a0, a1); //Ret: Void
        },
        Log$$Object: function(a0/*Object*/) { 
            return CS.Call(4, 104, 20, true, a0); //Ret: Void
        },
        LogAssertion$$Object$$Object: function(a0/*Object*/, a1/*Object*/) { 
            return CS.Call(4, 104, 21, true, a0, a1); //Ret: Void
        },
        LogAssertion$$Object: function(a0/*Object*/) { 
            return CS.Call(4, 104, 22, true, a0); //Ret: Void
        },
        LogAssertionFormat$$Object$$String$$Object$Array: function(a0/*Object*/, a1/*String*/, a2/*Object[]*/) { 
            return CS.Call(4, 104, 23, true, a0, a1, jsb_formatParamsArray(2, a2, arguments)); //Ret: Void
        },
        LogAssertionFormat$$String$$Object$Array: function(a0/*String*/, a1/*Object[]*/) { 
            return CS.Call(4, 104, 24, true, a0, jsb_formatParamsArray(1, a1, arguments)); //Ret: Void
        },
        LogError$$Object$$Object: function(a0/*Object*/, a1/*Object*/) { 
            return CS.Call(4, 104, 25, true, a0, a1); //Ret: Void
        },
        LogError$$Object: function(a0/*Object*/) { 
            return CS.Call(4, 104, 26, true, a0); //Ret: Void
        },
        LogErrorFormat$$Object$$String$$Object$Array: function(a0/*Object*/, a1/*String*/, a2/*Object[]*/) { 
            return CS.Call(4, 104, 27, true, a0, a1, jsb_formatParamsArray(2, a2, arguments)); //Ret: Void
        },
        LogErrorFormat$$String$$Object$Array: function(a0/*String*/, a1/*Object[]*/) { 
            return CS.Call(4, 104, 28, true, a0, jsb_formatParamsArray(1, a1, arguments)); //Ret: Void
        },
        LogException$$Exception$$Object: function(a0/*Exception*/, a1/*Object*/) { 
            return CS.Call(4, 104, 29, true, a0, a1); //Ret: Void
        },
        LogException$$Exception: function(a0/*Exception*/) { 
            return CS.Call(4, 104, 30, true, a0); //Ret: Void
        },
        LogFormat$$Object$$String$$Object$Array: function(a0/*Object*/, a1/*String*/, a2/*Object[]*/) { 
            return CS.Call(4, 104, 31, true, a0, a1, jsb_formatParamsArray(2, a2, arguments)); //Ret: Void
        },
        LogFormat$$String$$Object$Array: function(a0/*String*/, a1/*Object[]*/) { 
            return CS.Call(4, 104, 32, true, a0, jsb_formatParamsArray(1, a1, arguments)); //Ret: Void
        },
        LogWarning$$Object$$Object: function(a0/*Object*/, a1/*Object*/) { 
            return CS.Call(4, 104, 33, true, a0, a1); //Ret: Void
        },
        LogWarning$$Object: function(a0/*Object*/) { 
            return CS.Call(4, 104, 34, true, a0); //Ret: Void
        },
        LogWarningFormat$$Object$$String$$Object$Array: function(a0/*Object*/, a1/*String*/, a2/*Object[]*/) { 
            return CS.Call(4, 104, 35, true, a0, a1, jsb_formatParamsArray(2, a2, arguments)); //Ret: Void
        },
        LogWarningFormat$$String$$Object$Array: function(a0/*String*/, a1/*Object[]*/) { 
            return CS.Call(4, 104, 36, true, a0, jsb_formatParamsArray(1, a1, arguments)); //Ret: Void
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 104, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Debug);

// UnityEngine.Display
var UnityEngine$Display = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Display",
    Kind: "Class",
    baseTypeName: "System.Object",
    staticFields: {
        displays: {
            get: function() { return CS.Call(0, 105, 0, true); }, 
            set: function(v) { return CS.Call(1, 105, 0, true, v); }
        },
    },
    staticDefinition: {
        get_main: function() { return CS.Call(2, 105, 6, true); },
        set_main: function(v) { return CS.Call(3, 105, 6, true, v); },
        add_onDisplaysUpdated: function(a0/*DisplaysUpdatedDelegate*/) { 
            return CS.Call(4, 105, 4, true, a0); //Ret: Void
        },
        RelativeMouseAt: function(a0/*Vector3*/) { 
            return CS.Call(4, 105, 5, true, a0); //Ret: Vector3
        },
        remove_onDisplaysUpdated: function(a0/*DisplaysUpdatedDelegate*/) { 
            return CS.Call(4, 105, 6, true, a0); //Ret: Void
        },
    },
    definition: {
        get_renderingWidth: function() { return CS.Call(2, 105, 0, false, this); },
        set_renderingWidth: function(v) { return CS.Call(3, 105, 0, false, this, v); },
        get_renderingHeight: function() { return CS.Call(2, 105, 1, false, this); },
        set_renderingHeight: function(v) { return CS.Call(3, 105, 1, false, this, v); },
        get_systemWidth: function() { return CS.Call(2, 105, 2, false, this); },
        set_systemWidth: function(v) { return CS.Call(3, 105, 2, false, this, v); },
        get_systemHeight: function() { return CS.Call(2, 105, 3, false, this); },
        set_systemHeight: function(v) { return CS.Call(3, 105, 3, false, this, v); },
        get_colorBuffer: function() { return CS.Call(2, 105, 4, false, this); },
        set_colorBuffer: function(v) { return CS.Call(3, 105, 4, false, this, v); },
        get_depthBuffer: function() { return CS.Call(2, 105, 5, false, this); },
        set_depthBuffer: function(v) { return CS.Call(3, 105, 5, false, this, v); },
        Activate$$Int32$$Int32$$Int32: function(a0/*Int32*/, a1/*Int32*/, a2/*Int32*/) { 
            return CS.Call(4, 105, 0, false, this, a0, a1, a2); //Ret: Void
        },
        Activate: function() { 
            return CS.Call(4, 105, 1, false, this); //Ret: Void
        },
        SetParams: function(a0/*Int32*/, a1/*Int32*/, a2/*Int32*/, a3/*Int32*/) { 
            return CS.Call(4, 105, 2, false, this, a0, a1, a2, a3); //Ret: Void
        },
        SetRenderingResolution: function(a0/*Int32*/, a1/*Int32*/) { 
            return CS.Call(4, 105, 3, false, this, a0, a1); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Display);

// UnityEngine.MonoBehaviour
var UnityEngine$MonoBehaviour = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.MonoBehaviour",
    Kind: "Class",
    baseTypeName: "UnityEngine.Behaviour",
    staticDefinition: {
        print: function(a0/*Object*/) { 
            return CS.Call(4, 106, 14, true, a0); //Ret: Void
        },
    },
    definition: {
        get_useGUILayout: function() { return CS.Call(2, 106, 0, false, this); },
        set_useGUILayout: function(v) { return CS.Call(3, 106, 0, false, this, v); },
        CancelInvoke$$String: function(a0/*String*/) { 
            return CS.Call(4, 106, 0, false, this, a0); //Ret: Void
        },
        CancelInvoke: function() { 
            return CS.Call(4, 106, 1, false, this); //Ret: Void
        },
        Invoke: function(a0/*String*/, a1/*Single*/) { 
            return CS.Call(4, 106, 2, false, this, a0, a1); //Ret: Void
        },
        InvokeRepeating: function(a0/*String*/, a1/*Single*/, a2/*Single*/) { 
            return CS.Call(4, 106, 3, false, this, a0, a1, a2); //Ret: Void
        },
        IsInvoking$$String: function(a0/*String*/) { 
            return CS.Call(4, 106, 4, false, this, a0); //Ret: Boolean
        },
        IsInvoking: function() { 
            return CS.Call(4, 106, 5, false, this); //Ret: Boolean
        },
        StartCoroutine$$String$$Object: function(a0/*String*/, a1/*Object*/) { 
            return CS.Call(4, 106, 6, false, this, a0, a1); //Ret: Coroutine
        },
        StartCoroutine$$String: function(a0/*String*/) { 
            return CS.Call(4, 106, 7, false, this, a0); //Ret: Coroutine
        },
        StartCoroutine$$IEnumerator: function(a0/*IEnumerator*/) { 
            return CS.Call(4, 106, 8, false, this, a0); //Ret: Coroutine
        },
        StartCoroutine_Auto: function(a0/*IEnumerator*/) { 
            return CS.Call(4, 106, 9, false, this, a0); //Ret: Coroutine
        },
        StopAllCoroutines: function() { 
            return CS.Call(4, 106, 10, false, this); //Ret: Void
        },
        StopCoroutine$$Coroutine: function(a0/*Coroutine*/) { 
            return CS.Call(4, 106, 11, false, this, a0); //Ret: Void
        },
        StopCoroutine$$String: function(a0/*String*/) { 
            return CS.Call(4, 106, 12, false, this, a0); //Ret: Void
        },
        StopCoroutine$$IEnumerator: function(a0/*IEnumerator*/) { 
            return CS.Call(4, 106, 13, false, this, a0); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$MonoBehaviour);

// UnityEngine.Touch
var UnityEngine$Touch = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Touch",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    definition: {
        ctor: function() { CS.Call(5, 107, 0, true, this); },
        get_fingerId: function() { return CS.Call(2, 107, 0, false, this); },
        set_fingerId: function(v) { return CS.Call(3, 107, 0, false, this, v); },
        get_position: function() { return CS.Call(2, 107, 1, false, this); },
        set_position: function(v) { return CS.Call(3, 107, 1, false, this, v); },
        get_rawPosition: function() { return CS.Call(2, 107, 2, false, this); },
        set_rawPosition: function(v) { return CS.Call(3, 107, 2, false, this, v); },
        get_deltaPosition: function() { return CS.Call(2, 107, 3, false, this); },
        set_deltaPosition: function(v) { return CS.Call(3, 107, 3, false, this, v); },
        get_deltaTime: function() { return CS.Call(2, 107, 4, false, this); },
        set_deltaTime: function(v) { return CS.Call(3, 107, 4, false, this, v); },
        get_tapCount: function() { return CS.Call(2, 107, 5, false, this); },
        set_tapCount: function(v) { return CS.Call(3, 107, 5, false, this, v); },
        get_phase: function() { return CS.Call(2, 107, 6, false, this); },
        set_phase: function(v) { return CS.Call(3, 107, 6, false, this, v); },
        get_pressure: function() { return CS.Call(2, 107, 7, false, this); },
        set_pressure: function(v) { return CS.Call(3, 107, 7, false, this, v); },
        get_maximumPossiblePressure: function() { return CS.Call(2, 107, 8, false, this); },
        set_maximumPossiblePressure: function(v) { return CS.Call(3, 107, 8, false, this, v); },
        get_type: function() { return CS.Call(2, 107, 9, false, this); },
        set_type: function(v) { return CS.Call(3, 107, 9, false, this, v); },
        get_altitudeAngle: function() { return CS.Call(2, 107, 10, false, this); },
        set_altitudeAngle: function(v) { return CS.Call(3, 107, 10, false, this, v); },
        get_azimuthAngle: function() { return CS.Call(2, 107, 11, false, this); },
        set_azimuthAngle: function(v) { return CS.Call(3, 107, 11, false, this, v); },
        get_radius: function() { return CS.Call(2, 107, 12, false, this); },
        set_radius: function(v) { return CS.Call(3, 107, 12, false, this, v); },
        get_radiusVariance: function() { return CS.Call(2, 107, 13, false, this); },
        set_radiusVariance: function(v) { return CS.Call(3, 107, 13, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Touch);

// UnityEngine.AccelerationEvent
var UnityEngine$AccelerationEvent = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.AccelerationEvent",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    definition: {
        ctor: function() { CS.Call(5, 108, 0, true, this); },
        get_acceleration: function() { return CS.Call(2, 108, 0, false, this); },
        set_acceleration: function(v) { return CS.Call(3, 108, 0, false, this, v); },
        get_deltaTime: function() { return CS.Call(2, 108, 1, false, this); },
        set_deltaTime: function(v) { return CS.Call(3, 108, 1, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$AccelerationEvent);

// UnityEngine.Gyroscope
var UnityEngine$Gyroscope = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Gyroscope",
    Kind: "Class",
    baseTypeName: "System.Object",
    definition: {
        get_rotationRate: function() { return CS.Call(2, 109, 0, false, this); },
        set_rotationRate: function(v) { return CS.Call(3, 109, 0, false, this, v); },
        get_rotationRateUnbiased: function() { return CS.Call(2, 109, 1, false, this); },
        set_rotationRateUnbiased: function(v) { return CS.Call(3, 109, 1, false, this, v); },
        get_gravity: function() { return CS.Call(2, 109, 2, false, this); },
        set_gravity: function(v) { return CS.Call(3, 109, 2, false, this, v); },
        get_userAcceleration: function() { return CS.Call(2, 109, 3, false, this); },
        set_userAcceleration: function(v) { return CS.Call(3, 109, 3, false, this, v); },
        get_attitude: function() { return CS.Call(2, 109, 4, false, this); },
        set_attitude: function(v) { return CS.Call(3, 109, 4, false, this, v); },
        get_enabled: function() { return CS.Call(2, 109, 5, false, this); },
        set_enabled: function(v) { return CS.Call(3, 109, 5, false, this, v); },
        get_updateInterval: function() { return CS.Call(2, 109, 6, false, this); },
        set_updateInterval: function(v) { return CS.Call(3, 109, 6, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Gyroscope);

// UnityEngine.LocationInfo
var UnityEngine$LocationInfo = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.LocationInfo",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    definition: {
        ctor: function() { CS.Call(5, 110, 0, true, this); },
        get_latitude: function() { return CS.Call(2, 110, 0, false, this); },
        set_latitude: function(v) { return CS.Call(3, 110, 0, false, this, v); },
        get_longitude: function() { return CS.Call(2, 110, 1, false, this); },
        set_longitude: function(v) { return CS.Call(3, 110, 1, false, this, v); },
        get_altitude: function() { return CS.Call(2, 110, 2, false, this); },
        set_altitude: function(v) { return CS.Call(3, 110, 2, false, this, v); },
        get_horizontalAccuracy: function() { return CS.Call(2, 110, 3, false, this); },
        set_horizontalAccuracy: function(v) { return CS.Call(3, 110, 3, false, this, v); },
        get_verticalAccuracy: function() { return CS.Call(2, 110, 4, false, this); },
        set_verticalAccuracy: function(v) { return CS.Call(3, 110, 4, false, this, v); },
        get_timestamp: function() { return CS.Call(2, 110, 5, false, this); },
        set_timestamp: function(v) { return CS.Call(3, 110, 5, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$LocationInfo);

// UnityEngine.LocationService
var UnityEngine$LocationService = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.LocationService",
    Kind: "Class",
    baseTypeName: "System.Object",
    definition: {
        ctor: function() { CS.Call(5, 111, 0, true, this); },
        get_isEnabledByUser: function() { return CS.Call(2, 111, 0, false, this); },
        set_isEnabledByUser: function(v) { return CS.Call(3, 111, 0, false, this, v); },
        get_status: function() { return CS.Call(2, 111, 1, false, this); },
        set_status: function(v) { return CS.Call(3, 111, 1, false, this, v); },
        get_lastData: function() { return CS.Call(2, 111, 2, false, this); },
        set_lastData: function(v) { return CS.Call(3, 111, 2, false, this, v); },
        Start$$Single$$Single: function(a0/*Single*/, a1/*Single*/) { 
            return CS.Call(4, 111, 0, false, this, a0, a1); //Ret: Void
        },
        Start$$Single: function(a0/*Single*/) { 
            return CS.Call(4, 111, 1, false, this, a0); //Ret: Void
        },
        Start: function() { 
            return CS.Call(4, 111, 2, false, this); //Ret: Void
        },
        Stop: function() { 
            return CS.Call(4, 111, 3, false, this); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$LocationService);

// UnityEngine.Compass
var UnityEngine$Compass = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Compass",
    Kind: "Class",
    baseTypeName: "System.Object",
    definition: {
        ctor: function() { CS.Call(5, 112, 0, true, this); },
        get_magneticHeading: function() { return CS.Call(2, 112, 0, false, this); },
        set_magneticHeading: function(v) { return CS.Call(3, 112, 0, false, this, v); },
        get_trueHeading: function() { return CS.Call(2, 112, 1, false, this); },
        set_trueHeading: function(v) { return CS.Call(3, 112, 1, false, this, v); },
        get_headingAccuracy: function() { return CS.Call(2, 112, 2, false, this); },
        set_headingAccuracy: function(v) { return CS.Call(3, 112, 2, false, this, v); },
        get_rawVector: function() { return CS.Call(2, 112, 3, false, this); },
        set_rawVector: function(v) { return CS.Call(3, 112, 3, false, this, v); },
        get_timestamp: function() { return CS.Call(2, 112, 4, false, this); },
        set_timestamp: function(v) { return CS.Call(3, 112, 4, false, this, v); },
        get_enabled: function() { return CS.Call(2, 112, 5, false, this); },
        set_enabled: function(v) { return CS.Call(3, 112, 5, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Compass);

// UnityEngine.Input
var UnityEngine$Input = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Input",
    Kind: "Class",
    baseTypeName: "System.Object",
    staticDefinition: {
        get_compensateSensors: function() { return CS.Call(2, 113, 0, true); },
        set_compensateSensors: function(v) { return CS.Call(3, 113, 0, true, v); },
        get_gyro: function() { return CS.Call(2, 113, 1, true); },
        set_gyro: function(v) { return CS.Call(3, 113, 1, true, v); },
        get_mousePosition: function() { return CS.Call(2, 113, 2, true); },
        set_mousePosition: function(v) { return CS.Call(3, 113, 2, true, v); },
        get_mouseScrollDelta: function() { return CS.Call(2, 113, 3, true); },
        set_mouseScrollDelta: function(v) { return CS.Call(3, 113, 3, true, v); },
        get_mousePresent: function() { return CS.Call(2, 113, 4, true); },
        set_mousePresent: function(v) { return CS.Call(3, 113, 4, true, v); },
        get_simulateMouseWithTouches: function() { return CS.Call(2, 113, 5, true); },
        set_simulateMouseWithTouches: function(v) { return CS.Call(3, 113, 5, true, v); },
        get_anyKey: function() { return CS.Call(2, 113, 6, true); },
        set_anyKey: function(v) { return CS.Call(3, 113, 6, true, v); },
        get_anyKeyDown: function() { return CS.Call(2, 113, 7, true); },
        set_anyKeyDown: function(v) { return CS.Call(3, 113, 7, true, v); },
        get_inputString: function() { return CS.Call(2, 113, 8, true); },
        set_inputString: function(v) { return CS.Call(3, 113, 8, true, v); },
        get_acceleration: function() { return CS.Call(2, 113, 9, true); },
        set_acceleration: function(v) { return CS.Call(3, 113, 9, true, v); },
        get_accelerationEvents: function() { return CS.Call(2, 113, 10, true); },
        set_accelerationEvents: function(v) { return CS.Call(3, 113, 10, true, v); },
        get_accelerationEventCount: function() { return CS.Call(2, 113, 11, true); },
        set_accelerationEventCount: function(v) { return CS.Call(3, 113, 11, true, v); },
        get_touches: function() { return CS.Call(2, 113, 12, true); },
        set_touches: function(v) { return CS.Call(3, 113, 12, true, v); },
        get_touchCount: function() { return CS.Call(2, 113, 13, true); },
        set_touchCount: function(v) { return CS.Call(3, 113, 13, true, v); },
        get_touchPressureSupported: function() { return CS.Call(2, 113, 14, true); },
        set_touchPressureSupported: function(v) { return CS.Call(3, 113, 14, true, v); },
        get_stylusTouchSupported: function() { return CS.Call(2, 113, 15, true); },
        set_stylusTouchSupported: function(v) { return CS.Call(3, 113, 15, true, v); },
        get_touchSupported: function() { return CS.Call(2, 113, 16, true); },
        set_touchSupported: function(v) { return CS.Call(3, 113, 16, true, v); },
        get_multiTouchEnabled: function() { return CS.Call(2, 113, 17, true); },
        set_multiTouchEnabled: function(v) { return CS.Call(3, 113, 17, true, v); },
        get_location: function() { return CS.Call(2, 113, 18, true); },
        set_location: function(v) { return CS.Call(3, 113, 18, true, v); },
        get_compass: function() { return CS.Call(2, 113, 19, true); },
        set_compass: function(v) { return CS.Call(3, 113, 19, true, v); },
        get_deviceOrientation: function() { return CS.Call(2, 113, 20, true); },
        set_deviceOrientation: function(v) { return CS.Call(3, 113, 20, true, v); },
        get_imeCompositionMode: function() { return CS.Call(2, 113, 21, true); },
        set_imeCompositionMode: function(v) { return CS.Call(3, 113, 21, true, v); },
        get_compositionString: function() { return CS.Call(2, 113, 22, true); },
        set_compositionString: function(v) { return CS.Call(3, 113, 22, true, v); },
        get_imeIsSelected: function() { return CS.Call(2, 113, 23, true); },
        set_imeIsSelected: function(v) { return CS.Call(3, 113, 23, true, v); },
        get_compositionCursorPos: function() { return CS.Call(2, 113, 24, true); },
        set_compositionCursorPos: function(v) { return CS.Call(3, 113, 24, true, v); },
        get_backButtonLeavesApp: function() { return CS.Call(2, 113, 25, true); },
        set_backButtonLeavesApp: function(v) { return CS.Call(3, 113, 25, true, v); },
        GetAccelerationEvent: function(a0/*Int32*/) { 
            return CS.Call(4, 113, 0, true, a0); //Ret: AccelerationEvent
        },
        GetAxis: function(a0/*String*/) { 
            return CS.Call(4, 113, 1, true, a0); //Ret: Single
        },
        GetAxisRaw: function(a0/*String*/) { 
            return CS.Call(4, 113, 2, true, a0); //Ret: Single
        },
        GetButton: function(a0/*String*/) { 
            return CS.Call(4, 113, 3, true, a0); //Ret: Boolean
        },
        GetButtonDown: function(a0/*String*/) { 
            return CS.Call(4, 113, 4, true, a0); //Ret: Boolean
        },
        GetButtonUp: function(a0/*String*/) { 
            return CS.Call(4, 113, 5, true, a0); //Ret: Boolean
        },
        GetJoystickNames: function() { 
            return CS.Call(4, 113, 6, true); //Ret: String[]
        },
        GetKey$$String: function(a0/*String*/) { 
            return CS.Call(4, 113, 7, true, a0); //Ret: Boolean
        },
        GetKey$$KeyCode: function(a0/*KeyCode*/) { 
            return CS.Call(4, 113, 8, true, a0); //Ret: Boolean
        },
        GetKeyDown$$KeyCode: function(a0/*KeyCode*/) { 
            return CS.Call(4, 113, 9, true, a0); //Ret: Boolean
        },
        GetKeyDown$$String: function(a0/*String*/) { 
            return CS.Call(4, 113, 10, true, a0); //Ret: Boolean
        },
        GetKeyUp$$String: function(a0/*String*/) { 
            return CS.Call(4, 113, 11, true, a0); //Ret: Boolean
        },
        GetKeyUp$$KeyCode: function(a0/*KeyCode*/) { 
            return CS.Call(4, 113, 12, true, a0); //Ret: Boolean
        },
        GetMouseButton: function(a0/*Int32*/) { 
            return CS.Call(4, 113, 13, true, a0); //Ret: Boolean
        },
        GetMouseButtonDown: function(a0/*Int32*/) { 
            return CS.Call(4, 113, 14, true, a0); //Ret: Boolean
        },
        GetMouseButtonUp: function(a0/*Int32*/) { 
            return CS.Call(4, 113, 15, true, a0); //Ret: Boolean
        },
        GetTouch: function(a0/*Int32*/) { 
            return CS.Call(4, 113, 16, true, a0); //Ret: Touch
        },
        ResetInputAxes: function() { 
            return CS.Call(4, 113, 17, true); //Ret: Void
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 113, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Input);

// UnityEngine.Object
var UnityEngine$Object = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Object",
    Kind: "Class",
    baseTypeName: "System.Object",
    staticDefinition: {
        Destroy$$Object$$Single: function(a0/*Object*/, a1/*Single*/) { 
            return CS.Call(4, 114, 4, true, a0, a1); //Ret: Void
        },
        Destroy$$Object: function(a0/*Object*/) { 
            return CS.Call(4, 114, 5, true, a0); //Ret: Void
        },
        DestroyImmediate$$Object$$Boolean: function(a0/*Object*/, a1/*Boolean*/) { 
            return CS.Call(4, 114, 6, true, a0, a1); //Ret: Void
        },
        DestroyImmediate$$Object: function(a0/*Object*/) { 
            return CS.Call(4, 114, 7, true, a0); //Ret: Void
        },
        DestroyObject$$Object$$Single: function(a0/*Object*/, a1/*Single*/) { 
            return CS.Call(4, 114, 8, true, a0, a1); //Ret: Void
        },
        DestroyObject$$Object: function(a0/*Object*/) { 
            return CS.Call(4, 114, 9, true, a0); //Ret: Void
        },
        DontDestroyOnLoad: function(a0/*Object*/) { 
            return CS.Call(4, 114, 10, true, a0); //Ret: Void
        },
        FindObjectOfType$$Type: function(a0/*Type*/) { 
            return CS.Call(4, 114, 11, true, a0.get_FullName()); //Ret: Object
        },
        FindObjectOfType$1: function(t0) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 114, 12, true, native_t0); //Ret: T
        },
        FindObjectsOfType$$Type: function(a0/*Type*/) { 
            return CS.Call(4, 114, 13, true, a0.get_FullName()); //Ret: Object[]
        },
        FindObjectsOfType$1: function(t0) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 114, 14, true, native_t0); //Ret: T[]
        },
        Instantiate$$Object$$Vector3$$Quaternion$$Transform: function(a0/*Object*/, a1/*Vector3*/, a2/*Quaternion*/, a3/*Transform*/) { 
            return CS.Call(4, 114, 15, true, a0, a1, a2, a3); //Ret: Object
        },
        Instantiate$$Object$$Transform$$Boolean: function(a0/*Object*/, a1/*Transform*/, a2/*Boolean*/) { 
            return CS.Call(4, 114, 16, true, a0, a1, a2); //Ret: Object
        },
        Instantiate$$Object$$Vector3$$Quaternion: function(a0/*Object*/, a1/*Vector3*/, a2/*Quaternion*/) { 
            return CS.Call(4, 114, 17, true, a0, a1, a2); //Ret: Object
        },
        Instantiate$$Object$$Transform: function(a0/*Object*/, a1/*Transform*/) { 
            return CS.Call(4, 114, 18, true, a0, a1); //Ret: Object
        },
        Instantiate$1$$T: function(t0, a0/*T*/) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 114, 19, true, native_t0, a0); //Ret: T
        },
        Instantiate$$Object: function(a0/*Object*/) { 
            return CS.Call(4, 114, 20, true, a0); //Ret: Object
        },
        op_Equality: function(a0/*Object*/, a1/*Object*/) { 
            return CS.Call(4, 114, 21, true, a0, a1); //Ret: Boolean
        },
        op_Implicit: function(a0/*Object*/) { 
            return CS.Call(4, 114, 22, true, a0); //Ret: Boolean
        },
        op_Inequality: function(a0/*Object*/, a1/*Object*/) { 
            return CS.Call(4, 114, 23, true, a0, a1); //Ret: Boolean
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 114, 0, true, this); },
        get_name: function() { return CS.Call(2, 114, 0, false, this); },
        set_name: function(v) { return CS.Call(3, 114, 0, false, this, v); },
        get_hideFlags: function() { return CS.Call(2, 114, 1, false, this); },
        set_hideFlags: function(v) { return CS.Call(3, 114, 1, false, this, v); },
        Equals: function(a0/*Object*/) { 
            return CS.Call(4, 114, 0, false, this, a0); //Ret: Boolean
        },
        GetHashCode: function() { 
            return CS.Call(4, 114, 1, false, this); //Ret: Int32
        },
        GetInstanceID: function() { 
            return CS.Call(4, 114, 2, false, this); //Ret: Int32
        },
        toString: function() { 
            return CS.Call(4, 114, 3, false, this); //Ret: String
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Object);

// UnityEngine.Component
var UnityEngine$Component = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Component",
    Kind: "Class",
    baseTypeName: "UnityEngine.Object",
    definition: {
        ctor: function() { CS.Call(5, 115, 0, true, this); },
        get_transform: function() { return CS.Call(2, 115, 0, false, this); },
        set_transform: function(v) { return CS.Call(3, 115, 0, false, this, v); },
        get_gameObject: function() { return CS.Call(2, 115, 1, false, this); },
        set_gameObject: function(v) { return CS.Call(3, 115, 1, false, this, v); },
        get_tag: function() { return CS.Call(2, 115, 2, false, this); },
        set_tag: function(v) { return CS.Call(3, 115, 2, false, this, v); },
        BroadcastMessage$$String$$Object$$SendMessageOptions: function(a0/*String*/, a1/*Object*/, a2/*SendMessageOptions*/) { 
            return CS.Call(4, 115, 0, false, this, a0, a1, a2); //Ret: Void
        },
        BroadcastMessage$$String$$Object: function(a0/*String*/, a1/*Object*/) { 
            return CS.Call(4, 115, 1, false, this, a0, a1); //Ret: Void
        },
        BroadcastMessage$$String$$SendMessageOptions: function(a0/*String*/, a1/*SendMessageOptions*/) { 
            return CS.Call(4, 115, 2, false, this, a0, a1); //Ret: Void
        },
        BroadcastMessage$$String: function(a0/*String*/) { 
            return CS.Call(4, 115, 3, false, this, a0); //Ret: Void
        },
        CompareTag: function(a0/*String*/) { 
            return CS.Call(4, 115, 4, false, this, a0); //Ret: Boolean
        },
        GetComponent$$Type: function(a0/*Type*/) { 
            return CS.Call(4, 115, 5, false, this, a0.get_FullName()); //Ret: Component
        },
        GetComponent$$String: function(a0/*String*/) { 
            return CS.Call(4, 115, 6, false, this, a0); //Ret: Component
        },
        GetComponent$1: function(t0) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 115, 7, false, this, native_t0); //Ret: T
        },
        GetComponentInChildren$$Type$$Boolean: function(a0/*Type*/, a1/*Boolean*/) { 
            return CS.Call(4, 115, 8, false, this, a0.get_FullName(), a1); //Ret: Component
        },
        GetComponentInChildren$1$$Boolean: function(t0, a0/*Boolean*/) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 115, 9, false, this, native_t0, a0); //Ret: T
        },
        GetComponentInChildren$$Type: function(a0/*Type*/) { 
            return CS.Call(4, 115, 10, false, this, a0.get_FullName()); //Ret: Component
        },
        GetComponentInChildren$1: function(t0) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 115, 11, false, this, native_t0); //Ret: T
        },
        GetComponentInParent$$Type: function(a0/*Type*/) { 
            return CS.Call(4, 115, 12, false, this, a0.get_FullName()); //Ret: Component
        },
        GetComponentInParent$1: function(t0) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 115, 13, false, this, native_t0); //Ret: T
        },
        GetComponents$$Type$$List$1$Component: function(a0/*Type*/, a1/*List`1*/) { 
            return CS.Call(4, 115, 14, false, this, a0.get_FullName(), a1); //Ret: Void
        },
        GetComponents$1$$List$1: function(t0, a0/*List`1*/) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 115, 15, false, this, native_t0, a0); //Ret: Void
        },
        GetComponents$$Type: function(a0/*Type*/) { 
            return CS.Call(4, 115, 16, false, this, a0.get_FullName()); //Ret: Component[]
        },
        GetComponents$1: function(t0) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 115, 17, false, this, native_t0); //Ret: T[]
        },
        GetComponentsInChildren$$Type$$Boolean: function(a0/*Type*/, a1/*Boolean*/) { 
            return CS.Call(4, 115, 18, false, this, a0.get_FullName(), a1); //Ret: Component[]
        },
        GetComponentsInChildren$1$$Boolean$$List$1: function(t0, a0/*Boolean*/, a1/*List`1*/) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 115, 19, false, this, native_t0, a0, a1); //Ret: Void
        },
        GetComponentsInChildren$$Type: function(a0/*Type*/) { 
            return CS.Call(4, 115, 20, false, this, a0.get_FullName()); //Ret: Component[]
        },
        GetComponentsInChildren$1$$List$1: function(t0, a0/*List`1*/) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 115, 21, false, this, native_t0, a0); //Ret: Void
        },
        GetComponentsInChildren$1$$Boolean: function(t0, a0/*Boolean*/) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 115, 22, false, this, native_t0, a0); //Ret: T[]
        },
        GetComponentsInChildren$1: function(t0) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 115, 23, false, this, native_t0); //Ret: T[]
        },
        GetComponentsInParent$$Type$$Boolean: function(a0/*Type*/, a1/*Boolean*/) { 
            return CS.Call(4, 115, 24, false, this, a0.get_FullName(), a1); //Ret: Component[]
        },
        GetComponentsInParent$1$$Boolean$$List$1: function(t0, a0/*Boolean*/, a1/*List`1*/) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 115, 25, false, this, native_t0, a0, a1); //Ret: Void
        },
        GetComponentsInParent$1$$Boolean: function(t0, a0/*Boolean*/) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 115, 26, false, this, native_t0, a0); //Ret: T[]
        },
        GetComponentsInParent$$Type: function(a0/*Type*/) { 
            return CS.Call(4, 115, 27, false, this, a0.get_FullName()); //Ret: Component[]
        },
        GetComponentsInParent$1: function(t0) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 115, 28, false, this, native_t0); //Ret: T[]
        },
        SendMessage$$String$$Object$$SendMessageOptions: function(a0/*String*/, a1/*Object*/, a2/*SendMessageOptions*/) { 
            return CS.Call(4, 115, 29, false, this, a0, a1, a2); //Ret: Void
        },
        SendMessage$$String$$SendMessageOptions: function(a0/*String*/, a1/*SendMessageOptions*/) { 
            return CS.Call(4, 115, 30, false, this, a0, a1); //Ret: Void
        },
        SendMessage$$String$$Object: function(a0/*String*/, a1/*Object*/) { 
            return CS.Call(4, 115, 31, false, this, a0, a1); //Ret: Void
        },
        SendMessage$$String: function(a0/*String*/) { 
            return CS.Call(4, 115, 32, false, this, a0); //Ret: Void
        },
        SendMessageUpwards$$String$$Object$$SendMessageOptions: function(a0/*String*/, a1/*Object*/, a2/*SendMessageOptions*/) { 
            return CS.Call(4, 115, 33, false, this, a0, a1, a2); //Ret: Void
        },
        SendMessageUpwards$$String$$Object: function(a0/*String*/, a1/*Object*/) { 
            return CS.Call(4, 115, 34, false, this, a0, a1); //Ret: Void
        },
        SendMessageUpwards$$String$$SendMessageOptions: function(a0/*String*/, a1/*SendMessageOptions*/) { 
            return CS.Call(4, 115, 35, false, this, a0, a1); //Ret: Void
        },
        SendMessageUpwards$$String: function(a0/*String*/) { 
            return CS.Call(4, 115, 36, false, this, a0); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Component);

// UnityEngine.Light
var UnityEngine$Light = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Light",
    Kind: "Class",
    baseTypeName: "UnityEngine.Behaviour",
    staticDefinition: {
        GetLights: function(a0/*LightType*/, a1/*Int32*/) { 
            return CS.Call(4, 116, 5, true, a0, a1); //Ret: Light[]
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 116, 0, true, this); },
        get_type: function() { return CS.Call(2, 116, 0, false, this); },
        set_type: function(v) { return CS.Call(3, 116, 0, false, this, v); },
        get_color: function() { return CS.Call(2, 116, 1, false, this); },
        set_color: function(v) { return CS.Call(3, 116, 1, false, this, v); },
        get_intensity: function() { return CS.Call(2, 116, 2, false, this); },
        set_intensity: function(v) { return CS.Call(3, 116, 2, false, this, v); },
        get_bounceIntensity: function() { return CS.Call(2, 116, 3, false, this); },
        set_bounceIntensity: function(v) { return CS.Call(3, 116, 3, false, this, v); },
        get_shadows: function() { return CS.Call(2, 116, 4, false, this); },
        set_shadows: function(v) { return CS.Call(3, 116, 4, false, this, v); },
        get_shadowStrength: function() { return CS.Call(2, 116, 5, false, this); },
        set_shadowStrength: function(v) { return CS.Call(3, 116, 5, false, this, v); },
        get_shadowResolution: function() { return CS.Call(2, 116, 6, false, this); },
        set_shadowResolution: function(v) { return CS.Call(3, 116, 6, false, this, v); },
        get_shadowCustomResolution: function() { return CS.Call(2, 116, 7, false, this); },
        set_shadowCustomResolution: function(v) { return CS.Call(3, 116, 7, false, this, v); },
        get_shadowBias: function() { return CS.Call(2, 116, 8, false, this); },
        set_shadowBias: function(v) { return CS.Call(3, 116, 8, false, this, v); },
        get_shadowNormalBias: function() { return CS.Call(2, 116, 9, false, this); },
        set_shadowNormalBias: function(v) { return CS.Call(3, 116, 9, false, this, v); },
        get_shadowNearPlane: function() { return CS.Call(2, 116, 10, false, this); },
        set_shadowNearPlane: function(v) { return CS.Call(3, 116, 10, false, this, v); },
        get_range: function() { return CS.Call(2, 116, 11, false, this); },
        set_range: function(v) { return CS.Call(3, 116, 11, false, this, v); },
        get_spotAngle: function() { return CS.Call(2, 116, 12, false, this); },
        set_spotAngle: function(v) { return CS.Call(3, 116, 12, false, this, v); },
        get_cookieSize: function() { return CS.Call(2, 116, 13, false, this); },
        set_cookieSize: function(v) { return CS.Call(3, 116, 13, false, this, v); },
        get_cookie: function() { return CS.Call(2, 116, 14, false, this); },
        set_cookie: function(v) { return CS.Call(3, 116, 14, false, this, v); },
        get_flare: function() { return CS.Call(2, 116, 15, false, this); },
        set_flare: function(v) { return CS.Call(3, 116, 15, false, this, v); },
        get_renderMode: function() { return CS.Call(2, 116, 16, false, this); },
        set_renderMode: function(v) { return CS.Call(3, 116, 16, false, this, v); },
        get_bakedIndex: function() { return CS.Call(2, 116, 17, false, this); },
        set_bakedIndex: function(v) { return CS.Call(3, 116, 17, false, this, v); },
        get_isBaked: function() { return CS.Call(2, 116, 18, false, this); },
        set_isBaked: function(v) { return CS.Call(3, 116, 18, false, this, v); },
        get_cullingMask: function() { return CS.Call(2, 116, 19, false, this); },
        set_cullingMask: function(v) { return CS.Call(3, 116, 19, false, this, v); },
        get_commandBufferCount: function() { return CS.Call(2, 116, 20, false, this); },
        set_commandBufferCount: function(v) { return CS.Call(3, 116, 20, false, this, v); },
        AddCommandBuffer: function(a0/*LightEvent*/, a1/*CommandBuffer*/) { 
            return CS.Call(4, 116, 0, false, this, a0, a1); //Ret: Void
        },
        GetCommandBuffers: function(a0/*LightEvent*/) { 
            return CS.Call(4, 116, 1, false, this, a0); //Ret: CommandBuffer[]
        },
        RemoveAllCommandBuffers: function() { 
            return CS.Call(4, 116, 2, false, this); //Ret: Void
        },
        RemoveCommandBuffer: function(a0/*LightEvent*/, a1/*CommandBuffer*/) { 
            return CS.Call(4, 116, 3, false, this, a0, a1); //Ret: Void
        },
        RemoveCommandBuffers: function(a0/*LightEvent*/) { 
            return CS.Call(4, 116, 4, false, this, a0); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Light);

// UnityEngine.GameObject
var UnityEngine$GameObject = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.GameObject",
    Kind: "Class",
    baseTypeName: "UnityEngine.Object",
    staticDefinition: {
        CreatePrimitive: function(a0/*PrimitiveType*/) { 
            return CS.Call(4, 117, 40, true, a0); //Ret: GameObject
        },
        Find: function(a0/*String*/) { 
            return CS.Call(4, 117, 41, true, a0); //Ret: GameObject
        },
        FindGameObjectsWithTag: function(a0/*String*/) { 
            return CS.Call(4, 117, 42, true, a0); //Ret: GameObject[]
        },
        FindGameObjectWithTag: function(a0/*String*/) { 
            return CS.Call(4, 117, 43, true, a0); //Ret: GameObject
        },
        FindWithTag: function(a0/*String*/) { 
            return CS.Call(4, 117, 44, true, a0); //Ret: GameObject
        },
    },
    definition: {
        ctor$$String: function(a0) { CS.Call(5, 117, 0, true, this, a0); },
        ctor: function() { CS.Call(5, 117, 1, true, this); },
        ctor$$String$$Type$Array: function(a0, a1) { CS.Call(5, 117, 2, true, this, a0, jsb_convertTypeParamsArray(a1)); },
        get_transform: function() { return CS.Call(2, 117, 0, false, this); },
        set_transform: function(v) { return CS.Call(3, 117, 0, false, this, v); },
        get_layer: function() { return CS.Call(2, 117, 1, false, this); },
        set_layer: function(v) { return CS.Call(3, 117, 1, false, this, v); },
        get_activeSelf: function() { return CS.Call(2, 117, 2, false, this); },
        set_activeSelf: function(v) { return CS.Call(3, 117, 2, false, this, v); },
        get_activeInHierarchy: function() { return CS.Call(2, 117, 3, false, this); },
        set_activeInHierarchy: function(v) { return CS.Call(3, 117, 3, false, this, v); },
        get_isStatic: function() { return CS.Call(2, 117, 4, false, this); },
        set_isStatic: function(v) { return CS.Call(3, 117, 4, false, this, v); },
        get_tag: function() { return CS.Call(2, 117, 5, false, this); },
        set_tag: function(v) { return CS.Call(3, 117, 5, false, this, v); },
        get_scene: function() { return CS.Call(2, 117, 6, false, this); },
        set_scene: function(v) { return CS.Call(3, 117, 6, false, this, v); },
        get_gameObject: function() { return CS.Call(2, 117, 7, false, this); },
        set_gameObject: function(v) { return CS.Call(3, 117, 7, false, this, v); },
        AddComponent$$Type: function(a0/*Type*/) { 
            return CS.Call(4, 117, 0, false, this, a0.get_FullName()); //Ret: Component
        },
        AddComponent$1: function(t0) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 117, 1, false, this, native_t0); //Ret: T
        },
        BroadcastMessage$$String$$Object$$SendMessageOptions: function(a0/*String*/, a1/*Object*/, a2/*SendMessageOptions*/) { 
            return CS.Call(4, 117, 2, false, this, a0, a1, a2); //Ret: Void
        },
        BroadcastMessage$$String$$SendMessageOptions: function(a0/*String*/, a1/*SendMessageOptions*/) { 
            return CS.Call(4, 117, 3, false, this, a0, a1); //Ret: Void
        },
        BroadcastMessage$$String$$Object: function(a0/*String*/, a1/*Object*/) { 
            return CS.Call(4, 117, 4, false, this, a0, a1); //Ret: Void
        },
        BroadcastMessage$$String: function(a0/*String*/) { 
            return CS.Call(4, 117, 5, false, this, a0); //Ret: Void
        },
        CompareTag: function(a0/*String*/) { 
            return CS.Call(4, 117, 6, false, this, a0); //Ret: Boolean
        },
        GetComponent$$String: function(a0/*String*/) { 
            return CS.Call(4, 117, 7, false, this, a0); //Ret: Component
        },
        GetComponent$$Type: function(a0/*Type*/) { 
            return CS.Call(4, 117, 8, false, this, a0.get_FullName()); //Ret: Component
        },
        GetComponent$1: function(t0) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 117, 9, false, this, native_t0); //Ret: T
        },
        GetComponentInChildren$$Type$$Boolean: function(a0/*Type*/, a1/*Boolean*/) { 
            return CS.Call(4, 117, 10, false, this, a0.get_FullName(), a1); //Ret: Component
        },
        GetComponentInChildren$1$$Boolean: function(t0, a0/*Boolean*/) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 117, 11, false, this, native_t0, a0); //Ret: T
        },
        GetComponentInChildren$$Type: function(a0/*Type*/) { 
            return CS.Call(4, 117, 12, false, this, a0.get_FullName()); //Ret: Component
        },
        GetComponentInChildren$1: function(t0) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 117, 13, false, this, native_t0); //Ret: T
        },
        GetComponentInParent$$Type: function(a0/*Type*/) { 
            return CS.Call(4, 117, 14, false, this, a0.get_FullName()); //Ret: Component
        },
        GetComponentInParent$1: function(t0) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 117, 15, false, this, native_t0); //Ret: T
        },
        GetComponents$$Type$$List$1$Component: function(a0/*Type*/, a1/*List`1*/) { 
            return CS.Call(4, 117, 16, false, this, a0.get_FullName(), a1); //Ret: Void
        },
        GetComponents$1$$List$1: function(t0, a0/*List`1*/) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 117, 17, false, this, native_t0, a0); //Ret: Void
        },
        GetComponents$$Type: function(a0/*Type*/) { 
            return CS.Call(4, 117, 18, false, this, a0.get_FullName()); //Ret: Component[]
        },
        GetComponents$1: function(t0) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 117, 19, false, this, native_t0); //Ret: T[]
        },
        GetComponentsInChildren$$Type$$Boolean: function(a0/*Type*/, a1/*Boolean*/) { 
            return CS.Call(4, 117, 20, false, this, a0.get_FullName(), a1); //Ret: Component[]
        },
        GetComponentsInChildren$1$$Boolean$$List$1: function(t0, a0/*Boolean*/, a1/*List`1*/) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 117, 21, false, this, native_t0, a0, a1); //Ret: Void
        },
        GetComponentsInChildren$1$$Boolean: function(t0, a0/*Boolean*/) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 117, 22, false, this, native_t0, a0); //Ret: T[]
        },
        GetComponentsInChildren$$Type: function(a0/*Type*/) { 
            return CS.Call(4, 117, 23, false, this, a0.get_FullName()); //Ret: Component[]
        },
        GetComponentsInChildren$1$$List$1: function(t0, a0/*List`1*/) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 117, 24, false, this, native_t0, a0); //Ret: Void
        },
        GetComponentsInChildren$1: function(t0) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 117, 25, false, this, native_t0); //Ret: T[]
        },
        GetComponentsInParent$1$$Boolean$$List$1: function(t0, a0/*Boolean*/, a1/*List`1*/) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 117, 26, false, this, native_t0, a0, a1); //Ret: Void
        },
        GetComponentsInParent$$Type$$Boolean: function(a0/*Type*/, a1/*Boolean*/) { 
            return CS.Call(4, 117, 27, false, this, a0.get_FullName(), a1); //Ret: Component[]
        },
        GetComponentsInParent$1$$Boolean: function(t0, a0/*Boolean*/) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 117, 28, false, this, native_t0, a0); //Ret: T[]
        },
        GetComponentsInParent$$Type: function(a0/*Type*/) { 
            return CS.Call(4, 117, 29, false, this, a0.get_FullName()); //Ret: Component[]
        },
        GetComponentsInParent$1: function(t0) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 117, 30, false, this, native_t0); //Ret: T[]
        },
        SendMessage$$String$$Object$$SendMessageOptions: function(a0/*String*/, a1/*Object*/, a2/*SendMessageOptions*/) { 
            return CS.Call(4, 117, 31, false, this, a0, a1, a2); //Ret: Void
        },
        SendMessage$$String$$Object: function(a0/*String*/, a1/*Object*/) { 
            return CS.Call(4, 117, 32, false, this, a0, a1); //Ret: Void
        },
        SendMessage$$String$$SendMessageOptions: function(a0/*String*/, a1/*SendMessageOptions*/) { 
            return CS.Call(4, 117, 33, false, this, a0, a1); //Ret: Void
        },
        SendMessage$$String: function(a0/*String*/) { 
            return CS.Call(4, 117, 34, false, this, a0); //Ret: Void
        },
        SendMessageUpwards$$String$$Object$$SendMessageOptions: function(a0/*String*/, a1/*Object*/, a2/*SendMessageOptions*/) { 
            return CS.Call(4, 117, 35, false, this, a0, a1, a2); //Ret: Void
        },
        SendMessageUpwards$$String$$Object: function(a0/*String*/, a1/*Object*/) { 
            return CS.Call(4, 117, 36, false, this, a0, a1); //Ret: Void
        },
        SendMessageUpwards$$String$$SendMessageOptions: function(a0/*String*/, a1/*SendMessageOptions*/) { 
            return CS.Call(4, 117, 37, false, this, a0, a1); //Ret: Void
        },
        SendMessageUpwards$$String: function(a0/*String*/) { 
            return CS.Call(4, 117, 38, false, this, a0); //Ret: Void
        },
        SetActive: function(a0/*Boolean*/) { 
            return CS.Call(4, 117, 39, false, this, a0); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$GameObject);

// UnityEngine.Transform
var UnityEngine$Transform = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Transform",
    Kind: "Class",
    baseTypeName: "UnityEngine.Component",
    interfaceNames: ["System.Collections.IEnumerable"],
    definition: {
        get_position: function() { return CS.Call(2, 118, 0, false, this); },
        set_position: function(v) { return CS.Call(3, 118, 0, false, this, v); },
        get_localPosition: function() { return CS.Call(2, 118, 1, false, this); },
        set_localPosition: function(v) { return CS.Call(3, 118, 1, false, this, v); },
        get_eulerAngles: function() { return CS.Call(2, 118, 2, false, this); },
        set_eulerAngles: function(v) { return CS.Call(3, 118, 2, false, this, v); },
        get_localEulerAngles: function() { return CS.Call(2, 118, 3, false, this); },
        set_localEulerAngles: function(v) { return CS.Call(3, 118, 3, false, this, v); },
        get_right: function() { return CS.Call(2, 118, 4, false, this); },
        set_right: function(v) { return CS.Call(3, 118, 4, false, this, v); },
        get_up: function() { return CS.Call(2, 118, 5, false, this); },
        set_up: function(v) { return CS.Call(3, 118, 5, false, this, v); },
        get_forward: function() { return CS.Call(2, 118, 6, false, this); },
        set_forward: function(v) { return CS.Call(3, 118, 6, false, this, v); },
        get_rotation: function() { return CS.Call(2, 118, 7, false, this); },
        set_rotation: function(v) { return CS.Call(3, 118, 7, false, this, v); },
        get_localRotation: function() { return CS.Call(2, 118, 8, false, this); },
        set_localRotation: function(v) { return CS.Call(3, 118, 8, false, this, v); },
        get_localScale: function() { return CS.Call(2, 118, 9, false, this); },
        set_localScale: function(v) { return CS.Call(3, 118, 9, false, this, v); },
        get_parent: function() { return CS.Call(2, 118, 10, false, this); },
        set_parent: function(v) { return CS.Call(3, 118, 10, false, this, v); },
        get_worldToLocalMatrix: function() { return CS.Call(2, 118, 11, false, this); },
        set_worldToLocalMatrix: function(v) { return CS.Call(3, 118, 11, false, this, v); },
        get_localToWorldMatrix: function() { return CS.Call(2, 118, 12, false, this); },
        set_localToWorldMatrix: function(v) { return CS.Call(3, 118, 12, false, this, v); },
        get_root: function() { return CS.Call(2, 118, 13, false, this); },
        set_root: function(v) { return CS.Call(3, 118, 13, false, this, v); },
        get_childCount: function() { return CS.Call(2, 118, 14, false, this); },
        set_childCount: function(v) { return CS.Call(3, 118, 14, false, this, v); },
        get_lossyScale: function() { return CS.Call(2, 118, 15, false, this); },
        set_lossyScale: function(v) { return CS.Call(3, 118, 15, false, this, v); },
        get_hasChanged: function() { return CS.Call(2, 118, 16, false, this); },
        set_hasChanged: function(v) { return CS.Call(3, 118, 16, false, this, v); },
        get_hierarchyCapacity: function() { return CS.Call(2, 118, 17, false, this); },
        set_hierarchyCapacity: function(v) { return CS.Call(3, 118, 17, false, this, v); },
        get_hierarchyCount: function() { return CS.Call(2, 118, 18, false, this); },
        set_hierarchyCount: function(v) { return CS.Call(3, 118, 18, false, this, v); },
        DetachChildren: function() { 
            return CS.Call(4, 118, 0, false, this); //Ret: Void
        },
        Find: function(a0/*String*/) { 
            return CS.Call(4, 118, 1, false, this, a0); //Ret: Transform
        },
        FindChild: function(a0/*String*/) { 
            return CS.Call(4, 118, 2, false, this, a0); //Ret: Transform
        },
        GetChild: function(a0/*Int32*/) { 
            return CS.Call(4, 118, 3, false, this, a0); //Ret: Transform
        },
        GetEnumerator: function() { 
            return CS.Call(4, 118, 4, false, this); //Ret: IEnumerator
        },
        GetSiblingIndex: function() { 
            return CS.Call(4, 118, 5, false, this); //Ret: Int32
        },
        InverseTransformDirection$$Single$$Single$$Single: function(a0/*Single*/, a1/*Single*/, a2/*Single*/) { 
            return CS.Call(4, 118, 6, false, this, a0, a1, a2); //Ret: Vector3
        },
        InverseTransformDirection$$Vector3: function(a0/*Vector3*/) { 
            return CS.Call(4, 118, 7, false, this, a0); //Ret: Vector3
        },
        InverseTransformPoint$$Single$$Single$$Single: function(a0/*Single*/, a1/*Single*/, a2/*Single*/) { 
            return CS.Call(4, 118, 8, false, this, a0, a1, a2); //Ret: Vector3
        },
        InverseTransformPoint$$Vector3: function(a0/*Vector3*/) { 
            return CS.Call(4, 118, 9, false, this, a0); //Ret: Vector3
        },
        InverseTransformVector$$Single$$Single$$Single: function(a0/*Single*/, a1/*Single*/, a2/*Single*/) { 
            return CS.Call(4, 118, 10, false, this, a0, a1, a2); //Ret: Vector3
        },
        InverseTransformVector$$Vector3: function(a0/*Vector3*/) { 
            return CS.Call(4, 118, 11, false, this, a0); //Ret: Vector3
        },
        IsChildOf: function(a0/*Transform*/) { 
            return CS.Call(4, 118, 12, false, this, a0); //Ret: Boolean
        },
        LookAt$$Transform$$Vector3: function(a0/*Transform*/, a1/*Vector3*/) { 
            return CS.Call(4, 118, 13, false, this, a0, a1); //Ret: Void
        },
        LookAt$$Vector3$$Vector3: function(a0/*Vector3*/, a1/*Vector3*/) { 
            return CS.Call(4, 118, 14, false, this, a0, a1); //Ret: Void
        },
        LookAt$$Transform: function(a0/*Transform*/) { 
            return CS.Call(4, 118, 15, false, this, a0); //Ret: Void
        },
        LookAt$$Vector3: function(a0/*Vector3*/) { 
            return CS.Call(4, 118, 16, false, this, a0); //Ret: Void
        },
        Rotate$$Single$$Single$$Single$$Space: function(a0/*Single*/, a1/*Single*/, a2/*Single*/, a3/*Space*/) { 
            return CS.Call(4, 118, 17, false, this, a0, a1, a2, a3); //Ret: Void
        },
        Rotate$$Single$$Single$$Single: function(a0/*Single*/, a1/*Single*/, a2/*Single*/) { 
            return CS.Call(4, 118, 18, false, this, a0, a1, a2); //Ret: Void
        },
        Rotate$$Vector3$$Single$$Space: function(a0/*Vector3*/, a1/*Single*/, a2/*Space*/) { 
            return CS.Call(4, 118, 19, false, this, a0, a1, a2); //Ret: Void
        },
        Rotate$$Vector3$$Space: function(a0/*Vector3*/, a1/*Space*/) { 
            return CS.Call(4, 118, 20, false, this, a0, a1); //Ret: Void
        },
        Rotate$$Vector3$$Single: function(a0/*Vector3*/, a1/*Single*/) { 
            return CS.Call(4, 118, 21, false, this, a0, a1); //Ret: Void
        },
        Rotate$$Vector3: function(a0/*Vector3*/) { 
            return CS.Call(4, 118, 22, false, this, a0); //Ret: Void
        },
        RotateAround$$Vector3$$Vector3$$Single: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Single*/) { 
            return CS.Call(4, 118, 23, false, this, a0, a1, a2); //Ret: Void
        },
        SetAsFirstSibling: function() { 
            return CS.Call(4, 118, 24, false, this); //Ret: Void
        },
        SetAsLastSibling: function() { 
            return CS.Call(4, 118, 25, false, this); //Ret: Void
        },
        SetParent$$Transform$$Boolean: function(a0/*Transform*/, a1/*Boolean*/) { 
            return CS.Call(4, 118, 26, false, this, a0, a1); //Ret: Void
        },
        SetParent$$Transform: function(a0/*Transform*/) { 
            return CS.Call(4, 118, 27, false, this, a0); //Ret: Void
        },
        SetSiblingIndex: function(a0/*Int32*/) { 
            return CS.Call(4, 118, 28, false, this, a0); //Ret: Void
        },
        TransformDirection$$Single$$Single$$Single: function(a0/*Single*/, a1/*Single*/, a2/*Single*/) { 
            return CS.Call(4, 118, 29, false, this, a0, a1, a2); //Ret: Vector3
        },
        TransformDirection$$Vector3: function(a0/*Vector3*/) { 
            return CS.Call(4, 118, 30, false, this, a0); //Ret: Vector3
        },
        TransformPoint$$Single$$Single$$Single: function(a0/*Single*/, a1/*Single*/, a2/*Single*/) { 
            return CS.Call(4, 118, 31, false, this, a0, a1, a2); //Ret: Vector3
        },
        TransformPoint$$Vector3: function(a0/*Vector3*/) { 
            return CS.Call(4, 118, 32, false, this, a0); //Ret: Vector3
        },
        TransformVector$$Single$$Single$$Single: function(a0/*Single*/, a1/*Single*/, a2/*Single*/) { 
            return CS.Call(4, 118, 33, false, this, a0, a1, a2); //Ret: Vector3
        },
        TransformVector$$Vector3: function(a0/*Vector3*/) { 
            return CS.Call(4, 118, 34, false, this, a0); //Ret: Vector3
        },
        Translate$$Single$$Single$$Single$$Space: function(a0/*Single*/, a1/*Single*/, a2/*Single*/, a3/*Space*/) { 
            return CS.Call(4, 118, 35, false, this, a0, a1, a2, a3); //Ret: Void
        },
        Translate$$Single$$Single$$Single$$Transform: function(a0/*Single*/, a1/*Single*/, a2/*Single*/, a3/*Transform*/) { 
            return CS.Call(4, 118, 36, false, this, a0, a1, a2, a3); //Ret: Void
        },
        Translate$$Single$$Single$$Single: function(a0/*Single*/, a1/*Single*/, a2/*Single*/) { 
            return CS.Call(4, 118, 37, false, this, a0, a1, a2); //Ret: Void
        },
        Translate$$Vector3$$Space: function(a0/*Vector3*/, a1/*Space*/) { 
            return CS.Call(4, 118, 38, false, this, a0, a1); //Ret: Void
        },
        Translate$$Vector3$$Transform: function(a0/*Vector3*/, a1/*Transform*/) { 
            return CS.Call(4, 118, 39, false, this, a0, a1); //Ret: Void
        },
        Translate$$Vector3: function(a0/*Vector3*/) { 
            return CS.Call(4, 118, 40, false, this, a0); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Transform);

// UnityEngine.Time
var UnityEngine$Time = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Time",
    Kind: "Class",
    baseTypeName: "System.Object",
    staticDefinition: {
        get_time: function() { return CS.Call(2, 119, 0, true); },
        set_time: function(v) { return CS.Call(3, 119, 0, true, v); },
        get_timeSinceLevelLoad: function() { return CS.Call(2, 119, 1, true); },
        set_timeSinceLevelLoad: function(v) { return CS.Call(3, 119, 1, true, v); },
        get_deltaTime: function() { return CS.Call(2, 119, 2, true); },
        set_deltaTime: function(v) { return CS.Call(3, 119, 2, true, v); },
        get_fixedTime: function() { return CS.Call(2, 119, 3, true); },
        set_fixedTime: function(v) { return CS.Call(3, 119, 3, true, v); },
        get_unscaledTime: function() { return CS.Call(2, 119, 4, true); },
        set_unscaledTime: function(v) { return CS.Call(3, 119, 4, true, v); },
        get_unscaledDeltaTime: function() { return CS.Call(2, 119, 5, true); },
        set_unscaledDeltaTime: function(v) { return CS.Call(3, 119, 5, true, v); },
        get_fixedDeltaTime: function() { return CS.Call(2, 119, 6, true); },
        set_fixedDeltaTime: function(v) { return CS.Call(3, 119, 6, true, v); },
        get_maximumDeltaTime: function() { return CS.Call(2, 119, 7, true); },
        set_maximumDeltaTime: function(v) { return CS.Call(3, 119, 7, true, v); },
        get_smoothDeltaTime: function() { return CS.Call(2, 119, 8, true); },
        set_smoothDeltaTime: function(v) { return CS.Call(3, 119, 8, true, v); },
        get_timeScale: function() { return CS.Call(2, 119, 9, true); },
        set_timeScale: function(v) { return CS.Call(3, 119, 9, true, v); },
        get_frameCount: function() { return CS.Call(2, 119, 10, true); },
        set_frameCount: function(v) { return CS.Call(3, 119, 10, true, v); },
        get_renderedFrameCount: function() { return CS.Call(2, 119, 11, true); },
        set_renderedFrameCount: function(v) { return CS.Call(3, 119, 11, true, v); },
        get_realtimeSinceStartup: function() { return CS.Call(2, 119, 12, true); },
        set_realtimeSinceStartup: function(v) { return CS.Call(3, 119, 12, true, v); },
        get_captureFramerate: function() { return CS.Call(2, 119, 13, true); },
        set_captureFramerate: function(v) { return CS.Call(3, 119, 13, true, v); },
    },
    definition: {
        ctor: function() { CS.Call(5, 119, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Time);

// UnityEngine.Random
var UnityEngine$Random = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Random",
    Kind: "Class",
    baseTypeName: "System.Object",
    staticDefinition: {
        get_state: function() { return CS.Call(2, 120, 0, true); },
        set_state: function(v) { return CS.Call(3, 120, 0, true, v); },
        get_value: function() { return CS.Call(2, 120, 1, true); },
        set_value: function(v) { return CS.Call(3, 120, 1, true, v); },
        get_insideUnitSphere: function() { return CS.Call(2, 120, 2, true); },
        set_insideUnitSphere: function(v) { return CS.Call(3, 120, 2, true, v); },
        get_insideUnitCircle: function() { return CS.Call(2, 120, 3, true); },
        set_insideUnitCircle: function(v) { return CS.Call(3, 120, 3, true, v); },
        get_onUnitSphere: function() { return CS.Call(2, 120, 4, true); },
        set_onUnitSphere: function(v) { return CS.Call(3, 120, 4, true, v); },
        get_rotation: function() { return CS.Call(2, 120, 5, true); },
        set_rotation: function(v) { return CS.Call(3, 120, 5, true, v); },
        get_rotationUniform: function() { return CS.Call(2, 120, 6, true); },
        set_rotationUniform: function(v) { return CS.Call(3, 120, 6, true, v); },
        ColorHSV$$Single$$Single$$Single$$Single$$Single$$Single$$Single$$Single: function(a0/*Single*/, a1/*Single*/, a2/*Single*/, a3/*Single*/, a4/*Single*/, a5/*Single*/, a6/*Single*/, a7/*Single*/) { 
            return CS.Call(4, 120, 0, true, a0, a1, a2, a3, a4, a5, a6, a7); //Ret: Color
        },
        ColorHSV$$Single$$Single$$Single$$Single$$Single$$Single: function(a0/*Single*/, a1/*Single*/, a2/*Single*/, a3/*Single*/, a4/*Single*/, a5/*Single*/) { 
            return CS.Call(4, 120, 1, true, a0, a1, a2, a3, a4, a5); //Ret: Color
        },
        ColorHSV$$Single$$Single$$Single$$Single: function(a0/*Single*/, a1/*Single*/, a2/*Single*/, a3/*Single*/) { 
            return CS.Call(4, 120, 2, true, a0, a1, a2, a3); //Ret: Color
        },
        ColorHSV$$Single$$Single: function(a0/*Single*/, a1/*Single*/) { 
            return CS.Call(4, 120, 3, true, a0, a1); //Ret: Color
        },
        ColorHSV: function() { 
            return CS.Call(4, 120, 4, true); //Ret: Color
        },
        InitState: function(a0/*Int32*/) { 
            return CS.Call(4, 120, 5, true, a0); //Ret: Void
        },
        Range$$Single$$Single: function(a0/*Single*/, a1/*Single*/) { 
            return CS.Call(4, 120, 6, true, a0, a1); //Ret: Single
        },
        Range$$Int32$$Int32: function(a0/*Int32*/, a1/*Int32*/) { 
            return CS.Call(4, 120, 7, true, a0, a1); //Ret: Int32
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 120, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Random);

// UnityEngine.Random+State
var UnityEngine$Random$State = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Random.State",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    definition: {
        ctor: function() { CS.Call(5, 121, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Random$State);

// UnityEngine.YieldInstruction
var UnityEngine$YieldInstruction = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.YieldInstruction",
    Kind: "Class",
    baseTypeName: "System.Object",
    definition: {
        ctor: function() { CS.Call(5, 122, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$YieldInstruction);

// UnityEngine.PlayerPrefsException
var UnityEngine$PlayerPrefsException = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.PlayerPrefsException",
    Kind: "Class",
    baseTypeName: "System.Exception",
    interfaceNames: ["System.Runtime.Serialization.ISerializable", "System.Runtime.InteropServices._Exception"],
    definition: {
        ctor: function(a0) { CS.Call(5, 123, 0, true, this, a0); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$PlayerPrefsException);

// UnityEngine.PlayerPrefs
var UnityEngine$PlayerPrefs = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.PlayerPrefs",
    Kind: "Class",
    baseTypeName: "System.Object",
    staticDefinition: {
        DeleteAll: function() { 
            return CS.Call(4, 124, 0, true); //Ret: Void
        },
        DeleteKey: function(a0/*String*/) { 
            return CS.Call(4, 124, 1, true, a0); //Ret: Void
        },
        GetFloat$$String$$Single: function(a0/*String*/, a1/*Single*/) { 
            return CS.Call(4, 124, 2, true, a0, a1); //Ret: Single
        },
        GetFloat$$String: function(a0/*String*/) { 
            return CS.Call(4, 124, 3, true, a0); //Ret: Single
        },
        GetInt$$String$$Int32: function(a0/*String*/, a1/*Int32*/) { 
            return CS.Call(4, 124, 4, true, a0, a1); //Ret: Int32
        },
        GetInt$$String: function(a0/*String*/) { 
            return CS.Call(4, 124, 5, true, a0); //Ret: Int32
        },
        GetString$$String$$String: function(a0/*String*/, a1/*String*/) { 
            return CS.Call(4, 124, 6, true, a0, a1); //Ret: String
        },
        GetString$$String: function(a0/*String*/) { 
            return CS.Call(4, 124, 7, true, a0); //Ret: String
        },
        HasKey: function(a0/*String*/) { 
            return CS.Call(4, 124, 8, true, a0); //Ret: Boolean
        },
        Save: function() { 
            return CS.Call(4, 124, 9, true); //Ret: Void
        },
        SetFloat: function(a0/*String*/, a1/*Single*/) { 
            return CS.Call(4, 124, 10, true, a0, a1); //Ret: Void
        },
        SetInt: function(a0/*String*/, a1/*Int32*/) { 
            return CS.Call(4, 124, 11, true, a0, a1); //Ret: Void
        },
        SetString: function(a0/*String*/, a1/*String*/) { 
            return CS.Call(4, 124, 12, true, a0, a1); //Ret: Void
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 124, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$PlayerPrefs);

// UnityEngine.Motion
var UnityEngine$Motion = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Motion",
    Kind: "Class",
    baseTypeName: "UnityEngine.Object",
    definition: {
        ctor: function() { CS.Call(5, 125, 0, true, this); },
        get_averageDuration: function() { return CS.Call(2, 125, 0, false, this); },
        set_averageDuration: function(v) { return CS.Call(3, 125, 0, false, this, v); },
        get_averageAngularSpeed: function() { return CS.Call(2, 125, 1, false, this); },
        set_averageAngularSpeed: function(v) { return CS.Call(3, 125, 1, false, this, v); },
        get_averageSpeed: function() { return CS.Call(2, 125, 2, false, this); },
        set_averageSpeed: function(v) { return CS.Call(3, 125, 2, false, this, v); },
        get_apparentSpeed: function() { return CS.Call(2, 125, 3, false, this); },
        set_apparentSpeed: function(v) { return CS.Call(3, 125, 3, false, this, v); },
        get_isLooping: function() { return CS.Call(2, 125, 4, false, this); },
        set_isLooping: function(v) { return CS.Call(3, 125, 4, false, this, v); },
        get_legacy: function() { return CS.Call(2, 125, 5, false, this); },
        set_legacy: function(v) { return CS.Call(3, 125, 5, false, this, v); },
        get_isHumanMotion: function() { return CS.Call(2, 125, 6, false, this); },
        set_isHumanMotion: function(v) { return CS.Call(3, 125, 6, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Motion);

// UnityEngine.BillboardAsset
var UnityEngine$BillboardAsset = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.BillboardAsset",
    Kind: "Class",
    baseTypeName: "UnityEngine.Object",
    definition: {
        ctor: function() { CS.Call(5, 126, 0, true, this); },
        get_width: function() { return CS.Call(2, 126, 0, false, this); },
        set_width: function(v) { return CS.Call(3, 126, 0, false, this, v); },
        get_height: function() { return CS.Call(2, 126, 1, false, this); },
        set_height: function(v) { return CS.Call(3, 126, 1, false, this, v); },
        get_bottom: function() { return CS.Call(2, 126, 2, false, this); },
        set_bottom: function(v) { return CS.Call(3, 126, 2, false, this, v); },
        get_imageCount: function() { return CS.Call(2, 126, 3, false, this); },
        set_imageCount: function(v) { return CS.Call(3, 126, 3, false, this, v); },
        get_vertexCount: function() { return CS.Call(2, 126, 4, false, this); },
        set_vertexCount: function(v) { return CS.Call(3, 126, 4, false, this, v); },
        get_indexCount: function() { return CS.Call(2, 126, 5, false, this); },
        set_indexCount: function(v) { return CS.Call(3, 126, 5, false, this, v); },
        get_material: function() { return CS.Call(2, 126, 6, false, this); },
        set_material: function(v) { return CS.Call(3, 126, 6, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$BillboardAsset);

// UnityEngine.BillboardRenderer
var UnityEngine$BillboardRenderer = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.BillboardRenderer",
    Kind: "Class",
    baseTypeName: "UnityEngine.Renderer",
    definition: {
        ctor: function() { CS.Call(5, 127, 0, true, this); },
        get_billboard: function() { return CS.Call(2, 127, 0, false, this); },
        set_billboard: function(v) { return CS.Call(3, 127, 0, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$BillboardRenderer);

// UnityEngine.WindZone
var UnityEngine$WindZone = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.WindZone",
    Kind: "Class",
    baseTypeName: "UnityEngine.Component",
    definition: {
        ctor: function() { CS.Call(5, 128, 0, true, this); },
        get_mode: function() { return CS.Call(2, 128, 0, false, this); },
        set_mode: function(v) { return CS.Call(3, 128, 0, false, this, v); },
        get_radius: function() { return CS.Call(2, 128, 1, false, this); },
        set_radius: function(v) { return CS.Call(3, 128, 1, false, this, v); },
        get_windMain: function() { return CS.Call(2, 128, 2, false, this); },
        set_windMain: function(v) { return CS.Call(3, 128, 2, false, this, v); },
        get_windTurbulence: function() { return CS.Call(2, 128, 3, false, this); },
        set_windTurbulence: function(v) { return CS.Call(3, 128, 3, false, this, v); },
        get_windPulseMagnitude: function() { return CS.Call(2, 128, 4, false, this); },
        set_windPulseMagnitude: function(v) { return CS.Call(3, 128, 4, false, this, v); },
        get_windPulseFrequency: function() { return CS.Call(2, 128, 5, false, this); },
        set_windPulseFrequency: function(v) { return CS.Call(3, 128, 5, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$WindZone);

// UnityEngine.DynamicGI
var UnityEngine$DynamicGI = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.DynamicGI",
    Kind: "Class",
    baseTypeName: "System.Object",
    staticDefinition: {
        get_indirectScale: function() { return CS.Call(2, 129, 0, true); },
        set_indirectScale: function(v) { return CS.Call(3, 129, 0, true, v); },
        get_updateThreshold: function() { return CS.Call(2, 129, 1, true); },
        set_updateThreshold: function(v) { return CS.Call(3, 129, 1, true, v); },
        get_synchronousMode: function() { return CS.Call(2, 129, 2, true); },
        set_synchronousMode: function(v) { return CS.Call(3, 129, 2, true, v); },
        SetEmissive: function(a0/*Renderer*/, a1/*Color*/) { 
            return CS.Call(4, 129, 0, true, a0, a1); //Ret: Void
        },
        UpdateEnvironment: function() { 
            return CS.Call(4, 129, 1, true); //Ret: Void
        },
        UpdateMaterials$$Terrain$$Int32$$Int32$$Int32$$Int32: function(a0/*Terrain*/, a1/*Int32*/, a2/*Int32*/, a3/*Int32*/, a4/*Int32*/) { 
            return CS.Call(4, 129, 2, true, a0, a1, a2, a3, a4); //Ret: Void
        },
        UpdateMaterials$$Renderer: function(a0/*Renderer*/) { 
            return CS.Call(4, 129, 3, true, a0); //Ret: Void
        },
        UpdateMaterials$$Terrain: function(a0/*Terrain*/) { 
            return CS.Call(4, 129, 4, true, a0); //Ret: Void
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 129, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$DynamicGI);

// UnityEngine.ParticleSystem
var UnityEngine$ParticleSystem = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.ParticleSystem",
    Kind: "Class",
    baseTypeName: "UnityEngine.Component",
    definition: {
        ctor: function() { CS.Call(5, 130, 0, true, this); },
        get_startDelay: function() { return CS.Call(2, 130, 0, false, this); },
        set_startDelay: function(v) { return CS.Call(3, 130, 0, false, this, v); },
        get_isPlaying: function() { return CS.Call(2, 130, 1, false, this); },
        set_isPlaying: function(v) { return CS.Call(3, 130, 1, false, this, v); },
        get_isStopped: function() { return CS.Call(2, 130, 2, false, this); },
        set_isStopped: function(v) { return CS.Call(3, 130, 2, false, this, v); },
        get_isPaused: function() { return CS.Call(2, 130, 3, false, this); },
        set_isPaused: function(v) { return CS.Call(3, 130, 3, false, this, v); },
        get_loop: function() { return CS.Call(2, 130, 4, false, this); },
        set_loop: function(v) { return CS.Call(3, 130, 4, false, this, v); },
        get_playOnAwake: function() { return CS.Call(2, 130, 5, false, this); },
        set_playOnAwake: function(v) { return CS.Call(3, 130, 5, false, this, v); },
        get_time: function() { return CS.Call(2, 130, 6, false, this); },
        set_time: function(v) { return CS.Call(3, 130, 6, false, this, v); },
        get_duration: function() { return CS.Call(2, 130, 7, false, this); },
        set_duration: function(v) { return CS.Call(3, 130, 7, false, this, v); },
        get_playbackSpeed: function() { return CS.Call(2, 130, 8, false, this); },
        set_playbackSpeed: function(v) { return CS.Call(3, 130, 8, false, this, v); },
        get_particleCount: function() { return CS.Call(2, 130, 9, false, this); },
        set_particleCount: function(v) { return CS.Call(3, 130, 9, false, this, v); },
        get_startSpeed: function() { return CS.Call(2, 130, 10, false, this); },
        set_startSpeed: function(v) { return CS.Call(3, 130, 10, false, this, v); },
        get_startSize: function() { return CS.Call(2, 130, 11, false, this); },
        set_startSize: function(v) { return CS.Call(3, 130, 11, false, this, v); },
        get_startColor: function() { return CS.Call(2, 130, 12, false, this); },
        set_startColor: function(v) { return CS.Call(3, 130, 12, false, this, v); },
        get_startRotation: function() { return CS.Call(2, 130, 13, false, this); },
        set_startRotation: function(v) { return CS.Call(3, 130, 13, false, this, v); },
        get_startRotation3D: function() { return CS.Call(2, 130, 14, false, this); },
        set_startRotation3D: function(v) { return CS.Call(3, 130, 14, false, this, v); },
        get_startLifetime: function() { return CS.Call(2, 130, 15, false, this); },
        set_startLifetime: function(v) { return CS.Call(3, 130, 15, false, this, v); },
        get_gravityModifier: function() { return CS.Call(2, 130, 16, false, this); },
        set_gravityModifier: function(v) { return CS.Call(3, 130, 16, false, this, v); },
        get_maxParticles: function() { return CS.Call(2, 130, 17, false, this); },
        set_maxParticles: function(v) { return CS.Call(3, 130, 17, false, this, v); },
        get_simulationSpace: function() { return CS.Call(2, 130, 18, false, this); },
        set_simulationSpace: function(v) { return CS.Call(3, 130, 18, false, this, v); },
        get_scalingMode: function() { return CS.Call(2, 130, 19, false, this); },
        set_scalingMode: function(v) { return CS.Call(3, 130, 19, false, this, v); },
        get_randomSeed: function() { return CS.Call(2, 130, 20, false, this); },
        set_randomSeed: function(v) { return CS.Call(3, 130, 20, false, this, v); },
        get_useAutoRandomSeed: function() { return CS.Call(2, 130, 21, false, this); },
        set_useAutoRandomSeed: function(v) { return CS.Call(3, 130, 21, false, this, v); },
        get_emission: function() { return CS.Call(2, 130, 22, false, this); },
        set_emission: function(v) { return CS.Call(3, 130, 22, false, this, v); },
        get_shape: function() { return CS.Call(2, 130, 23, false, this); },
        set_shape: function(v) { return CS.Call(3, 130, 23, false, this, v); },
        get_velocityOverLifetime: function() { return CS.Call(2, 130, 24, false, this); },
        set_velocityOverLifetime: function(v) { return CS.Call(3, 130, 24, false, this, v); },
        get_limitVelocityOverLifetime: function() { return CS.Call(2, 130, 25, false, this); },
        set_limitVelocityOverLifetime: function(v) { return CS.Call(3, 130, 25, false, this, v); },
        get_inheritVelocity: function() { return CS.Call(2, 130, 26, false, this); },
        set_inheritVelocity: function(v) { return CS.Call(3, 130, 26, false, this, v); },
        get_forceOverLifetime: function() { return CS.Call(2, 130, 27, false, this); },
        set_forceOverLifetime: function(v) { return CS.Call(3, 130, 27, false, this, v); },
        get_colorOverLifetime: function() { return CS.Call(2, 130, 28, false, this); },
        set_colorOverLifetime: function(v) { return CS.Call(3, 130, 28, false, this, v); },
        get_colorBySpeed: function() { return CS.Call(2, 130, 29, false, this); },
        set_colorBySpeed: function(v) { return CS.Call(3, 130, 29, false, this, v); },
        get_sizeOverLifetime: function() { return CS.Call(2, 130, 30, false, this); },
        set_sizeOverLifetime: function(v) { return CS.Call(3, 130, 30, false, this, v); },
        get_sizeBySpeed: function() { return CS.Call(2, 130, 31, false, this); },
        set_sizeBySpeed: function(v) { return CS.Call(3, 130, 31, false, this, v); },
        get_rotationOverLifetime: function() { return CS.Call(2, 130, 32, false, this); },
        set_rotationOverLifetime: function(v) { return CS.Call(3, 130, 32, false, this, v); },
        get_rotationBySpeed: function() { return CS.Call(2, 130, 33, false, this); },
        set_rotationBySpeed: function(v) { return CS.Call(3, 130, 33, false, this, v); },
        get_externalForces: function() { return CS.Call(2, 130, 34, false, this); },
        set_externalForces: function(v) { return CS.Call(3, 130, 34, false, this, v); },
        get_collision: function() { return CS.Call(2, 130, 35, false, this); },
        set_collision: function(v) { return CS.Call(3, 130, 35, false, this, v); },
        get_trigger: function() { return CS.Call(2, 130, 36, false, this); },
        set_trigger: function(v) { return CS.Call(3, 130, 36, false, this, v); },
        get_subEmitters: function() { return CS.Call(2, 130, 37, false, this); },
        set_subEmitters: function(v) { return CS.Call(3, 130, 37, false, this, v); },
        get_textureSheetAnimation: function() { return CS.Call(2, 130, 38, false, this); },
        set_textureSheetAnimation: function(v) { return CS.Call(3, 130, 38, false, this, v); },
        Clear$$Boolean: function(a0/*Boolean*/) { 
            return CS.Call(4, 130, 0, false, this, a0); //Ret: Void
        },
        Clear: function() { 
            return CS.Call(4, 130, 1, false, this); //Ret: Void
        },
        Emit$$EmitParams$$Int32: function(a0/*EmitParams*/, a1/*Int32*/) { 
            return CS.Call(4, 130, 2, false, this, a0, a1); //Ret: Void
        },
        Emit$$Int32: function(a0/*Int32*/) { 
            return CS.Call(4, 130, 3, false, this, a0); //Ret: Void
        },
        GetParticles: function(a0/*Particle[]*/) { 
            return CS.Call(4, 130, 4, false, this, a0); //Ret: Int32
        },
        IsAlive$$Boolean: function(a0/*Boolean*/) { 
            return CS.Call(4, 130, 5, false, this, a0); //Ret: Boolean
        },
        IsAlive: function() { 
            return CS.Call(4, 130, 6, false, this); //Ret: Boolean
        },
        Pause$$Boolean: function(a0/*Boolean*/) { 
            return CS.Call(4, 130, 7, false, this, a0); //Ret: Void
        },
        Pause: function() { 
            return CS.Call(4, 130, 8, false, this); //Ret: Void
        },
        Play$$Boolean: function(a0/*Boolean*/) { 
            return CS.Call(4, 130, 9, false, this, a0); //Ret: Void
        },
        Play: function() { 
            return CS.Call(4, 130, 10, false, this); //Ret: Void
        },
        SetParticles: function(a0/*Particle[]*/, a1/*Int32*/) { 
            return CS.Call(4, 130, 11, false, this, a0, a1); //Ret: Void
        },
        Simulate$$Single$$Boolean$$Boolean$$Boolean: function(a0/*Single*/, a1/*Boolean*/, a2/*Boolean*/, a3/*Boolean*/) { 
            return CS.Call(4, 130, 12, false, this, a0, a1, a2, a3); //Ret: Void
        },
        Simulate$$Single$$Boolean$$Boolean: function(a0/*Single*/, a1/*Boolean*/, a2/*Boolean*/) { 
            return CS.Call(4, 130, 13, false, this, a0, a1, a2); //Ret: Void
        },
        Simulate$$Single$$Boolean: function(a0/*Single*/, a1/*Boolean*/) { 
            return CS.Call(4, 130, 14, false, this, a0, a1); //Ret: Void
        },
        Simulate$$Single: function(a0/*Single*/) { 
            return CS.Call(4, 130, 15, false, this, a0); //Ret: Void
        },
        Stop$$Boolean: function(a0/*Boolean*/) { 
            return CS.Call(4, 130, 16, false, this, a0); //Ret: Void
        },
        Stop: function() { 
            return CS.Call(4, 130, 17, false, this); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$ParticleSystem);

// UnityEngine.ParticleSystem+Burst
var UnityEngine$ParticleSystem$Burst = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.ParticleSystem.Burst",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    definition: {
        ctor: function() { CS.Call(5, 131, 0, true, this); },
        ctor$$Single$$Int16: function(a0, a1) { CS.Call(5, 131, 1, true, this, a0, a1); },
        ctor$$Single$$Int16$$Int16: function(a0, a1, a2) { CS.Call(5, 131, 2, true, this, a0, a1, a2); },
        get_time: function() { return CS.Call(2, 131, 0, false, this); },
        set_time: function(v) { return CS.Call(3, 131, 0, false, this, v); },
        get_minCount: function() { return CS.Call(2, 131, 1, false, this); },
        set_minCount: function(v) { return CS.Call(3, 131, 1, false, this, v); },
        get_maxCount: function() { return CS.Call(2, 131, 2, false, this); },
        set_maxCount: function(v) { return CS.Call(3, 131, 2, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$ParticleSystem$Burst);

// UnityEngine.ParticleSystem+MinMaxCurve
var UnityEngine$ParticleSystem$MinMaxCurve = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.ParticleSystem.MinMaxCurve",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    staticDefinition: {
        op_Implicit: function(a0/*Single*/) { 
            return CS.Call(4, 132, 2, true, a0); //Ret: MinMaxCurve
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 132, 0, true, this); },
        ctor$$Single: function(a0) { CS.Call(5, 132, 1, true, this, a0); },
        ctor$$Single$$AnimationCurve: function(a0, a1) { CS.Call(5, 132, 2, true, this, a0, a1); },
        ctor$$Single$$AnimationCurve$$AnimationCurve: function(a0, a1, a2) { CS.Call(5, 132, 3, true, this, a0, a1, a2); },
        ctor$$Single$$Single: function(a0, a1) { CS.Call(5, 132, 4, true, this, a0, a1); },
        get_mode: function() { return CS.Call(2, 132, 0, false, this); },
        set_mode: function(v) { return CS.Call(3, 132, 0, false, this, v); },
        get_curveScalar: function() { return CS.Call(2, 132, 1, false, this); },
        set_curveScalar: function(v) { return CS.Call(3, 132, 1, false, this, v); },
        get_curveMax: function() { return CS.Call(2, 132, 2, false, this); },
        set_curveMax: function(v) { return CS.Call(3, 132, 2, false, this, v); },
        get_curveMin: function() { return CS.Call(2, 132, 3, false, this); },
        set_curveMin: function(v) { return CS.Call(3, 132, 3, false, this, v); },
        get_constantMax: function() { return CS.Call(2, 132, 4, false, this); },
        set_constantMax: function(v) { return CS.Call(3, 132, 4, false, this, v); },
        get_constantMin: function() { return CS.Call(2, 132, 5, false, this); },
        set_constantMin: function(v) { return CS.Call(3, 132, 5, false, this, v); },
        get_constant: function() { return CS.Call(2, 132, 6, false, this); },
        set_constant: function(v) { return CS.Call(3, 132, 6, false, this, v); },
        get_curve: function() { return CS.Call(2, 132, 7, false, this); },
        set_curve: function(v) { return CS.Call(3, 132, 7, false, this, v); },
        Evaluate$$Single$$Single: function(a0/*Single*/, a1/*Single*/) { 
            return CS.Call(4, 132, 0, false, this, a0, a1); //Ret: Single
        },
        Evaluate$$Single: function(a0/*Single*/) { 
            return CS.Call(4, 132, 1, false, this, a0); //Ret: Single
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$ParticleSystem$MinMaxCurve);

// UnityEngine.ParticleSystem+MinMaxGradient
var UnityEngine$ParticleSystem$MinMaxGradient = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.ParticleSystem.MinMaxGradient",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    staticDefinition: {
        op_Implicit$$Gradient: function(a0/*Gradient*/) { 
            return CS.Call(4, 133, 2, true, a0); //Ret: MinMaxGradient
        },
        op_Implicit$$Color: function(a0/*Color*/) { 
            return CS.Call(4, 133, 3, true, a0); //Ret: MinMaxGradient
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 133, 0, true, this); },
        ctor$$Color: function(a0) { CS.Call(5, 133, 1, true, this, a0); },
        ctor$$Gradient: function(a0) { CS.Call(5, 133, 2, true, this, a0); },
        ctor$$Color$$Color: function(a0, a1) { CS.Call(5, 133, 3, true, this, a0, a1); },
        ctor$$Gradient$$Gradient: function(a0, a1) { CS.Call(5, 133, 4, true, this, a0, a1); },
        get_mode: function() { return CS.Call(2, 133, 0, false, this); },
        set_mode: function(v) { return CS.Call(3, 133, 0, false, this, v); },
        get_gradientMax: function() { return CS.Call(2, 133, 1, false, this); },
        set_gradientMax: function(v) { return CS.Call(3, 133, 1, false, this, v); },
        get_gradientMin: function() { return CS.Call(2, 133, 2, false, this); },
        set_gradientMin: function(v) { return CS.Call(3, 133, 2, false, this, v); },
        get_colorMax: function() { return CS.Call(2, 133, 3, false, this); },
        set_colorMax: function(v) { return CS.Call(3, 133, 3, false, this, v); },
        get_colorMin: function() { return CS.Call(2, 133, 4, false, this); },
        set_colorMin: function(v) { return CS.Call(3, 133, 4, false, this, v); },
        get_color: function() { return CS.Call(2, 133, 5, false, this); },
        set_color: function(v) { return CS.Call(3, 133, 5, false, this, v); },
        get_gradient: function() { return CS.Call(2, 133, 6, false, this); },
        set_gradient: function(v) { return CS.Call(3, 133, 6, false, this, v); },
        Evaluate$$Single$$Single: function(a0/*Single*/, a1/*Single*/) { 
            return CS.Call(4, 133, 0, false, this, a0, a1); //Ret: Color
        },
        Evaluate$$Single: function(a0/*Single*/) { 
            return CS.Call(4, 133, 1, false, this, a0); //Ret: Color
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$ParticleSystem$MinMaxGradient);

// UnityEngine.ParticleSystem+EmissionModule
var UnityEngine$ParticleSystem$EmissionModule = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.ParticleSystem.EmissionModule",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    definition: {
        get_enabled: function() { return CS.Call(2, 134, 0, false, this); },
        set_enabled: function(v) { return CS.Call(3, 134, 0, false, this, v); },
        get_rate: function() { return CS.Call(2, 134, 1, false, this); },
        set_rate: function(v) { return CS.Call(3, 134, 1, false, this, v); },
        get_type: function() { return CS.Call(2, 134, 2, false, this); },
        set_type: function(v) { return CS.Call(3, 134, 2, false, this, v); },
        get_burstCount: function() { return CS.Call(2, 134, 3, false, this); },
        set_burstCount: function(v) { return CS.Call(3, 134, 3, false, this, v); },
        GetBursts: function(a0/*Burst[]*/) { 
            return CS.Call(4, 134, 0, false, this, a0); //Ret: Int32
        },
        SetBursts$$Burst$Array$$Int32: function(a0/*Burst[]*/, a1/*Int32*/) { 
            return CS.Call(4, 134, 1, false, this, a0, a1); //Ret: Void
        },
        SetBursts$$Burst$Array: function(a0/*Burst[]*/) { 
            return CS.Call(4, 134, 2, false, this, a0); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$ParticleSystem$EmissionModule);

// UnityEngine.ParticleSystem+ShapeModule
var UnityEngine$ParticleSystem$ShapeModule = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.ParticleSystem.ShapeModule",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    definition: {
        get_enabled: function() { return CS.Call(2, 135, 0, false, this); },
        set_enabled: function(v) { return CS.Call(3, 135, 0, false, this, v); },
        get_shapeType: function() { return CS.Call(2, 135, 1, false, this); },
        set_shapeType: function(v) { return CS.Call(3, 135, 1, false, this, v); },
        get_randomDirection: function() { return CS.Call(2, 135, 2, false, this); },
        set_randomDirection: function(v) { return CS.Call(3, 135, 2, false, this, v); },
        get_radius: function() { return CS.Call(2, 135, 3, false, this); },
        set_radius: function(v) { return CS.Call(3, 135, 3, false, this, v); },
        get_angle: function() { return CS.Call(2, 135, 4, false, this); },
        set_angle: function(v) { return CS.Call(3, 135, 4, false, this, v); },
        get_length: function() { return CS.Call(2, 135, 5, false, this); },
        set_length: function(v) { return CS.Call(3, 135, 5, false, this, v); },
        get_box: function() { return CS.Call(2, 135, 6, false, this); },
        set_box: function(v) { return CS.Call(3, 135, 6, false, this, v); },
        get_meshShapeType: function() { return CS.Call(2, 135, 7, false, this); },
        set_meshShapeType: function(v) { return CS.Call(3, 135, 7, false, this, v); },
        get_mesh: function() { return CS.Call(2, 135, 8, false, this); },
        set_mesh: function(v) { return CS.Call(3, 135, 8, false, this, v); },
        get_meshRenderer: function() { return CS.Call(2, 135, 9, false, this); },
        set_meshRenderer: function(v) { return CS.Call(3, 135, 9, false, this, v); },
        get_skinnedMeshRenderer: function() { return CS.Call(2, 135, 10, false, this); },
        set_skinnedMeshRenderer: function(v) { return CS.Call(3, 135, 10, false, this, v); },
        get_useMeshMaterialIndex: function() { return CS.Call(2, 135, 11, false, this); },
        set_useMeshMaterialIndex: function(v) { return CS.Call(3, 135, 11, false, this, v); },
        get_meshMaterialIndex: function() { return CS.Call(2, 135, 12, false, this); },
        set_meshMaterialIndex: function(v) { return CS.Call(3, 135, 12, false, this, v); },
        get_useMeshColors: function() { return CS.Call(2, 135, 13, false, this); },
        set_useMeshColors: function(v) { return CS.Call(3, 135, 13, false, this, v); },
        get_normalOffset: function() { return CS.Call(2, 135, 14, false, this); },
        set_normalOffset: function(v) { return CS.Call(3, 135, 14, false, this, v); },
        get_arc: function() { return CS.Call(2, 135, 15, false, this); },
        set_arc: function(v) { return CS.Call(3, 135, 15, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$ParticleSystem$ShapeModule);

// UnityEngine.ParticleSystem+VelocityOverLifetimeModule
var UnityEngine$ParticleSystem$VelocityOverLifetimeModule = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.ParticleSystem.VelocityOverLifetimeModule",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    definition: {
        get_enabled: function() { return CS.Call(2, 136, 0, false, this); },
        set_enabled: function(v) { return CS.Call(3, 136, 0, false, this, v); },
        get_x: function() { return CS.Call(2, 136, 1, false, this); },
        set_x: function(v) { return CS.Call(3, 136, 1, false, this, v); },
        get_y: function() { return CS.Call(2, 136, 2, false, this); },
        set_y: function(v) { return CS.Call(3, 136, 2, false, this, v); },
        get_z: function() { return CS.Call(2, 136, 3, false, this); },
        set_z: function(v) { return CS.Call(3, 136, 3, false, this, v); },
        get_space: function() { return CS.Call(2, 136, 4, false, this); },
        set_space: function(v) { return CS.Call(3, 136, 4, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$ParticleSystem$VelocityOverLifetimeModule);

// UnityEngine.ParticleSystem+LimitVelocityOverLifetimeModule
var UnityEngine$ParticleSystem$LimitVelocityOverLifetimeModule = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.ParticleSystem.LimitVelocityOverLifetimeModule",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    definition: {
        get_enabled: function() { return CS.Call(2, 137, 0, false, this); },
        set_enabled: function(v) { return CS.Call(3, 137, 0, false, this, v); },
        get_limitX: function() { return CS.Call(2, 137, 1, false, this); },
        set_limitX: function(v) { return CS.Call(3, 137, 1, false, this, v); },
        get_limitY: function() { return CS.Call(2, 137, 2, false, this); },
        set_limitY: function(v) { return CS.Call(3, 137, 2, false, this, v); },
        get_limitZ: function() { return CS.Call(2, 137, 3, false, this); },
        set_limitZ: function(v) { return CS.Call(3, 137, 3, false, this, v); },
        get_limit: function() { return CS.Call(2, 137, 4, false, this); },
        set_limit: function(v) { return CS.Call(3, 137, 4, false, this, v); },
        get_dampen: function() { return CS.Call(2, 137, 5, false, this); },
        set_dampen: function(v) { return CS.Call(3, 137, 5, false, this, v); },
        get_separateAxes: function() { return CS.Call(2, 137, 6, false, this); },
        set_separateAxes: function(v) { return CS.Call(3, 137, 6, false, this, v); },
        get_space: function() { return CS.Call(2, 137, 7, false, this); },
        set_space: function(v) { return CS.Call(3, 137, 7, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$ParticleSystem$LimitVelocityOverLifetimeModule);

// UnityEngine.ParticleSystem+InheritVelocityModule
var UnityEngine$ParticleSystem$InheritVelocityModule = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.ParticleSystem.InheritVelocityModule",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    definition: {
        get_enabled: function() { return CS.Call(2, 138, 0, false, this); },
        set_enabled: function(v) { return CS.Call(3, 138, 0, false, this, v); },
        get_mode: function() { return CS.Call(2, 138, 1, false, this); },
        set_mode: function(v) { return CS.Call(3, 138, 1, false, this, v); },
        get_curve: function() { return CS.Call(2, 138, 2, false, this); },
        set_curve: function(v) { return CS.Call(3, 138, 2, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$ParticleSystem$InheritVelocityModule);

// UnityEngine.ParticleSystem+ForceOverLifetimeModule
var UnityEngine$ParticleSystem$ForceOverLifetimeModule = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.ParticleSystem.ForceOverLifetimeModule",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    definition: {
        get_enabled: function() { return CS.Call(2, 139, 0, false, this); },
        set_enabled: function(v) { return CS.Call(3, 139, 0, false, this, v); },
        get_x: function() { return CS.Call(2, 139, 1, false, this); },
        set_x: function(v) { return CS.Call(3, 139, 1, false, this, v); },
        get_y: function() { return CS.Call(2, 139, 2, false, this); },
        set_y: function(v) { return CS.Call(3, 139, 2, false, this, v); },
        get_z: function() { return CS.Call(2, 139, 3, false, this); },
        set_z: function(v) { return CS.Call(3, 139, 3, false, this, v); },
        get_space: function() { return CS.Call(2, 139, 4, false, this); },
        set_space: function(v) { return CS.Call(3, 139, 4, false, this, v); },
        get_randomized: function() { return CS.Call(2, 139, 5, false, this); },
        set_randomized: function(v) { return CS.Call(3, 139, 5, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$ParticleSystem$ForceOverLifetimeModule);

// UnityEngine.ParticleSystem+ColorOverLifetimeModule
var UnityEngine$ParticleSystem$ColorOverLifetimeModule = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.ParticleSystem.ColorOverLifetimeModule",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    definition: {
        get_enabled: function() { return CS.Call(2, 140, 0, false, this); },
        set_enabled: function(v) { return CS.Call(3, 140, 0, false, this, v); },
        get_color: function() { return CS.Call(2, 140, 1, false, this); },
        set_color: function(v) { return CS.Call(3, 140, 1, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$ParticleSystem$ColorOverLifetimeModule);

// UnityEngine.ParticleSystem+ColorBySpeedModule
var UnityEngine$ParticleSystem$ColorBySpeedModule = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.ParticleSystem.ColorBySpeedModule",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    definition: {
        get_enabled: function() { return CS.Call(2, 141, 0, false, this); },
        set_enabled: function(v) { return CS.Call(3, 141, 0, false, this, v); },
        get_color: function() { return CS.Call(2, 141, 1, false, this); },
        set_color: function(v) { return CS.Call(3, 141, 1, false, this, v); },
        get_range: function() { return CS.Call(2, 141, 2, false, this); },
        set_range: function(v) { return CS.Call(3, 141, 2, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$ParticleSystem$ColorBySpeedModule);

// UnityEngine.ParticleSystem+SizeOverLifetimeModule
var UnityEngine$ParticleSystem$SizeOverLifetimeModule = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.ParticleSystem.SizeOverLifetimeModule",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    definition: {
        get_enabled: function() { return CS.Call(2, 142, 0, false, this); },
        set_enabled: function(v) { return CS.Call(3, 142, 0, false, this, v); },
        get_size: function() { return CS.Call(2, 142, 1, false, this); },
        set_size: function(v) { return CS.Call(3, 142, 1, false, this, v); },
        get_x: function() { return CS.Call(2, 142, 2, false, this); },
        set_x: function(v) { return CS.Call(3, 142, 2, false, this, v); },
        get_y: function() { return CS.Call(2, 142, 3, false, this); },
        set_y: function(v) { return CS.Call(3, 142, 3, false, this, v); },
        get_z: function() { return CS.Call(2, 142, 4, false, this); },
        set_z: function(v) { return CS.Call(3, 142, 4, false, this, v); },
        get_separateAxes: function() { return CS.Call(2, 142, 5, false, this); },
        set_separateAxes: function(v) { return CS.Call(3, 142, 5, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$ParticleSystem$SizeOverLifetimeModule);

// UnityEngine.ParticleSystem+SizeBySpeedModule
var UnityEngine$ParticleSystem$SizeBySpeedModule = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.ParticleSystem.SizeBySpeedModule",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    definition: {
        get_enabled: function() { return CS.Call(2, 143, 0, false, this); },
        set_enabled: function(v) { return CS.Call(3, 143, 0, false, this, v); },
        get_size: function() { return CS.Call(2, 143, 1, false, this); },
        set_size: function(v) { return CS.Call(3, 143, 1, false, this, v); },
        get_x: function() { return CS.Call(2, 143, 2, false, this); },
        set_x: function(v) { return CS.Call(3, 143, 2, false, this, v); },
        get_y: function() { return CS.Call(2, 143, 3, false, this); },
        set_y: function(v) { return CS.Call(3, 143, 3, false, this, v); },
        get_z: function() { return CS.Call(2, 143, 4, false, this); },
        set_z: function(v) { return CS.Call(3, 143, 4, false, this, v); },
        get_separateAxes: function() { return CS.Call(2, 143, 5, false, this); },
        set_separateAxes: function(v) { return CS.Call(3, 143, 5, false, this, v); },
        get_range: function() { return CS.Call(2, 143, 6, false, this); },
        set_range: function(v) { return CS.Call(3, 143, 6, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$ParticleSystem$SizeBySpeedModule);

// UnityEngine.ParticleSystem+RotationOverLifetimeModule
var UnityEngine$ParticleSystem$RotationOverLifetimeModule = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.ParticleSystem.RotationOverLifetimeModule",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    definition: {
        get_enabled: function() { return CS.Call(2, 144, 0, false, this); },
        set_enabled: function(v) { return CS.Call(3, 144, 0, false, this, v); },
        get_x: function() { return CS.Call(2, 144, 1, false, this); },
        set_x: function(v) { return CS.Call(3, 144, 1, false, this, v); },
        get_y: function() { return CS.Call(2, 144, 2, false, this); },
        set_y: function(v) { return CS.Call(3, 144, 2, false, this, v); },
        get_z: function() { return CS.Call(2, 144, 3, false, this); },
        set_z: function(v) { return CS.Call(3, 144, 3, false, this, v); },
        get_separateAxes: function() { return CS.Call(2, 144, 4, false, this); },
        set_separateAxes: function(v) { return CS.Call(3, 144, 4, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$ParticleSystem$RotationOverLifetimeModule);

// UnityEngine.ParticleSystem+RotationBySpeedModule
var UnityEngine$ParticleSystem$RotationBySpeedModule = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.ParticleSystem.RotationBySpeedModule",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    definition: {
        get_enabled: function() { return CS.Call(2, 145, 0, false, this); },
        set_enabled: function(v) { return CS.Call(3, 145, 0, false, this, v); },
        get_x: function() { return CS.Call(2, 145, 1, false, this); },
        set_x: function(v) { return CS.Call(3, 145, 1, false, this, v); },
        get_y: function() { return CS.Call(2, 145, 2, false, this); },
        set_y: function(v) { return CS.Call(3, 145, 2, false, this, v); },
        get_z: function() { return CS.Call(2, 145, 3, false, this); },
        set_z: function(v) { return CS.Call(3, 145, 3, false, this, v); },
        get_separateAxes: function() { return CS.Call(2, 145, 4, false, this); },
        set_separateAxes: function(v) { return CS.Call(3, 145, 4, false, this, v); },
        get_range: function() { return CS.Call(2, 145, 5, false, this); },
        set_range: function(v) { return CS.Call(3, 145, 5, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$ParticleSystem$RotationBySpeedModule);

// UnityEngine.ParticleSystem+ExternalForcesModule
var UnityEngine$ParticleSystem$ExternalForcesModule = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.ParticleSystem.ExternalForcesModule",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    definition: {
        get_enabled: function() { return CS.Call(2, 146, 0, false, this); },
        set_enabled: function(v) { return CS.Call(3, 146, 0, false, this, v); },
        get_multiplier: function() { return CS.Call(2, 146, 1, false, this); },
        set_multiplier: function(v) { return CS.Call(3, 146, 1, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$ParticleSystem$ExternalForcesModule);

// UnityEngine.ParticleSystem+CollisionModule
var UnityEngine$ParticleSystem$CollisionModule = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.ParticleSystem.CollisionModule",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    definition: {
        get_enabled: function() { return CS.Call(2, 147, 0, false, this); },
        set_enabled: function(v) { return CS.Call(3, 147, 0, false, this, v); },
        get_type: function() { return CS.Call(2, 147, 1, false, this); },
        set_type: function(v) { return CS.Call(3, 147, 1, false, this, v); },
        get_mode: function() { return CS.Call(2, 147, 2, false, this); },
        set_mode: function(v) { return CS.Call(3, 147, 2, false, this, v); },
        get_dampen: function() { return CS.Call(2, 147, 3, false, this); },
        set_dampen: function(v) { return CS.Call(3, 147, 3, false, this, v); },
        get_bounce: function() { return CS.Call(2, 147, 4, false, this); },
        set_bounce: function(v) { return CS.Call(3, 147, 4, false, this, v); },
        get_lifetimeLoss: function() { return CS.Call(2, 147, 5, false, this); },
        set_lifetimeLoss: function(v) { return CS.Call(3, 147, 5, false, this, v); },
        get_minKillSpeed: function() { return CS.Call(2, 147, 6, false, this); },
        set_minKillSpeed: function(v) { return CS.Call(3, 147, 6, false, this, v); },
        get_maxKillSpeed: function() { return CS.Call(2, 147, 7, false, this); },
        set_maxKillSpeed: function(v) { return CS.Call(3, 147, 7, false, this, v); },
        get_collidesWith: function() { return CS.Call(2, 147, 8, false, this); },
        set_collidesWith: function(v) { return CS.Call(3, 147, 8, false, this, v); },
        get_enableDynamicColliders: function() { return CS.Call(2, 147, 9, false, this); },
        set_enableDynamicColliders: function(v) { return CS.Call(3, 147, 9, false, this, v); },
        get_enableInteriorCollisions: function() { return CS.Call(2, 147, 10, false, this); },
        set_enableInteriorCollisions: function(v) { return CS.Call(3, 147, 10, false, this, v); },
        get_maxCollisionShapes: function() { return CS.Call(2, 147, 11, false, this); },
        set_maxCollisionShapes: function(v) { return CS.Call(3, 147, 11, false, this, v); },
        get_quality: function() { return CS.Call(2, 147, 12, false, this); },
        set_quality: function(v) { return CS.Call(3, 147, 12, false, this, v); },
        get_voxelSize: function() { return CS.Call(2, 147, 13, false, this); },
        set_voxelSize: function(v) { return CS.Call(3, 147, 13, false, this, v); },
        get_radiusScale: function() { return CS.Call(2, 147, 14, false, this); },
        set_radiusScale: function(v) { return CS.Call(3, 147, 14, false, this, v); },
        get_sendCollisionMessages: function() { return CS.Call(2, 147, 15, false, this); },
        set_sendCollisionMessages: function(v) { return CS.Call(3, 147, 15, false, this, v); },
        get_maxPlaneCount: function() { return CS.Call(2, 147, 16, false, this); },
        set_maxPlaneCount: function(v) { return CS.Call(3, 147, 16, false, this, v); },
        GetPlane: function(a0/*Int32*/) { 
            return CS.Call(4, 147, 0, false, this, a0); //Ret: Transform
        },
        SetPlane: function(a0/*Int32*/, a1/*Transform*/) { 
            return CS.Call(4, 147, 1, false, this, a0, a1); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$ParticleSystem$CollisionModule);

// UnityEngine.ParticleSystem+TriggerModule
var UnityEngine$ParticleSystem$TriggerModule = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.ParticleSystem.TriggerModule",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    definition: {
        get_enabled: function() { return CS.Call(2, 148, 0, false, this); },
        set_enabled: function(v) { return CS.Call(3, 148, 0, false, this, v); },
        get_inside: function() { return CS.Call(2, 148, 1, false, this); },
        set_inside: function(v) { return CS.Call(3, 148, 1, false, this, v); },
        get_outside: function() { return CS.Call(2, 148, 2, false, this); },
        set_outside: function(v) { return CS.Call(3, 148, 2, false, this, v); },
        get_enter: function() { return CS.Call(2, 148, 3, false, this); },
        set_enter: function(v) { return CS.Call(3, 148, 3, false, this, v); },
        get_exit: function() { return CS.Call(2, 148, 4, false, this); },
        set_exit: function(v) { return CS.Call(3, 148, 4, false, this, v); },
        get_radiusScale: function() { return CS.Call(2, 148, 5, false, this); },
        set_radiusScale: function(v) { return CS.Call(3, 148, 5, false, this, v); },
        get_maxColliderCount: function() { return CS.Call(2, 148, 6, false, this); },
        set_maxColliderCount: function(v) { return CS.Call(3, 148, 6, false, this, v); },
        GetCollider: function(a0/*Int32*/) { 
            return CS.Call(4, 148, 0, false, this, a0); //Ret: Component
        },
        SetCollider: function(a0/*Int32*/, a1/*Component*/) { 
            return CS.Call(4, 148, 1, false, this, a0, a1); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$ParticleSystem$TriggerModule);

// UnityEngine.ParticleSystem+SubEmittersModule
var UnityEngine$ParticleSystem$SubEmittersModule = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.ParticleSystem.SubEmittersModule",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    definition: {
        get_enabled: function() { return CS.Call(2, 149, 0, false, this); },
        set_enabled: function(v) { return CS.Call(3, 149, 0, false, this, v); },
        get_birth0: function() { return CS.Call(2, 149, 1, false, this); },
        set_birth0: function(v) { return CS.Call(3, 149, 1, false, this, v); },
        get_birth1: function() { return CS.Call(2, 149, 2, false, this); },
        set_birth1: function(v) { return CS.Call(3, 149, 2, false, this, v); },
        get_collision0: function() { return CS.Call(2, 149, 3, false, this); },
        set_collision0: function(v) { return CS.Call(3, 149, 3, false, this, v); },
        get_collision1: function() { return CS.Call(2, 149, 4, false, this); },
        set_collision1: function(v) { return CS.Call(3, 149, 4, false, this, v); },
        get_death0: function() { return CS.Call(2, 149, 5, false, this); },
        set_death0: function(v) { return CS.Call(3, 149, 5, false, this, v); },
        get_death1: function() { return CS.Call(2, 149, 6, false, this); },
        set_death1: function(v) { return CS.Call(3, 149, 6, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$ParticleSystem$SubEmittersModule);

// UnityEngine.ParticleSystem+TextureSheetAnimationModule
var UnityEngine$ParticleSystem$TextureSheetAnimationModule = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.ParticleSystem.TextureSheetAnimationModule",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    definition: {
        get_enabled: function() { return CS.Call(2, 150, 0, false, this); },
        set_enabled: function(v) { return CS.Call(3, 150, 0, false, this, v); },
        get_numTilesX: function() { return CS.Call(2, 150, 1, false, this); },
        set_numTilesX: function(v) { return CS.Call(3, 150, 1, false, this, v); },
        get_numTilesY: function() { return CS.Call(2, 150, 2, false, this); },
        set_numTilesY: function(v) { return CS.Call(3, 150, 2, false, this, v); },
        get_animation: function() { return CS.Call(2, 150, 3, false, this); },
        set_animation: function(v) { return CS.Call(3, 150, 3, false, this, v); },
        get_useRandomRow: function() { return CS.Call(2, 150, 4, false, this); },
        set_useRandomRow: function(v) { return CS.Call(3, 150, 4, false, this, v); },
        get_frameOverTime: function() { return CS.Call(2, 150, 5, false, this); },
        set_frameOverTime: function(v) { return CS.Call(3, 150, 5, false, this, v); },
        get_startFrame: function() { return CS.Call(2, 150, 6, false, this); },
        set_startFrame: function(v) { return CS.Call(3, 150, 6, false, this, v); },
        get_cycleCount: function() { return CS.Call(2, 150, 7, false, this); },
        set_cycleCount: function(v) { return CS.Call(3, 150, 7, false, this, v); },
        get_rowIndex: function() { return CS.Call(2, 150, 8, false, this); },
        set_rowIndex: function(v) { return CS.Call(3, 150, 8, false, this, v); },
        get_uvChannelMask: function() { return CS.Call(2, 150, 9, false, this); },
        set_uvChannelMask: function(v) { return CS.Call(3, 150, 9, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$ParticleSystem$TextureSheetAnimationModule);

// UnityEngine.ParticleSystem+Particle
var UnityEngine$ParticleSystem$Particle = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.ParticleSystem.Particle",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    definition: {
        ctor: function() { CS.Call(5, 151, 0, true, this); },
        get_position: function() { return CS.Call(2, 151, 0, false, this); },
        set_position: function(v) { return CS.Call(3, 151, 0, false, this, v); },
        get_velocity: function() { return CS.Call(2, 151, 1, false, this); },
        set_velocity: function(v) { return CS.Call(3, 151, 1, false, this, v); },
        get_lifetime: function() { return CS.Call(2, 151, 2, false, this); },
        set_lifetime: function(v) { return CS.Call(3, 151, 2, false, this, v); },
        get_startLifetime: function() { return CS.Call(2, 151, 3, false, this); },
        set_startLifetime: function(v) { return CS.Call(3, 151, 3, false, this, v); },
        get_startSize: function() { return CS.Call(2, 151, 4, false, this); },
        set_startSize: function(v) { return CS.Call(3, 151, 4, false, this, v); },
        get_startSize3D: function() { return CS.Call(2, 151, 5, false, this); },
        set_startSize3D: function(v) { return CS.Call(3, 151, 5, false, this, v); },
        get_axisOfRotation: function() { return CS.Call(2, 151, 6, false, this); },
        set_axisOfRotation: function(v) { return CS.Call(3, 151, 6, false, this, v); },
        get_rotation: function() { return CS.Call(2, 151, 7, false, this); },
        set_rotation: function(v) { return CS.Call(3, 151, 7, false, this, v); },
        get_rotation3D: function() { return CS.Call(2, 151, 8, false, this); },
        set_rotation3D: function(v) { return CS.Call(3, 151, 8, false, this, v); },
        get_angularVelocity: function() { return CS.Call(2, 151, 9, false, this); },
        set_angularVelocity: function(v) { return CS.Call(3, 151, 9, false, this, v); },
        get_angularVelocity3D: function() { return CS.Call(2, 151, 10, false, this); },
        set_angularVelocity3D: function(v) { return CS.Call(3, 151, 10, false, this, v); },
        get_startColor: function() { return CS.Call(2, 151, 11, false, this); },
        set_startColor: function(v) { return CS.Call(3, 151, 11, false, this, v); },
        get_randomSeed: function() { return CS.Call(2, 151, 12, false, this); },
        set_randomSeed: function(v) { return CS.Call(3, 151, 12, false, this, v); },
        GetCurrentColor: function(a0/*ParticleSystem*/) { 
            return CS.Call(4, 151, 0, false, this, a0); //Ret: Color32
        },
        GetCurrentSize: function(a0/*ParticleSystem*/) { 
            return CS.Call(4, 151, 1, false, this, a0); //Ret: Single
        },
        GetCurrentSize3D: function(a0/*ParticleSystem*/) { 
            return CS.Call(4, 151, 2, false, this, a0); //Ret: Vector3
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$ParticleSystem$Particle);

// UnityEngine.ParticleSystem+EmitParams
var UnityEngine$ParticleSystem$EmitParams = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.ParticleSystem.EmitParams",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    definition: {
        ctor: function() { CS.Call(5, 152, 0, true, this); },
        get_position: function() { return CS.Call(2, 152, 0, false, this); },
        set_position: function(v) { return CS.Call(3, 152, 0, false, this, v); },
        get_applyShapeToPosition: function() { return CS.Call(2, 152, 1, false, this); },
        set_applyShapeToPosition: function(v) { return CS.Call(3, 152, 1, false, this, v); },
        get_velocity: function() { return CS.Call(2, 152, 2, false, this); },
        set_velocity: function(v) { return CS.Call(3, 152, 2, false, this, v); },
        get_startLifetime: function() { return CS.Call(2, 152, 3, false, this); },
        set_startLifetime: function(v) { return CS.Call(3, 152, 3, false, this, v); },
        get_startSize: function() { return CS.Call(2, 152, 4, false, this); },
        set_startSize: function(v) { return CS.Call(3, 152, 4, false, this, v); },
        get_startSize3D: function() { return CS.Call(2, 152, 5, false, this); },
        set_startSize3D: function(v) { return CS.Call(3, 152, 5, false, this, v); },
        get_axisOfRotation: function() { return CS.Call(2, 152, 6, false, this); },
        set_axisOfRotation: function(v) { return CS.Call(3, 152, 6, false, this, v); },
        get_rotation: function() { return CS.Call(2, 152, 7, false, this); },
        set_rotation: function(v) { return CS.Call(3, 152, 7, false, this, v); },
        get_rotation3D: function() { return CS.Call(2, 152, 8, false, this); },
        set_rotation3D: function(v) { return CS.Call(3, 152, 8, false, this, v); },
        get_angularVelocity: function() { return CS.Call(2, 152, 9, false, this); },
        set_angularVelocity: function(v) { return CS.Call(3, 152, 9, false, this, v); },
        get_angularVelocity3D: function() { return CS.Call(2, 152, 10, false, this); },
        set_angularVelocity3D: function(v) { return CS.Call(3, 152, 10, false, this, v); },
        get_startColor: function() { return CS.Call(2, 152, 11, false, this); },
        set_startColor: function(v) { return CS.Call(3, 152, 11, false, this, v); },
        get_randomSeed: function() { return CS.Call(2, 152, 12, false, this); },
        set_randomSeed: function(v) { return CS.Call(3, 152, 12, false, this, v); },
        ResetAngularVelocity: function() { 
            return CS.Call(4, 152, 0, false, this); //Ret: Void
        },
        ResetAxisOfRotation: function() { 
            return CS.Call(4, 152, 1, false, this); //Ret: Void
        },
        ResetPosition: function() { 
            return CS.Call(4, 152, 2, false, this); //Ret: Void
        },
        ResetRandomSeed: function() { 
            return CS.Call(4, 152, 3, false, this); //Ret: Void
        },
        ResetRotation: function() { 
            return CS.Call(4, 152, 4, false, this); //Ret: Void
        },
        ResetStartColor: function() { 
            return CS.Call(4, 152, 5, false, this); //Ret: Void
        },
        ResetStartLifetime: function() { 
            return CS.Call(4, 152, 6, false, this); //Ret: Void
        },
        ResetStartSize: function() { 
            return CS.Call(4, 152, 7, false, this); //Ret: Void
        },
        ResetVelocity: function() { 
            return CS.Call(4, 152, 8, false, this); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$ParticleSystem$EmitParams);

// UnityEngine.ParticleSystemRenderer
var UnityEngine$ParticleSystemRenderer = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.ParticleSystemRenderer",
    Kind: "Class",
    baseTypeName: "UnityEngine.Renderer",
    definition: {
        ctor: function() { CS.Call(5, 153, 0, true, this); },
        get_renderMode: function() { return CS.Call(2, 153, 0, false, this); },
        set_renderMode: function(v) { return CS.Call(3, 153, 0, false, this, v); },
        get_lengthScale: function() { return CS.Call(2, 153, 1, false, this); },
        set_lengthScale: function(v) { return CS.Call(3, 153, 1, false, this, v); },
        get_velocityScale: function() { return CS.Call(2, 153, 2, false, this); },
        set_velocityScale: function(v) { return CS.Call(3, 153, 2, false, this, v); },
        get_cameraVelocityScale: function() { return CS.Call(2, 153, 3, false, this); },
        set_cameraVelocityScale: function(v) { return CS.Call(3, 153, 3, false, this, v); },
        get_normalDirection: function() { return CS.Call(2, 153, 4, false, this); },
        set_normalDirection: function(v) { return CS.Call(3, 153, 4, false, this, v); },
        get_alignment: function() { return CS.Call(2, 153, 5, false, this); },
        set_alignment: function(v) { return CS.Call(3, 153, 5, false, this, v); },
        get_pivot: function() { return CS.Call(2, 153, 6, false, this); },
        set_pivot: function(v) { return CS.Call(3, 153, 6, false, this, v); },
        get_sortMode: function() { return CS.Call(2, 153, 7, false, this); },
        set_sortMode: function(v) { return CS.Call(3, 153, 7, false, this, v); },
        get_sortingFudge: function() { return CS.Call(2, 153, 8, false, this); },
        set_sortingFudge: function(v) { return CS.Call(3, 153, 8, false, this, v); },
        get_minParticleSize: function() { return CS.Call(2, 153, 9, false, this); },
        set_minParticleSize: function(v) { return CS.Call(3, 153, 9, false, this, v); },
        get_maxParticleSize: function() { return CS.Call(2, 153, 10, false, this); },
        set_maxParticleSize: function(v) { return CS.Call(3, 153, 10, false, this, v); },
        get_mesh: function() { return CS.Call(2, 153, 11, false, this); },
        set_mesh: function(v) { return CS.Call(3, 153, 11, false, this, v); },
        get_meshCount: function() { return CS.Call(2, 153, 12, false, this); },
        set_meshCount: function(v) { return CS.Call(3, 153, 12, false, this, v); },
        GetMeshes: function(a0/*Mesh[]*/) { 
            return CS.Call(4, 153, 0, false, this, a0); //Ret: Int32
        },
        SetMeshes$$Mesh$Array$$Int32: function(a0/*Mesh[]*/, a1/*Int32*/) { 
            return CS.Call(4, 153, 1, false, this, a0, a1); //Ret: Void
        },
        SetMeshes$$Mesh$Array: function(a0/*Mesh[]*/) { 
            return CS.Call(4, 153, 2, false, this, a0); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$ParticleSystemRenderer);

// UnityEngine.ParticleCollisionEvent
var UnityEngine$ParticleCollisionEvent = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.ParticleCollisionEvent",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    definition: {
        ctor: function() { CS.Call(5, 154, 0, true, this); },
        get_intersection: function() { return CS.Call(2, 154, 0, false, this); },
        set_intersection: function(v) { return CS.Call(3, 154, 0, false, this, v); },
        get_normal: function() { return CS.Call(2, 154, 1, false, this); },
        set_normal: function(v) { return CS.Call(3, 154, 1, false, this, v); },
        get_velocity: function() { return CS.Call(2, 154, 2, false, this); },
        set_velocity: function(v) { return CS.Call(3, 154, 2, false, this, v); },
        get_colliderComponent: function() { return CS.Call(2, 154, 3, false, this); },
        set_colliderComponent: function(v) { return CS.Call(3, 154, 3, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$ParticleCollisionEvent);

// UnityEngine.ParticlePhysicsExtensions
var UnityEngine$ParticlePhysicsExtensions = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.ParticlePhysicsExtensions",
    Kind: "Class",
    baseTypeName: "System.Object",
    staticDefinition: {
        GetCollisionEvents$$ParticleSystem$$GameObject$$List$1$ParticleCollisionEvent: function(a0/*ParticleSystem*/, a1/*GameObject*/, a2/*List`1*/) { 
            return CS.Call(4, 155, 0, true, a0, a1, a2); //Ret: Int32
        },
        GetSafeCollisionEventSize: function(a0/*ParticleSystem*/) { 
            return CS.Call(4, 155, 1, true, a0); //Ret: Int32
        },
        GetSafeTriggerParticlesSize: function(a0/*ParticleSystem*/, a1/*ParticleSystemTriggerEventType*/) { 
            return CS.Call(4, 155, 2, true, a0, a1); //Ret: Int32
        },
        GetTriggerParticles: function(a0/*ParticleSystem*/, a1/*ParticleSystemTriggerEventType*/, a2/*List`1*/) { 
            return CS.Call(4, 155, 3, true, a0, a1, a2); //Ret: Int32
        },
        SetTriggerParticles$$ParticleSystem$$ParticleSystemTriggerEventType$$List$1$Particle$$Int32$$Int32: function(a0/*ParticleSystem*/, a1/*ParticleSystemTriggerEventType*/, a2/*List`1*/, a3/*Int32*/, a4/*Int32*/) { 
            return CS.Call(4, 155, 4, true, a0, a1, a2, a3, a4); //Ret: Void
        },
        SetTriggerParticles$$ParticleSystem$$ParticleSystemTriggerEventType$$List$1$Particle: function(a0/*ParticleSystem*/, a1/*ParticleSystemTriggerEventType*/, a2/*List`1*/) { 
            return CS.Call(4, 155, 5, true, a0, a1, a2); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$ParticlePhysicsExtensions);

// UnityEngine.WheelFrictionCurve
var UnityEngine$WheelFrictionCurve = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.WheelFrictionCurve",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    definition: {
        ctor: function() { CS.Call(5, 156, 0, true, this); },
        get_extremumSlip: function() { return CS.Call(2, 156, 0, false, this); },
        set_extremumSlip: function(v) { return CS.Call(3, 156, 0, false, this, v); },
        get_extremumValue: function() { return CS.Call(2, 156, 1, false, this); },
        set_extremumValue: function(v) { return CS.Call(3, 156, 1, false, this, v); },
        get_asymptoteSlip: function() { return CS.Call(2, 156, 2, false, this); },
        set_asymptoteSlip: function(v) { return CS.Call(3, 156, 2, false, this, v); },
        get_asymptoteValue: function() { return CS.Call(2, 156, 3, false, this); },
        set_asymptoteValue: function(v) { return CS.Call(3, 156, 3, false, this, v); },
        get_stiffness: function() { return CS.Call(2, 156, 4, false, this); },
        set_stiffness: function(v) { return CS.Call(3, 156, 4, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$WheelFrictionCurve);

// UnityEngine.SoftJointLimit
var UnityEngine$SoftJointLimit = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.SoftJointLimit",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    definition: {
        ctor: function() { CS.Call(5, 157, 0, true, this); },
        get_limit: function() { return CS.Call(2, 157, 0, false, this); },
        set_limit: function(v) { return CS.Call(3, 157, 0, false, this, v); },
        get_bounciness: function() { return CS.Call(2, 157, 1, false, this); },
        set_bounciness: function(v) { return CS.Call(3, 157, 1, false, this, v); },
        get_contactDistance: function() { return CS.Call(2, 157, 2, false, this); },
        set_contactDistance: function(v) { return CS.Call(3, 157, 2, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$SoftJointLimit);

// UnityEngine.SoftJointLimitSpring
var UnityEngine$SoftJointLimitSpring = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.SoftJointLimitSpring",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    definition: {
        ctor: function() { CS.Call(5, 158, 0, true, this); },
        get_spring: function() { return CS.Call(2, 158, 0, false, this); },
        set_spring: function(v) { return CS.Call(3, 158, 0, false, this, v); },
        get_damper: function() { return CS.Call(2, 158, 1, false, this); },
        set_damper: function(v) { return CS.Call(3, 158, 1, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$SoftJointLimitSpring);

// UnityEngine.JointDrive
var UnityEngine$JointDrive = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.JointDrive",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    definition: {
        ctor: function() { CS.Call(5, 159, 0, true, this); },
        get_positionSpring: function() { return CS.Call(2, 159, 0, false, this); },
        set_positionSpring: function(v) { return CS.Call(3, 159, 0, false, this, v); },
        get_positionDamper: function() { return CS.Call(2, 159, 1, false, this); },
        set_positionDamper: function(v) { return CS.Call(3, 159, 1, false, this, v); },
        get_maximumForce: function() { return CS.Call(2, 159, 2, false, this); },
        set_maximumForce: function(v) { return CS.Call(3, 159, 2, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$JointDrive);

// UnityEngine.JointMotor
var UnityEngine$JointMotor = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.JointMotor",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    definition: {
        ctor: function() { CS.Call(5, 160, 0, true, this); },
        get_targetVelocity: function() { return CS.Call(2, 160, 0, false, this); },
        set_targetVelocity: function(v) { return CS.Call(3, 160, 0, false, this, v); },
        get_force: function() { return CS.Call(2, 160, 1, false, this); },
        set_force: function(v) { return CS.Call(3, 160, 1, false, this, v); },
        get_freeSpin: function() { return CS.Call(2, 160, 2, false, this); },
        set_freeSpin: function(v) { return CS.Call(3, 160, 2, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$JointMotor);

// UnityEngine.JointSpring
var UnityEngine$JointSpring = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.JointSpring",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    fields: {
        spring: {
            get: function() { return CS.Call(0, 161, 0, false, this); }, 
            set: function(v) { return CS.Call(1, 161, 0, false, this, v); }
        },
        damper: {
            get: function() { return CS.Call(0, 161, 1, false, this); }, 
            set: function(v) { return CS.Call(1, 161, 1, false, this, v); }
        },
        targetPosition: {
            get: function() { return CS.Call(0, 161, 2, false, this); }, 
            set: function(v) { return CS.Call(1, 161, 2, false, this, v); }
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 161, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$JointSpring);

// UnityEngine.JointLimits
var UnityEngine$JointLimits = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.JointLimits",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    definition: {
        ctor: function() { CS.Call(5, 162, 0, true, this); },
        get_min: function() { return CS.Call(2, 162, 0, false, this); },
        set_min: function(v) { return CS.Call(3, 162, 0, false, this, v); },
        get_max: function() { return CS.Call(2, 162, 1, false, this); },
        set_max: function(v) { return CS.Call(3, 162, 1, false, this, v); },
        get_bounciness: function() { return CS.Call(2, 162, 2, false, this); },
        set_bounciness: function(v) { return CS.Call(3, 162, 2, false, this, v); },
        get_bounceMinVelocity: function() { return CS.Call(2, 162, 3, false, this); },
        set_bounceMinVelocity: function(v) { return CS.Call(3, 162, 3, false, this, v); },
        get_contactDistance: function() { return CS.Call(2, 162, 4, false, this); },
        set_contactDistance: function(v) { return CS.Call(3, 162, 4, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$JointLimits);

// UnityEngine.ControllerColliderHit
var UnityEngine$ControllerColliderHit = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.ControllerColliderHit",
    Kind: "Class",
    baseTypeName: "System.Object",
    definition: {
        ctor: function() { CS.Call(5, 163, 0, true, this); },
        get_controller: function() { return CS.Call(2, 163, 0, false, this); },
        set_controller: function(v) { return CS.Call(3, 163, 0, false, this, v); },
        get_collider: function() { return CS.Call(2, 163, 1, false, this); },
        set_collider: function(v) { return CS.Call(3, 163, 1, false, this, v); },
        get_rigidbody: function() { return CS.Call(2, 163, 2, false, this); },
        set_rigidbody: function(v) { return CS.Call(3, 163, 2, false, this, v); },
        get_gameObject: function() { return CS.Call(2, 163, 3, false, this); },
        set_gameObject: function(v) { return CS.Call(3, 163, 3, false, this, v); },
        get_transform: function() { return CS.Call(2, 163, 4, false, this); },
        set_transform: function(v) { return CS.Call(3, 163, 4, false, this, v); },
        get_point: function() { return CS.Call(2, 163, 5, false, this); },
        set_point: function(v) { return CS.Call(3, 163, 5, false, this, v); },
        get_normal: function() { return CS.Call(2, 163, 6, false, this); },
        set_normal: function(v) { return CS.Call(3, 163, 6, false, this, v); },
        get_moveDirection: function() { return CS.Call(2, 163, 7, false, this); },
        set_moveDirection: function(v) { return CS.Call(3, 163, 7, false, this, v); },
        get_moveLength: function() { return CS.Call(2, 163, 8, false, this); },
        set_moveLength: function(v) { return CS.Call(3, 163, 8, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$ControllerColliderHit);

// UnityEngine.Collision
var UnityEngine$Collision = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Collision",
    Kind: "Class",
    baseTypeName: "System.Object",
    definition: {
        ctor: function() { CS.Call(5, 164, 0, true, this); },
        get_relativeVelocity: function() { return CS.Call(2, 164, 0, false, this); },
        set_relativeVelocity: function(v) { return CS.Call(3, 164, 0, false, this, v); },
        get_rigidbody: function() { return CS.Call(2, 164, 1, false, this); },
        set_rigidbody: function(v) { return CS.Call(3, 164, 1, false, this, v); },
        get_collider: function() { return CS.Call(2, 164, 2, false, this); },
        set_collider: function(v) { return CS.Call(3, 164, 2, false, this, v); },
        get_transform: function() { return CS.Call(2, 164, 3, false, this); },
        set_transform: function(v) { return CS.Call(3, 164, 3, false, this, v); },
        get_gameObject: function() { return CS.Call(2, 164, 4, false, this); },
        set_gameObject: function(v) { return CS.Call(3, 164, 4, false, this, v); },
        get_contacts: function() { return CS.Call(2, 164, 5, false, this); },
        set_contacts: function(v) { return CS.Call(3, 164, 5, false, this, v); },
        get_impulse: function() { return CS.Call(2, 164, 6, false, this); },
        set_impulse: function(v) { return CS.Call(3, 164, 6, false, this, v); },
        GetEnumerator: function() { 
            return CS.Call(4, 164, 0, false, this); //Ret: IEnumerator
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Collision);

// UnityEngine.ClothSkinningCoefficient
var UnityEngine$ClothSkinningCoefficient = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.ClothSkinningCoefficient",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    fields: {
        maxDistance: {
            get: function() { return CS.Call(0, 165, 0, false, this); }, 
            set: function(v) { return CS.Call(1, 165, 0, false, this, v); }
        },
        collisionSphereDistance: {
            get: function() { return CS.Call(0, 165, 1, false, this); }, 
            set: function(v) { return CS.Call(1, 165, 1, false, this, v); }
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 165, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$ClothSkinningCoefficient);

// UnityEngine.Physics
var UnityEngine$Physics = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Physics",
    Kind: "Class",
    baseTypeName: "System.Object",
    staticFields: {
        IgnoreRaycastLayer: {
            get: function() { return CS.Call(0, 166, 0, true); }, 
            set: function(v) { return CS.Call(1, 166, 0, true, v); }
        },
        DefaultRaycastLayers: {
            get: function() { return CS.Call(0, 166, 1, true); }, 
            set: function(v) { return CS.Call(1, 166, 1, true, v); }
        },
        AllLayers: {
            get: function() { return CS.Call(0, 166, 2, true); }, 
            set: function(v) { return CS.Call(1, 166, 2, true, v); }
        },
    },
    staticDefinition: {
        get_gravity: function() { return CS.Call(2, 166, 0, true); },
        set_gravity: function(v) { return CS.Call(3, 166, 0, true, v); },
        get_defaultContactOffset: function() { return CS.Call(2, 166, 1, true); },
        set_defaultContactOffset: function(v) { return CS.Call(3, 166, 1, true, v); },
        get_bounceThreshold: function() { return CS.Call(2, 166, 2, true); },
        set_bounceThreshold: function(v) { return CS.Call(3, 166, 2, true, v); },
        get_defaultSolverIterations: function() { return CS.Call(2, 166, 3, true); },
        set_defaultSolverIterations: function(v) { return CS.Call(3, 166, 3, true, v); },
        get_defaultSolverVelocityIterations: function() { return CS.Call(2, 166, 4, true); },
        set_defaultSolverVelocityIterations: function(v) { return CS.Call(3, 166, 4, true, v); },
        get_sleepThreshold: function() { return CS.Call(2, 166, 5, true); },
        set_sleepThreshold: function(v) { return CS.Call(3, 166, 5, true, v); },
        get_queriesHitTriggers: function() { return CS.Call(2, 166, 6, true); },
        set_queriesHitTriggers: function(v) { return CS.Call(3, 166, 6, true, v); },
        BoxCast$$Vector3$$Vector3$$Vector3$$RaycastHit$$Quaternion$$Single$$Int32$$QueryTriggerInteraction: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Vector3*/, a3/*RaycastHit&*/, a4/*Quaternion*/, a5/*Single*/, a6/*Int32*/, a7/*QueryTriggerInteraction*/) { 
            return CS.Call(4, 166, 0, true, a0, a1, a2, a3, a4, a5, a6, a7); //Ret: Boolean
        },
        BoxCast$$Vector3$$Vector3$$Vector3$$RaycastHit$$Quaternion$$Single$$Int32: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Vector3*/, a3/*RaycastHit&*/, a4/*Quaternion*/, a5/*Single*/, a6/*Int32*/) { 
            return CS.Call(4, 166, 1, true, a0, a1, a2, a3, a4, a5, a6); //Ret: Boolean
        },
        BoxCast$$Vector3$$Vector3$$Vector3$$Quaternion$$Single$$Int32$$QueryTriggerInteraction: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Vector3*/, a3/*Quaternion*/, a4/*Single*/, a5/*Int32*/, a6/*QueryTriggerInteraction*/) { 
            return CS.Call(4, 166, 2, true, a0, a1, a2, a3, a4, a5, a6); //Ret: Boolean
        },
        BoxCast$$Vector3$$Vector3$$Vector3$$Quaternion$$Single$$Int32: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Vector3*/, a3/*Quaternion*/, a4/*Single*/, a5/*Int32*/) { 
            return CS.Call(4, 166, 3, true, a0, a1, a2, a3, a4, a5); //Ret: Boolean
        },
        BoxCast$$Vector3$$Vector3$$Vector3$$RaycastHit$$Quaternion$$Single: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Vector3*/, a3/*RaycastHit&*/, a4/*Quaternion*/, a5/*Single*/) { 
            return CS.Call(4, 166, 4, true, a0, a1, a2, a3, a4, a5); //Ret: Boolean
        },
        BoxCast$$Vector3$$Vector3$$Vector3$$RaycastHit$$Quaternion: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Vector3*/, a3/*RaycastHit&*/, a4/*Quaternion*/) { 
            return CS.Call(4, 166, 5, true, a0, a1, a2, a3, a4); //Ret: Boolean
        },
        BoxCast$$Vector3$$Vector3$$Vector3$$Quaternion$$Single: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Vector3*/, a3/*Quaternion*/, a4/*Single*/) { 
            return CS.Call(4, 166, 6, true, a0, a1, a2, a3, a4); //Ret: Boolean
        },
        BoxCast$$Vector3$$Vector3$$Vector3$$RaycastHit: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Vector3*/, a3/*RaycastHit&*/) { 
            return CS.Call(4, 166, 7, true, a0, a1, a2, a3); //Ret: Boolean
        },
        BoxCast$$Vector3$$Vector3$$Vector3$$Quaternion: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Vector3*/, a3/*Quaternion*/) { 
            return CS.Call(4, 166, 8, true, a0, a1, a2, a3); //Ret: Boolean
        },
        BoxCast$$Vector3$$Vector3$$Vector3: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Vector3*/) { 
            return CS.Call(4, 166, 9, true, a0, a1, a2); //Ret: Boolean
        },
        BoxCastAll$$Vector3$$Vector3$$Vector3$$Quaternion$$Single$$Int32$$QueryTriggerInteraction: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Vector3*/, a3/*Quaternion*/, a4/*Single*/, a5/*Int32*/, a6/*QueryTriggerInteraction*/) { 
            return CS.Call(4, 166, 10, true, a0, a1, a2, a3, a4, a5, a6); //Ret: RaycastHit[]
        },
        BoxCastAll$$Vector3$$Vector3$$Vector3$$Quaternion$$Single$$Int32: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Vector3*/, a3/*Quaternion*/, a4/*Single*/, a5/*Int32*/) { 
            return CS.Call(4, 166, 11, true, a0, a1, a2, a3, a4, a5); //Ret: RaycastHit[]
        },
        BoxCastAll$$Vector3$$Vector3$$Vector3$$Quaternion$$Single: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Vector3*/, a3/*Quaternion*/, a4/*Single*/) { 
            return CS.Call(4, 166, 12, true, a0, a1, a2, a3, a4); //Ret: RaycastHit[]
        },
        BoxCastAll$$Vector3$$Vector3$$Vector3$$Quaternion: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Vector3*/, a3/*Quaternion*/) { 
            return CS.Call(4, 166, 13, true, a0, a1, a2, a3); //Ret: RaycastHit[]
        },
        BoxCastAll$$Vector3$$Vector3$$Vector3: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Vector3*/) { 
            return CS.Call(4, 166, 14, true, a0, a1, a2); //Ret: RaycastHit[]
        },
        BoxCastNonAlloc$$Vector3$$Vector3$$Vector3$$RaycastHit$Array$$Quaternion$$Single$$Int32$$QueryTriggerInteraction: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Vector3*/, a3/*RaycastHit[]*/, a4/*Quaternion*/, a5/*Single*/, a6/*Int32*/, a7/*QueryTriggerInteraction*/) { 
            return CS.Call(4, 166, 15, true, a0, a1, a2, a3, a4, a5, a6, a7); //Ret: Int32
        },
        BoxCastNonAlloc$$Vector3$$Vector3$$Vector3$$RaycastHit$Array$$Quaternion$$Single$$Int32: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Vector3*/, a3/*RaycastHit[]*/, a4/*Quaternion*/, a5/*Single*/, a6/*Int32*/) { 
            return CS.Call(4, 166, 16, true, a0, a1, a2, a3, a4, a5, a6); //Ret: Int32
        },
        BoxCastNonAlloc$$Vector3$$Vector3$$Vector3$$RaycastHit$Array$$Quaternion$$Single: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Vector3*/, a3/*RaycastHit[]*/, a4/*Quaternion*/, a5/*Single*/) { 
            return CS.Call(4, 166, 17, true, a0, a1, a2, a3, a4, a5); //Ret: Int32
        },
        BoxCastNonAlloc$$Vector3$$Vector3$$Vector3$$RaycastHit$Array$$Quaternion: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Vector3*/, a3/*RaycastHit[]*/, a4/*Quaternion*/) { 
            return CS.Call(4, 166, 18, true, a0, a1, a2, a3, a4); //Ret: Int32
        },
        BoxCastNonAlloc$$Vector3$$Vector3$$Vector3$$RaycastHit$Array: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Vector3*/, a3/*RaycastHit[]*/) { 
            return CS.Call(4, 166, 19, true, a0, a1, a2, a3); //Ret: Int32
        },
        CapsuleCast$$Vector3$$Vector3$$Single$$Vector3$$RaycastHit$$Single$$Int32$$QueryTriggerInteraction: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Single*/, a3/*Vector3*/, a4/*RaycastHit&*/, a5/*Single*/, a6/*Int32*/, a7/*QueryTriggerInteraction*/) { 
            return CS.Call(4, 166, 20, true, a0, a1, a2, a3, a4, a5, a6, a7); //Ret: Boolean
        },
        CapsuleCast$$Vector3$$Vector3$$Single$$Vector3$$Single$$Int32$$QueryTriggerInteraction: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Single*/, a3/*Vector3*/, a4/*Single*/, a5/*Int32*/, a6/*QueryTriggerInteraction*/) { 
            return CS.Call(4, 166, 21, true, a0, a1, a2, a3, a4, a5, a6); //Ret: Boolean
        },
        CapsuleCast$$Vector3$$Vector3$$Single$$Vector3$$RaycastHit$$Single$$Int32: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Single*/, a3/*Vector3*/, a4/*RaycastHit&*/, a5/*Single*/, a6/*Int32*/) { 
            return CS.Call(4, 166, 22, true, a0, a1, a2, a3, a4, a5, a6); //Ret: Boolean
        },
        CapsuleCast$$Vector3$$Vector3$$Single$$Vector3$$Single$$Int32: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Single*/, a3/*Vector3*/, a4/*Single*/, a5/*Int32*/) { 
            return CS.Call(4, 166, 23, true, a0, a1, a2, a3, a4, a5); //Ret: Boolean
        },
        CapsuleCast$$Vector3$$Vector3$$Single$$Vector3$$RaycastHit$$Single: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Single*/, a3/*Vector3*/, a4/*RaycastHit&*/, a5/*Single*/) { 
            return CS.Call(4, 166, 24, true, a0, a1, a2, a3, a4, a5); //Ret: Boolean
        },
        CapsuleCast$$Vector3$$Vector3$$Single$$Vector3$$RaycastHit: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Single*/, a3/*Vector3*/, a4/*RaycastHit&*/) { 
            return CS.Call(4, 166, 25, true, a0, a1, a2, a3, a4); //Ret: Boolean
        },
        CapsuleCast$$Vector3$$Vector3$$Single$$Vector3$$Single: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Single*/, a3/*Vector3*/, a4/*Single*/) { 
            return CS.Call(4, 166, 26, true, a0, a1, a2, a3, a4); //Ret: Boolean
        },
        CapsuleCast$$Vector3$$Vector3$$Single$$Vector3: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Single*/, a3/*Vector3*/) { 
            return CS.Call(4, 166, 27, true, a0, a1, a2, a3); //Ret: Boolean
        },
        CapsuleCastAll$$Vector3$$Vector3$$Single$$Vector3$$Single$$Int32$$QueryTriggerInteraction: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Single*/, a3/*Vector3*/, a4/*Single*/, a5/*Int32*/, a6/*QueryTriggerInteraction*/) { 
            return CS.Call(4, 166, 28, true, a0, a1, a2, a3, a4, a5, a6); //Ret: RaycastHit[]
        },
        CapsuleCastAll$$Vector3$$Vector3$$Single$$Vector3$$Single$$Int32: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Single*/, a3/*Vector3*/, a4/*Single*/, a5/*Int32*/) { 
            return CS.Call(4, 166, 29, true, a0, a1, a2, a3, a4, a5); //Ret: RaycastHit[]
        },
        CapsuleCastAll$$Vector3$$Vector3$$Single$$Vector3$$Single: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Single*/, a3/*Vector3*/, a4/*Single*/) { 
            return CS.Call(4, 166, 30, true, a0, a1, a2, a3, a4); //Ret: RaycastHit[]
        },
        CapsuleCastAll$$Vector3$$Vector3$$Single$$Vector3: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Single*/, a3/*Vector3*/) { 
            return CS.Call(4, 166, 31, true, a0, a1, a2, a3); //Ret: RaycastHit[]
        },
        CapsuleCastNonAlloc$$Vector3$$Vector3$$Single$$Vector3$$RaycastHit$Array$$Single$$Int32$$QueryTriggerInteraction: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Single*/, a3/*Vector3*/, a4/*RaycastHit[]*/, a5/*Single*/, a6/*Int32*/, a7/*QueryTriggerInteraction*/) { 
            return CS.Call(4, 166, 32, true, a0, a1, a2, a3, a4, a5, a6, a7); //Ret: Int32
        },
        CapsuleCastNonAlloc$$Vector3$$Vector3$$Single$$Vector3$$RaycastHit$Array$$Single$$Int32: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Single*/, a3/*Vector3*/, a4/*RaycastHit[]*/, a5/*Single*/, a6/*Int32*/) { 
            return CS.Call(4, 166, 33, true, a0, a1, a2, a3, a4, a5, a6); //Ret: Int32
        },
        CapsuleCastNonAlloc$$Vector3$$Vector3$$Single$$Vector3$$RaycastHit$Array$$Single: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Single*/, a3/*Vector3*/, a4/*RaycastHit[]*/, a5/*Single*/) { 
            return CS.Call(4, 166, 34, true, a0, a1, a2, a3, a4, a5); //Ret: Int32
        },
        CapsuleCastNonAlloc$$Vector3$$Vector3$$Single$$Vector3$$RaycastHit$Array: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Single*/, a3/*Vector3*/, a4/*RaycastHit[]*/) { 
            return CS.Call(4, 166, 35, true, a0, a1, a2, a3, a4); //Ret: Int32
        },
        CheckBox$$Vector3$$Vector3$$Quaternion$$Int32$$QueryTriggerInteraction: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Quaternion*/, a3/*Int32*/, a4/*QueryTriggerInteraction*/) { 
            return CS.Call(4, 166, 36, true, a0, a1, a2, a3, a4); //Ret: Boolean
        },
        CheckBox$$Vector3$$Vector3$$Quaternion$$Int32: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Quaternion*/, a3/*Int32*/) { 
            return CS.Call(4, 166, 37, true, a0, a1, a2, a3); //Ret: Boolean
        },
        CheckBox$$Vector3$$Vector3$$Quaternion: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Quaternion*/) { 
            return CS.Call(4, 166, 38, true, a0, a1, a2); //Ret: Boolean
        },
        CheckBox$$Vector3$$Vector3: function(a0/*Vector3*/, a1/*Vector3*/) { 
            return CS.Call(4, 166, 39, true, a0, a1); //Ret: Boolean
        },
        CheckCapsule$$Vector3$$Vector3$$Single$$Int32$$QueryTriggerInteraction: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Single*/, a3/*Int32*/, a4/*QueryTriggerInteraction*/) { 
            return CS.Call(4, 166, 40, true, a0, a1, a2, a3, a4); //Ret: Boolean
        },
        CheckCapsule$$Vector3$$Vector3$$Single$$Int32: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Single*/, a3/*Int32*/) { 
            return CS.Call(4, 166, 41, true, a0, a1, a2, a3); //Ret: Boolean
        },
        CheckCapsule$$Vector3$$Vector3$$Single: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Single*/) { 
            return CS.Call(4, 166, 42, true, a0, a1, a2); //Ret: Boolean
        },
        CheckSphere$$Vector3$$Single$$Int32$$QueryTriggerInteraction: function(a0/*Vector3*/, a1/*Single*/, a2/*Int32*/, a3/*QueryTriggerInteraction*/) { 
            return CS.Call(4, 166, 43, true, a0, a1, a2, a3); //Ret: Boolean
        },
        CheckSphere$$Vector3$$Single$$Int32: function(a0/*Vector3*/, a1/*Single*/, a2/*Int32*/) { 
            return CS.Call(4, 166, 44, true, a0, a1, a2); //Ret: Boolean
        },
        CheckSphere$$Vector3$$Single: function(a0/*Vector3*/, a1/*Single*/) { 
            return CS.Call(4, 166, 45, true, a0, a1); //Ret: Boolean
        },
        GetIgnoreLayerCollision: function(a0/*Int32*/, a1/*Int32*/) { 
            return CS.Call(4, 166, 46, true, a0, a1); //Ret: Boolean
        },
        IgnoreCollision$$Collider$$Collider$$Boolean: function(a0/*Collider*/, a1/*Collider*/, a2/*Boolean*/) { 
            return CS.Call(4, 166, 47, true, a0, a1, a2); //Ret: Void
        },
        IgnoreCollision$$Collider$$Collider: function(a0/*Collider*/, a1/*Collider*/) { 
            return CS.Call(4, 166, 48, true, a0, a1); //Ret: Void
        },
        IgnoreLayerCollision$$Int32$$Int32$$Boolean: function(a0/*Int32*/, a1/*Int32*/, a2/*Boolean*/) { 
            return CS.Call(4, 166, 49, true, a0, a1, a2); //Ret: Void
        },
        IgnoreLayerCollision$$Int32$$Int32: function(a0/*Int32*/, a1/*Int32*/) { 
            return CS.Call(4, 166, 50, true, a0, a1); //Ret: Void
        },
        Linecast$$Vector3$$Vector3$$RaycastHit$$Int32$$QueryTriggerInteraction: function(a0/*Vector3*/, a1/*Vector3*/, a2/*RaycastHit&*/, a3/*Int32*/, a4/*QueryTriggerInteraction*/) { 
            return CS.Call(4, 166, 51, true, a0, a1, a2, a3, a4); //Ret: Boolean
        },
        Linecast$$Vector3$$Vector3$$RaycastHit$$Int32: function(a0/*Vector3*/, a1/*Vector3*/, a2/*RaycastHit&*/, a3/*Int32*/) { 
            return CS.Call(4, 166, 52, true, a0, a1, a2, a3); //Ret: Boolean
        },
        Linecast$$Vector3$$Vector3$$Int32$$QueryTriggerInteraction: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Int32*/, a3/*QueryTriggerInteraction*/) { 
            return CS.Call(4, 166, 53, true, a0, a1, a2, a3); //Ret: Boolean
        },
        Linecast$$Vector3$$Vector3$$Int32: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Int32*/) { 
            return CS.Call(4, 166, 54, true, a0, a1, a2); //Ret: Boolean
        },
        Linecast$$Vector3$$Vector3$$RaycastHit: function(a0/*Vector3*/, a1/*Vector3*/, a2/*RaycastHit&*/) { 
            return CS.Call(4, 166, 55, true, a0, a1, a2); //Ret: Boolean
        },
        Linecast$$Vector3$$Vector3: function(a0/*Vector3*/, a1/*Vector3*/) { 
            return CS.Call(4, 166, 56, true, a0, a1); //Ret: Boolean
        },
        OverlapBox$$Vector3$$Vector3$$Quaternion$$Int32$$QueryTriggerInteraction: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Quaternion*/, a3/*Int32*/, a4/*QueryTriggerInteraction*/) { 
            return CS.Call(4, 166, 57, true, a0, a1, a2, a3, a4); //Ret: Collider[]
        },
        OverlapBox$$Vector3$$Vector3$$Quaternion$$Int32: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Quaternion*/, a3/*Int32*/) { 
            return CS.Call(4, 166, 58, true, a0, a1, a2, a3); //Ret: Collider[]
        },
        OverlapBox$$Vector3$$Vector3$$Quaternion: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Quaternion*/) { 
            return CS.Call(4, 166, 59, true, a0, a1, a2); //Ret: Collider[]
        },
        OverlapBox$$Vector3$$Vector3: function(a0/*Vector3*/, a1/*Vector3*/) { 
            return CS.Call(4, 166, 60, true, a0, a1); //Ret: Collider[]
        },
        OverlapBoxNonAlloc$$Vector3$$Vector3$$Collider$Array$$Quaternion$$Int32$$QueryTriggerInteraction: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Collider[]*/, a3/*Quaternion*/, a4/*Int32*/, a5/*QueryTriggerInteraction*/) { 
            return CS.Call(4, 166, 61, true, a0, a1, a2, a3, a4, a5); //Ret: Int32
        },
        OverlapBoxNonAlloc$$Vector3$$Vector3$$Collider$Array$$Quaternion$$Int32: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Collider[]*/, a3/*Quaternion*/, a4/*Int32*/) { 
            return CS.Call(4, 166, 62, true, a0, a1, a2, a3, a4); //Ret: Int32
        },
        OverlapBoxNonAlloc$$Vector3$$Vector3$$Collider$Array$$Quaternion: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Collider[]*/, a3/*Quaternion*/) { 
            return CS.Call(4, 166, 63, true, a0, a1, a2, a3); //Ret: Int32
        },
        OverlapBoxNonAlloc$$Vector3$$Vector3$$Collider$Array: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Collider[]*/) { 
            return CS.Call(4, 166, 64, true, a0, a1, a2); //Ret: Int32
        },
        OverlapCapsule$$Vector3$$Vector3$$Single$$Int32$$QueryTriggerInteraction: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Single*/, a3/*Int32*/, a4/*QueryTriggerInteraction*/) { 
            return CS.Call(4, 166, 65, true, a0, a1, a2, a3, a4); //Ret: Collider[]
        },
        OverlapCapsule$$Vector3$$Vector3$$Single$$Int32: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Single*/, a3/*Int32*/) { 
            return CS.Call(4, 166, 66, true, a0, a1, a2, a3); //Ret: Collider[]
        },
        OverlapCapsule$$Vector3$$Vector3$$Single: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Single*/) { 
            return CS.Call(4, 166, 67, true, a0, a1, a2); //Ret: Collider[]
        },
        OverlapCapsuleNonAlloc$$Vector3$$Vector3$$Single$$Collider$Array$$Int32$$QueryTriggerInteraction: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Single*/, a3/*Collider[]*/, a4/*Int32*/, a5/*QueryTriggerInteraction*/) { 
            return CS.Call(4, 166, 68, true, a0, a1, a2, a3, a4, a5); //Ret: Int32
        },
        OverlapCapsuleNonAlloc$$Vector3$$Vector3$$Single$$Collider$Array$$Int32: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Single*/, a3/*Collider[]*/, a4/*Int32*/) { 
            return CS.Call(4, 166, 69, true, a0, a1, a2, a3, a4); //Ret: Int32
        },
        OverlapCapsuleNonAlloc$$Vector3$$Vector3$$Single$$Collider$Array: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Single*/, a3/*Collider[]*/) { 
            return CS.Call(4, 166, 70, true, a0, a1, a2, a3); //Ret: Int32
        },
        OverlapSphere$$Vector3$$Single$$Int32$$QueryTriggerInteraction: function(a0/*Vector3*/, a1/*Single*/, a2/*Int32*/, a3/*QueryTriggerInteraction*/) { 
            return CS.Call(4, 166, 71, true, a0, a1, a2, a3); //Ret: Collider[]
        },
        OverlapSphere$$Vector3$$Single$$Int32: function(a0/*Vector3*/, a1/*Single*/, a2/*Int32*/) { 
            return CS.Call(4, 166, 72, true, a0, a1, a2); //Ret: Collider[]
        },
        OverlapSphere$$Vector3$$Single: function(a0/*Vector3*/, a1/*Single*/) { 
            return CS.Call(4, 166, 73, true, a0, a1); //Ret: Collider[]
        },
        OverlapSphereNonAlloc$$Vector3$$Single$$Collider$Array$$Int32$$QueryTriggerInteraction: function(a0/*Vector3*/, a1/*Single*/, a2/*Collider[]*/, a3/*Int32*/, a4/*QueryTriggerInteraction*/) { 
            return CS.Call(4, 166, 74, true, a0, a1, a2, a3, a4); //Ret: Int32
        },
        OverlapSphereNonAlloc$$Vector3$$Single$$Collider$Array$$Int32: function(a0/*Vector3*/, a1/*Single*/, a2/*Collider[]*/, a3/*Int32*/) { 
            return CS.Call(4, 166, 75, true, a0, a1, a2, a3); //Ret: Int32
        },
        OverlapSphereNonAlloc$$Vector3$$Single$$Collider$Array: function(a0/*Vector3*/, a1/*Single*/, a2/*Collider[]*/) { 
            return CS.Call(4, 166, 76, true, a0, a1, a2); //Ret: Int32
        },
        Raycast$$Vector3$$Vector3$$RaycastHit$$Single$$Int32$$QueryTriggerInteraction: function(a0/*Vector3*/, a1/*Vector3*/, a2/*RaycastHit&*/, a3/*Single*/, a4/*Int32*/, a5/*QueryTriggerInteraction*/) { 
            return CS.Call(4, 166, 77, true, a0, a1, a2, a3, a4, a5); //Ret: Boolean
        },
        Raycast$$Vector3$$Vector3$$RaycastHit$$Single$$Int32: function(a0/*Vector3*/, a1/*Vector3*/, a2/*RaycastHit&*/, a3/*Single*/, a4/*Int32*/) { 
            return CS.Call(4, 166, 78, true, a0, a1, a2, a3, a4); //Ret: Boolean
        },
        Raycast$$Vector3$$Vector3$$Single$$Int32$$QueryTriggerInteraction: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Single*/, a3/*Int32*/, a4/*QueryTriggerInteraction*/) { 
            return CS.Call(4, 166, 79, true, a0, a1, a2, a3, a4); //Ret: Boolean
        },
        Raycast$$Ray$$RaycastHit$$Single$$Int32$$QueryTriggerInteraction: function(a0/*Ray*/, a1/*RaycastHit&*/, a2/*Single*/, a3/*Int32*/, a4/*QueryTriggerInteraction*/) { 
            return CS.Call(4, 166, 80, true, a0, a1, a2, a3, a4); //Ret: Boolean
        },
        Raycast$$Vector3$$Vector3$$RaycastHit$$Single: function(a0/*Vector3*/, a1/*Vector3*/, a2/*RaycastHit&*/, a3/*Single*/) { 
            return CS.Call(4, 166, 81, true, a0, a1, a2, a3); //Ret: Boolean
        },
        Raycast$$Ray$$Single$$Int32$$QueryTriggerInteraction: function(a0/*Ray*/, a1/*Single*/, a2/*Int32*/, a3/*QueryTriggerInteraction*/) { 
            return CS.Call(4, 166, 82, true, a0, a1, a2, a3); //Ret: Boolean
        },
        Raycast$$Vector3$$Vector3$$Single$$Int32: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Single*/, a3/*Int32*/) { 
            return CS.Call(4, 166, 83, true, a0, a1, a2, a3); //Ret: Boolean
        },
        Raycast$$Ray$$RaycastHit$$Single$$Int32: function(a0/*Ray*/, a1/*RaycastHit&*/, a2/*Single*/, a3/*Int32*/) { 
            return CS.Call(4, 166, 84, true, a0, a1, a2, a3); //Ret: Boolean
        },
        Raycast$$Vector3$$Vector3$$RaycastHit: function(a0/*Vector3*/, a1/*Vector3*/, a2/*RaycastHit&*/) { 
            return CS.Call(4, 166, 85, true, a0, a1, a2); //Ret: Boolean
        },
        Raycast$$Ray$$RaycastHit$$Single: function(a0/*Ray*/, a1/*RaycastHit&*/, a2/*Single*/) { 
            return CS.Call(4, 166, 86, true, a0, a1, a2); //Ret: Boolean
        },
        Raycast$$Vector3$$Vector3$$Single: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Single*/) { 
            return CS.Call(4, 166, 87, true, a0, a1, a2); //Ret: Boolean
        },
        Raycast$$Ray$$Single$$Int32: function(a0/*Ray*/, a1/*Single*/, a2/*Int32*/) { 
            return CS.Call(4, 166, 88, true, a0, a1, a2); //Ret: Boolean
        },
        Raycast$$Vector3$$Vector3: function(a0/*Vector3*/, a1/*Vector3*/) { 
            return CS.Call(4, 166, 89, true, a0, a1); //Ret: Boolean
        },
        Raycast$$Ray$$RaycastHit: function(a0/*Ray*/, a1/*RaycastHit&*/) { 
            return CS.Call(4, 166, 90, true, a0, a1); //Ret: Boolean
        },
        Raycast$$Ray$$Single: function(a0/*Ray*/, a1/*Single*/) { 
            return CS.Call(4, 166, 91, true, a0, a1); //Ret: Boolean
        },
        Raycast$$Ray: function(a0/*Ray*/) { 
            return CS.Call(4, 166, 92, true, a0); //Ret: Boolean
        },
        RaycastAll$$Vector3$$Vector3$$Single$$Int32$$QueryTriggerInteraction: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Single*/, a3/*Int32*/, a4/*QueryTriggerInteraction*/) { 
            return CS.Call(4, 166, 93, true, a0, a1, a2, a3, a4); //Ret: RaycastHit[]
        },
        RaycastAll$$Ray$$Single$$Int32$$QueryTriggerInteraction: function(a0/*Ray*/, a1/*Single*/, a2/*Int32*/, a3/*QueryTriggerInteraction*/) { 
            return CS.Call(4, 166, 94, true, a0, a1, a2, a3); //Ret: RaycastHit[]
        },
        RaycastAll$$Vector3$$Vector3$$Single$$Int32: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Single*/, a3/*Int32*/) { 
            return CS.Call(4, 166, 95, true, a0, a1, a2, a3); //Ret: RaycastHit[]
        },
        RaycastAll$$Ray$$Single$$Int32: function(a0/*Ray*/, a1/*Single*/, a2/*Int32*/) { 
            return CS.Call(4, 166, 96, true, a0, a1, a2); //Ret: RaycastHit[]
        },
        RaycastAll$$Vector3$$Vector3$$Single: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Single*/) { 
            return CS.Call(4, 166, 97, true, a0, a1, a2); //Ret: RaycastHit[]
        },
        RaycastAll$$Ray$$Single: function(a0/*Ray*/, a1/*Single*/) { 
            return CS.Call(4, 166, 98, true, a0, a1); //Ret: RaycastHit[]
        },
        RaycastAll$$Vector3$$Vector3: function(a0/*Vector3*/, a1/*Vector3*/) { 
            return CS.Call(4, 166, 99, true, a0, a1); //Ret: RaycastHit[]
        },
        RaycastAll$$Ray: function(a0/*Ray*/) { 
            return CS.Call(4, 166, 100, true, a0); //Ret: RaycastHit[]
        },
        RaycastNonAlloc$$Vector3$$Vector3$$RaycastHit$Array$$Single$$Int32$$QueryTriggerInteraction: function(a0/*Vector3*/, a1/*Vector3*/, a2/*RaycastHit[]*/, a3/*Single*/, a4/*Int32*/, a5/*QueryTriggerInteraction*/) { 
            return CS.Call(4, 166, 101, true, a0, a1, a2, a3, a4, a5); //Ret: Int32
        },
        RaycastNonAlloc$$Vector3$$Vector3$$RaycastHit$Array$$Single$$Int32: function(a0/*Vector3*/, a1/*Vector3*/, a2/*RaycastHit[]*/, a3/*Single*/, a4/*Int32*/) { 
            return CS.Call(4, 166, 102, true, a0, a1, a2, a3, a4); //Ret: Int32
        },
        RaycastNonAlloc$$Ray$$RaycastHit$Array$$Single$$Int32$$QueryTriggerInteraction: function(a0/*Ray*/, a1/*RaycastHit[]*/, a2/*Single*/, a3/*Int32*/, a4/*QueryTriggerInteraction*/) { 
            return CS.Call(4, 166, 103, true, a0, a1, a2, a3, a4); //Ret: Int32
        },
        RaycastNonAlloc$$Ray$$RaycastHit$Array$$Single$$Int32: function(a0/*Ray*/, a1/*RaycastHit[]*/, a2/*Single*/, a3/*Int32*/) { 
            return CS.Call(4, 166, 104, true, a0, a1, a2, a3); //Ret: Int32
        },
        RaycastNonAlloc$$Vector3$$Vector3$$RaycastHit$Array$$Single: function(a0/*Vector3*/, a1/*Vector3*/, a2/*RaycastHit[]*/, a3/*Single*/) { 
            return CS.Call(4, 166, 105, true, a0, a1, a2, a3); //Ret: Int32
        },
        RaycastNonAlloc$$Vector3$$Vector3$$RaycastHit$Array: function(a0/*Vector3*/, a1/*Vector3*/, a2/*RaycastHit[]*/) { 
            return CS.Call(4, 166, 106, true, a0, a1, a2); //Ret: Int32
        },
        RaycastNonAlloc$$Ray$$RaycastHit$Array$$Single: function(a0/*Ray*/, a1/*RaycastHit[]*/, a2/*Single*/) { 
            return CS.Call(4, 166, 107, true, a0, a1, a2); //Ret: Int32
        },
        RaycastNonAlloc$$Ray$$RaycastHit$Array: function(a0/*Ray*/, a1/*RaycastHit[]*/) { 
            return CS.Call(4, 166, 108, true, a0, a1); //Ret: Int32
        },
        SphereCast$$Vector3$$Single$$Vector3$$RaycastHit$$Single$$Int32$$QueryTriggerInteraction: function(a0/*Vector3*/, a1/*Single*/, a2/*Vector3*/, a3/*RaycastHit&*/, a4/*Single*/, a5/*Int32*/, a6/*QueryTriggerInteraction*/) { 
            return CS.Call(4, 166, 109, true, a0, a1, a2, a3, a4, a5, a6); //Ret: Boolean
        },
        SphereCast$$Vector3$$Single$$Vector3$$RaycastHit$$Single$$Int32: function(a0/*Vector3*/, a1/*Single*/, a2/*Vector3*/, a3/*RaycastHit&*/, a4/*Single*/, a5/*Int32*/) { 
            return CS.Call(4, 166, 110, true, a0, a1, a2, a3, a4, a5); //Ret: Boolean
        },
        SphereCast$$Ray$$Single$$RaycastHit$$Single$$Int32$$QueryTriggerInteraction: function(a0/*Ray*/, a1/*Single*/, a2/*RaycastHit&*/, a3/*Single*/, a4/*Int32*/, a5/*QueryTriggerInteraction*/) { 
            return CS.Call(4, 166, 111, true, a0, a1, a2, a3, a4, a5); //Ret: Boolean
        },
        SphereCast$$Vector3$$Single$$Vector3$$RaycastHit$$Single: function(a0/*Vector3*/, a1/*Single*/, a2/*Vector3*/, a3/*RaycastHit&*/, a4/*Single*/) { 
            return CS.Call(4, 166, 112, true, a0, a1, a2, a3, a4); //Ret: Boolean
        },
        SphereCast$$Ray$$Single$$Single$$Int32$$QueryTriggerInteraction: function(a0/*Ray*/, a1/*Single*/, a2/*Single*/, a3/*Int32*/, a4/*QueryTriggerInteraction*/) { 
            return CS.Call(4, 166, 113, true, a0, a1, a2, a3, a4); //Ret: Boolean
        },
        SphereCast$$Ray$$Single$$RaycastHit$$Single$$Int32: function(a0/*Ray*/, a1/*Single*/, a2/*RaycastHit&*/, a3/*Single*/, a4/*Int32*/) { 
            return CS.Call(4, 166, 114, true, a0, a1, a2, a3, a4); //Ret: Boolean
        },
        SphereCast$$Ray$$Single$$RaycastHit$$Single: function(a0/*Ray*/, a1/*Single*/, a2/*RaycastHit&*/, a3/*Single*/) { 
            return CS.Call(4, 166, 115, true, a0, a1, a2, a3); //Ret: Boolean
        },
        SphereCast$$Ray$$Single$$Single$$Int32: function(a0/*Ray*/, a1/*Single*/, a2/*Single*/, a3/*Int32*/) { 
            return CS.Call(4, 166, 116, true, a0, a1, a2, a3); //Ret: Boolean
        },
        SphereCast$$Vector3$$Single$$Vector3$$RaycastHit: function(a0/*Vector3*/, a1/*Single*/, a2/*Vector3*/, a3/*RaycastHit&*/) { 
            return CS.Call(4, 166, 117, true, a0, a1, a2, a3); //Ret: Boolean
        },
        SphereCast$$Ray$$Single$$RaycastHit: function(a0/*Ray*/, a1/*Single*/, a2/*RaycastHit&*/) { 
            return CS.Call(4, 166, 118, true, a0, a1, a2); //Ret: Boolean
        },
        SphereCast$$Ray$$Single$$Single: function(a0/*Ray*/, a1/*Single*/, a2/*Single*/) { 
            return CS.Call(4, 166, 119, true, a0, a1, a2); //Ret: Boolean
        },
        SphereCast$$Ray$$Single: function(a0/*Ray*/, a1/*Single*/) { 
            return CS.Call(4, 166, 120, true, a0, a1); //Ret: Boolean
        },
        SphereCastAll$$Vector3$$Single$$Vector3$$Single$$Int32$$QueryTriggerInteraction: function(a0/*Vector3*/, a1/*Single*/, a2/*Vector3*/, a3/*Single*/, a4/*Int32*/, a5/*QueryTriggerInteraction*/) { 
            return CS.Call(4, 166, 121, true, a0, a1, a2, a3, a4, a5); //Ret: RaycastHit[]
        },
        SphereCastAll$$Ray$$Single$$Single$$Int32$$QueryTriggerInteraction: function(a0/*Ray*/, a1/*Single*/, a2/*Single*/, a3/*Int32*/, a4/*QueryTriggerInteraction*/) { 
            return CS.Call(4, 166, 122, true, a0, a1, a2, a3, a4); //Ret: RaycastHit[]
        },
        SphereCastAll$$Vector3$$Single$$Vector3$$Single$$Int32: function(a0/*Vector3*/, a1/*Single*/, a2/*Vector3*/, a3/*Single*/, a4/*Int32*/) { 
            return CS.Call(4, 166, 123, true, a0, a1, a2, a3, a4); //Ret: RaycastHit[]
        },
        SphereCastAll$$Ray$$Single$$Single$$Int32: function(a0/*Ray*/, a1/*Single*/, a2/*Single*/, a3/*Int32*/) { 
            return CS.Call(4, 166, 124, true, a0, a1, a2, a3); //Ret: RaycastHit[]
        },
        SphereCastAll$$Vector3$$Single$$Vector3$$Single: function(a0/*Vector3*/, a1/*Single*/, a2/*Vector3*/, a3/*Single*/) { 
            return CS.Call(4, 166, 125, true, a0, a1, a2, a3); //Ret: RaycastHit[]
        },
        SphereCastAll$$Ray$$Single$$Single: function(a0/*Ray*/, a1/*Single*/, a2/*Single*/) { 
            return CS.Call(4, 166, 126, true, a0, a1, a2); //Ret: RaycastHit[]
        },
        SphereCastAll$$Vector3$$Single$$Vector3: function(a0/*Vector3*/, a1/*Single*/, a2/*Vector3*/) { 
            return CS.Call(4, 166, 127, true, a0, a1, a2); //Ret: RaycastHit[]
        },
        SphereCastAll$$Ray$$Single: function(a0/*Ray*/, a1/*Single*/) { 
            return CS.Call(4, 166, 128, true, a0, a1); //Ret: RaycastHit[]
        },
        SphereCastNonAlloc$$Vector3$$Single$$Vector3$$RaycastHit$Array$$Single$$Int32$$QueryTriggerInteraction: function(a0/*Vector3*/, a1/*Single*/, a2/*Vector3*/, a3/*RaycastHit[]*/, a4/*Single*/, a5/*Int32*/, a6/*QueryTriggerInteraction*/) { 
            return CS.Call(4, 166, 129, true, a0, a1, a2, a3, a4, a5, a6); //Ret: Int32
        },
        SphereCastNonAlloc$$Vector3$$Single$$Vector3$$RaycastHit$Array$$Single$$Int32: function(a0/*Vector3*/, a1/*Single*/, a2/*Vector3*/, a3/*RaycastHit[]*/, a4/*Single*/, a5/*Int32*/) { 
            return CS.Call(4, 166, 130, true, a0, a1, a2, a3, a4, a5); //Ret: Int32
        },
        SphereCastNonAlloc$$Ray$$Single$$RaycastHit$Array$$Single$$Int32$$QueryTriggerInteraction: function(a0/*Ray*/, a1/*Single*/, a2/*RaycastHit[]*/, a3/*Single*/, a4/*Int32*/, a5/*QueryTriggerInteraction*/) { 
            return CS.Call(4, 166, 131, true, a0, a1, a2, a3, a4, a5); //Ret: Int32
        },
        SphereCastNonAlloc$$Ray$$Single$$RaycastHit$Array$$Single$$Int32: function(a0/*Ray*/, a1/*Single*/, a2/*RaycastHit[]*/, a3/*Single*/, a4/*Int32*/) { 
            return CS.Call(4, 166, 132, true, a0, a1, a2, a3, a4); //Ret: Int32
        },
        SphereCastNonAlloc$$Vector3$$Single$$Vector3$$RaycastHit$Array$$Single: function(a0/*Vector3*/, a1/*Single*/, a2/*Vector3*/, a3/*RaycastHit[]*/, a4/*Single*/) { 
            return CS.Call(4, 166, 133, true, a0, a1, a2, a3, a4); //Ret: Int32
        },
        SphereCastNonAlloc$$Ray$$Single$$RaycastHit$Array$$Single: function(a0/*Ray*/, a1/*Single*/, a2/*RaycastHit[]*/, a3/*Single*/) { 
            return CS.Call(4, 166, 134, true, a0, a1, a2, a3); //Ret: Int32
        },
        SphereCastNonAlloc$$Vector3$$Single$$Vector3$$RaycastHit$Array: function(a0/*Vector3*/, a1/*Single*/, a2/*Vector3*/, a3/*RaycastHit[]*/) { 
            return CS.Call(4, 166, 135, true, a0, a1, a2, a3); //Ret: Int32
        },
        SphereCastNonAlloc$$Ray$$Single$$RaycastHit$Array: function(a0/*Ray*/, a1/*Single*/, a2/*RaycastHit[]*/) { 
            return CS.Call(4, 166, 136, true, a0, a1, a2); //Ret: Int32
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 166, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Physics);

// UnityEngine.WheelHit
var UnityEngine$WheelHit = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.WheelHit",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    definition: {
        ctor: function() { CS.Call(5, 167, 0, true, this); },
        get_collider: function() { return CS.Call(2, 167, 0, false, this); },
        set_collider: function(v) { return CS.Call(3, 167, 0, false, this, v); },
        get_point: function() { return CS.Call(2, 167, 1, false, this); },
        set_point: function(v) { return CS.Call(3, 167, 1, false, this, v); },
        get_normal: function() { return CS.Call(2, 167, 2, false, this); },
        set_normal: function(v) { return CS.Call(3, 167, 2, false, this, v); },
        get_forwardDir: function() { return CS.Call(2, 167, 3, false, this); },
        set_forwardDir: function(v) { return CS.Call(3, 167, 3, false, this, v); },
        get_sidewaysDir: function() { return CS.Call(2, 167, 4, false, this); },
        set_sidewaysDir: function(v) { return CS.Call(3, 167, 4, false, this, v); },
        get_force: function() { return CS.Call(2, 167, 5, false, this); },
        set_force: function(v) { return CS.Call(3, 167, 5, false, this, v); },
        get_forwardSlip: function() { return CS.Call(2, 167, 6, false, this); },
        set_forwardSlip: function(v) { return CS.Call(3, 167, 6, false, this, v); },
        get_sidewaysSlip: function() { return CS.Call(2, 167, 7, false, this); },
        set_sidewaysSlip: function(v) { return CS.Call(3, 167, 7, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$WheelHit);

// UnityEngine.ContactPoint
var UnityEngine$ContactPoint = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.ContactPoint",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    definition: {
        ctor: function() { CS.Call(5, 168, 0, true, this); },
        get_point: function() { return CS.Call(2, 168, 0, false, this); },
        set_point: function(v) { return CS.Call(3, 168, 0, false, this, v); },
        get_normal: function() { return CS.Call(2, 168, 1, false, this); },
        set_normal: function(v) { return CS.Call(3, 168, 1, false, this, v); },
        get_thisCollider: function() { return CS.Call(2, 168, 2, false, this); },
        set_thisCollider: function(v) { return CS.Call(3, 168, 2, false, this, v); },
        get_otherCollider: function() { return CS.Call(2, 168, 3, false, this); },
        set_otherCollider: function(v) { return CS.Call(3, 168, 3, false, this, v); },
        get_separation: function() { return CS.Call(2, 168, 4, false, this); },
        set_separation: function(v) { return CS.Call(3, 168, 4, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$ContactPoint);

// UnityEngine.Rigidbody
var UnityEngine$Rigidbody = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Rigidbody",
    Kind: "Class",
    baseTypeName: "UnityEngine.Component",
    definition: {
        ctor: function() { CS.Call(5, 169, 0, true, this); },
        get_velocity: function() { return CS.Call(2, 169, 0, false, this); },
        set_velocity: function(v) { return CS.Call(3, 169, 0, false, this, v); },
        get_angularVelocity: function() { return CS.Call(2, 169, 1, false, this); },
        set_angularVelocity: function(v) { return CS.Call(3, 169, 1, false, this, v); },
        get_drag: function() { return CS.Call(2, 169, 2, false, this); },
        set_drag: function(v) { return CS.Call(3, 169, 2, false, this, v); },
        get_angularDrag: function() { return CS.Call(2, 169, 3, false, this); },
        set_angularDrag: function(v) { return CS.Call(3, 169, 3, false, this, v); },
        get_mass: function() { return CS.Call(2, 169, 4, false, this); },
        set_mass: function(v) { return CS.Call(3, 169, 4, false, this, v); },
        get_useGravity: function() { return CS.Call(2, 169, 5, false, this); },
        set_useGravity: function(v) { return CS.Call(3, 169, 5, false, this, v); },
        get_maxDepenetrationVelocity: function() { return CS.Call(2, 169, 6, false, this); },
        set_maxDepenetrationVelocity: function(v) { return CS.Call(3, 169, 6, false, this, v); },
        get_isKinematic: function() { return CS.Call(2, 169, 7, false, this); },
        set_isKinematic: function(v) { return CS.Call(3, 169, 7, false, this, v); },
        get_freezeRotation: function() { return CS.Call(2, 169, 8, false, this); },
        set_freezeRotation: function(v) { return CS.Call(3, 169, 8, false, this, v); },
        get_constraints: function() { return CS.Call(2, 169, 9, false, this); },
        set_constraints: function(v) { return CS.Call(3, 169, 9, false, this, v); },
        get_collisionDetectionMode: function() { return CS.Call(2, 169, 10, false, this); },
        set_collisionDetectionMode: function(v) { return CS.Call(3, 169, 10, false, this, v); },
        get_centerOfMass: function() { return CS.Call(2, 169, 11, false, this); },
        set_centerOfMass: function(v) { return CS.Call(3, 169, 11, false, this, v); },
        get_worldCenterOfMass: function() { return CS.Call(2, 169, 12, false, this); },
        set_worldCenterOfMass: function(v) { return CS.Call(3, 169, 12, false, this, v); },
        get_inertiaTensorRotation: function() { return CS.Call(2, 169, 13, false, this); },
        set_inertiaTensorRotation: function(v) { return CS.Call(3, 169, 13, false, this, v); },
        get_inertiaTensor: function() { return CS.Call(2, 169, 14, false, this); },
        set_inertiaTensor: function(v) { return CS.Call(3, 169, 14, false, this, v); },
        get_detectCollisions: function() { return CS.Call(2, 169, 15, false, this); },
        set_detectCollisions: function(v) { return CS.Call(3, 169, 15, false, this, v); },
        get_useConeFriction: function() { return CS.Call(2, 169, 16, false, this); },
        set_useConeFriction: function(v) { return CS.Call(3, 169, 16, false, this, v); },
        get_position: function() { return CS.Call(2, 169, 17, false, this); },
        set_position: function(v) { return CS.Call(3, 169, 17, false, this, v); },
        get_rotation: function() { return CS.Call(2, 169, 18, false, this); },
        set_rotation: function(v) { return CS.Call(3, 169, 18, false, this, v); },
        get_interpolation: function() { return CS.Call(2, 169, 19, false, this); },
        set_interpolation: function(v) { return CS.Call(3, 169, 19, false, this, v); },
        get_solverIterations: function() { return CS.Call(2, 169, 20, false, this); },
        set_solverIterations: function(v) { return CS.Call(3, 169, 20, false, this, v); },
        get_solverVelocityIterations: function() { return CS.Call(2, 169, 21, false, this); },
        set_solverVelocityIterations: function(v) { return CS.Call(3, 169, 21, false, this, v); },
        get_sleepThreshold: function() { return CS.Call(2, 169, 22, false, this); },
        set_sleepThreshold: function(v) { return CS.Call(3, 169, 22, false, this, v); },
        get_maxAngularVelocity: function() { return CS.Call(2, 169, 23, false, this); },
        set_maxAngularVelocity: function(v) { return CS.Call(3, 169, 23, false, this, v); },
        AddExplosionForce$$Single$$Vector3$$Single$$Single$$ForceMode: function(a0/*Single*/, a1/*Vector3*/, a2/*Single*/, a3/*Single*/, a4/*ForceMode*/) { 
            return CS.Call(4, 169, 0, false, this, a0, a1, a2, a3, a4); //Ret: Void
        },
        AddExplosionForce$$Single$$Vector3$$Single$$Single: function(a0/*Single*/, a1/*Vector3*/, a2/*Single*/, a3/*Single*/) { 
            return CS.Call(4, 169, 1, false, this, a0, a1, a2, a3); //Ret: Void
        },
        AddExplosionForce$$Single$$Vector3$$Single: function(a0/*Single*/, a1/*Vector3*/, a2/*Single*/) { 
            return CS.Call(4, 169, 2, false, this, a0, a1, a2); //Ret: Void
        },
        AddForce$$Single$$Single$$Single$$ForceMode: function(a0/*Single*/, a1/*Single*/, a2/*Single*/, a3/*ForceMode*/) { 
            return CS.Call(4, 169, 3, false, this, a0, a1, a2, a3); //Ret: Void
        },
        AddForce$$Single$$Single$$Single: function(a0/*Single*/, a1/*Single*/, a2/*Single*/) { 
            return CS.Call(4, 169, 4, false, this, a0, a1, a2); //Ret: Void
        },
        AddForce$$Vector3$$ForceMode: function(a0/*Vector3*/, a1/*ForceMode*/) { 
            return CS.Call(4, 169, 5, false, this, a0, a1); //Ret: Void
        },
        AddForce$$Vector3: function(a0/*Vector3*/) { 
            return CS.Call(4, 169, 6, false, this, a0); //Ret: Void
        },
        AddForceAtPosition$$Vector3$$Vector3$$ForceMode: function(a0/*Vector3*/, a1/*Vector3*/, a2/*ForceMode*/) { 
            return CS.Call(4, 169, 7, false, this, a0, a1, a2); //Ret: Void
        },
        AddForceAtPosition$$Vector3$$Vector3: function(a0/*Vector3*/, a1/*Vector3*/) { 
            return CS.Call(4, 169, 8, false, this, a0, a1); //Ret: Void
        },
        AddRelativeForce$$Single$$Single$$Single$$ForceMode: function(a0/*Single*/, a1/*Single*/, a2/*Single*/, a3/*ForceMode*/) { 
            return CS.Call(4, 169, 9, false, this, a0, a1, a2, a3); //Ret: Void
        },
        AddRelativeForce$$Single$$Single$$Single: function(a0/*Single*/, a1/*Single*/, a2/*Single*/) { 
            return CS.Call(4, 169, 10, false, this, a0, a1, a2); //Ret: Void
        },
        AddRelativeForce$$Vector3$$ForceMode: function(a0/*Vector3*/, a1/*ForceMode*/) { 
            return CS.Call(4, 169, 11, false, this, a0, a1); //Ret: Void
        },
        AddRelativeForce$$Vector3: function(a0/*Vector3*/) { 
            return CS.Call(4, 169, 12, false, this, a0); //Ret: Void
        },
        AddRelativeTorque$$Single$$Single$$Single$$ForceMode: function(a0/*Single*/, a1/*Single*/, a2/*Single*/, a3/*ForceMode*/) { 
            return CS.Call(4, 169, 13, false, this, a0, a1, a2, a3); //Ret: Void
        },
        AddRelativeTorque$$Single$$Single$$Single: function(a0/*Single*/, a1/*Single*/, a2/*Single*/) { 
            return CS.Call(4, 169, 14, false, this, a0, a1, a2); //Ret: Void
        },
        AddRelativeTorque$$Vector3$$ForceMode: function(a0/*Vector3*/, a1/*ForceMode*/) { 
            return CS.Call(4, 169, 15, false, this, a0, a1); //Ret: Void
        },
        AddRelativeTorque$$Vector3: function(a0/*Vector3*/) { 
            return CS.Call(4, 169, 16, false, this, a0); //Ret: Void
        },
        AddTorque$$Single$$Single$$Single$$ForceMode: function(a0/*Single*/, a1/*Single*/, a2/*Single*/, a3/*ForceMode*/) { 
            return CS.Call(4, 169, 17, false, this, a0, a1, a2, a3); //Ret: Void
        },
        AddTorque$$Single$$Single$$Single: function(a0/*Single*/, a1/*Single*/, a2/*Single*/) { 
            return CS.Call(4, 169, 18, false, this, a0, a1, a2); //Ret: Void
        },
        AddTorque$$Vector3$$ForceMode: function(a0/*Vector3*/, a1/*ForceMode*/) { 
            return CS.Call(4, 169, 19, false, this, a0, a1); //Ret: Void
        },
        AddTorque$$Vector3: function(a0/*Vector3*/) { 
            return CS.Call(4, 169, 20, false, this, a0); //Ret: Void
        },
        ClosestPointOnBounds: function(a0/*Vector3*/) { 
            return CS.Call(4, 169, 21, false, this, a0); //Ret: Vector3
        },
        GetPointVelocity: function(a0/*Vector3*/) { 
            return CS.Call(4, 169, 22, false, this, a0); //Ret: Vector3
        },
        GetRelativePointVelocity: function(a0/*Vector3*/) { 
            return CS.Call(4, 169, 23, false, this, a0); //Ret: Vector3
        },
        IsSleeping: function() { 
            return CS.Call(4, 169, 24, false, this); //Ret: Boolean
        },
        MovePosition: function(a0/*Vector3*/) { 
            return CS.Call(4, 169, 25, false, this, a0); //Ret: Void
        },
        MoveRotation: function(a0/*Quaternion*/) { 
            return CS.Call(4, 169, 26, false, this, a0); //Ret: Void
        },
        ResetCenterOfMass: function() { 
            return CS.Call(4, 169, 27, false, this); //Ret: Void
        },
        ResetInertiaTensor: function() { 
            return CS.Call(4, 169, 28, false, this); //Ret: Void
        },
        SetDensity: function(a0/*Single*/) { 
            return CS.Call(4, 169, 29, false, this, a0); //Ret: Void
        },
        Sleep: function() { 
            return CS.Call(4, 169, 30, false, this); //Ret: Void
        },
        SweepTest$$Vector3$$RaycastHit$$Single$$QueryTriggerInteraction: function(a0/*Vector3*/, a1/*RaycastHit&*/, a2/*Single*/, a3/*QueryTriggerInteraction*/) { 
            return CS.Call(4, 169, 31, false, this, a0, a1, a2, a3); //Ret: Boolean
        },
        SweepTest$$Vector3$$RaycastHit$$Single: function(a0/*Vector3*/, a1/*RaycastHit&*/, a2/*Single*/) { 
            return CS.Call(4, 169, 32, false, this, a0, a1, a2); //Ret: Boolean
        },
        SweepTest$$Vector3$$RaycastHit: function(a0/*Vector3*/, a1/*RaycastHit&*/) { 
            return CS.Call(4, 169, 33, false, this, a0, a1); //Ret: Boolean
        },
        SweepTestAll$$Vector3$$Single$$QueryTriggerInteraction: function(a0/*Vector3*/, a1/*Single*/, a2/*QueryTriggerInteraction*/) { 
            return CS.Call(4, 169, 34, false, this, a0, a1, a2); //Ret: RaycastHit[]
        },
        SweepTestAll$$Vector3$$Single: function(a0/*Vector3*/, a1/*Single*/) { 
            return CS.Call(4, 169, 35, false, this, a0, a1); //Ret: RaycastHit[]
        },
        SweepTestAll$$Vector3: function(a0/*Vector3*/) { 
            return CS.Call(4, 169, 36, false, this, a0); //Ret: RaycastHit[]
        },
        WakeUp: function() { 
            return CS.Call(4, 169, 37, false, this); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Rigidbody);

// UnityEngine.Joint
var UnityEngine$Joint = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Joint",
    Kind: "Class",
    baseTypeName: "UnityEngine.Component",
    definition: {
        ctor: function() { CS.Call(5, 170, 0, true, this); },
        get_connectedBody: function() { return CS.Call(2, 170, 0, false, this); },
        set_connectedBody: function(v) { return CS.Call(3, 170, 0, false, this, v); },
        get_axis: function() { return CS.Call(2, 170, 1, false, this); },
        set_axis: function(v) { return CS.Call(3, 170, 1, false, this, v); },
        get_anchor: function() { return CS.Call(2, 170, 2, false, this); },
        set_anchor: function(v) { return CS.Call(3, 170, 2, false, this, v); },
        get_connectedAnchor: function() { return CS.Call(2, 170, 3, false, this); },
        set_connectedAnchor: function(v) { return CS.Call(3, 170, 3, false, this, v); },
        get_autoConfigureConnectedAnchor: function() { return CS.Call(2, 170, 4, false, this); },
        set_autoConfigureConnectedAnchor: function(v) { return CS.Call(3, 170, 4, false, this, v); },
        get_breakForce: function() { return CS.Call(2, 170, 5, false, this); },
        set_breakForce: function(v) { return CS.Call(3, 170, 5, false, this, v); },
        get_breakTorque: function() { return CS.Call(2, 170, 6, false, this); },
        set_breakTorque: function(v) { return CS.Call(3, 170, 6, false, this, v); },
        get_enableCollision: function() { return CS.Call(2, 170, 7, false, this); },
        set_enableCollision: function(v) { return CS.Call(3, 170, 7, false, this, v); },
        get_enablePreprocessing: function() { return CS.Call(2, 170, 8, false, this); },
        set_enablePreprocessing: function(v) { return CS.Call(3, 170, 8, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Joint);

// UnityEngine.HingeJoint
var UnityEngine$HingeJoint = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.HingeJoint",
    Kind: "Class",
    baseTypeName: "UnityEngine.Joint",
    definition: {
        ctor: function() { CS.Call(5, 171, 0, true, this); },
        get_motor: function() { return CS.Call(2, 171, 0, false, this); },
        set_motor: function(v) { return CS.Call(3, 171, 0, false, this, v); },
        get_limits: function() { return CS.Call(2, 171, 1, false, this); },
        set_limits: function(v) { return CS.Call(3, 171, 1, false, this, v); },
        get_spring: function() { return CS.Call(2, 171, 2, false, this); },
        set_spring: function(v) { return CS.Call(3, 171, 2, false, this, v); },
        get_useMotor: function() { return CS.Call(2, 171, 3, false, this); },
        set_useMotor: function(v) { return CS.Call(3, 171, 3, false, this, v); },
        get_useLimits: function() { return CS.Call(2, 171, 4, false, this); },
        set_useLimits: function(v) { return CS.Call(3, 171, 4, false, this, v); },
        get_useSpring: function() { return CS.Call(2, 171, 5, false, this); },
        set_useSpring: function(v) { return CS.Call(3, 171, 5, false, this, v); },
        get_velocity: function() { return CS.Call(2, 171, 6, false, this); },
        set_velocity: function(v) { return CS.Call(3, 171, 6, false, this, v); },
        get_angle: function() { return CS.Call(2, 171, 7, false, this); },
        set_angle: function(v) { return CS.Call(3, 171, 7, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$HingeJoint);

// UnityEngine.SpringJoint
var UnityEngine$SpringJoint = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.SpringJoint",
    Kind: "Class",
    baseTypeName: "UnityEngine.Joint",
    definition: {
        ctor: function() { CS.Call(5, 172, 0, true, this); },
        get_spring: function() { return CS.Call(2, 172, 0, false, this); },
        set_spring: function(v) { return CS.Call(3, 172, 0, false, this, v); },
        get_damper: function() { return CS.Call(2, 172, 1, false, this); },
        set_damper: function(v) { return CS.Call(3, 172, 1, false, this, v); },
        get_minDistance: function() { return CS.Call(2, 172, 2, false, this); },
        set_minDistance: function(v) { return CS.Call(3, 172, 2, false, this, v); },
        get_maxDistance: function() { return CS.Call(2, 172, 3, false, this); },
        set_maxDistance: function(v) { return CS.Call(3, 172, 3, false, this, v); },
        get_tolerance: function() { return CS.Call(2, 172, 4, false, this); },
        set_tolerance: function(v) { return CS.Call(3, 172, 4, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$SpringJoint);

// UnityEngine.FixedJoint
var UnityEngine$FixedJoint = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.FixedJoint",
    Kind: "Class",
    baseTypeName: "UnityEngine.Joint",
    definition: {
        ctor: function() { CS.Call(5, 173, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$FixedJoint);

// UnityEngine.CharacterJoint
var UnityEngine$CharacterJoint = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.CharacterJoint",
    Kind: "Class",
    baseTypeName: "UnityEngine.Joint",
    definition: {
        ctor: function() { CS.Call(5, 174, 0, true, this); },
        get_swingAxis: function() { return CS.Call(2, 174, 0, false, this); },
        set_swingAxis: function(v) { return CS.Call(3, 174, 0, false, this, v); },
        get_twistLimitSpring: function() { return CS.Call(2, 174, 1, false, this); },
        set_twistLimitSpring: function(v) { return CS.Call(3, 174, 1, false, this, v); },
        get_swingLimitSpring: function() { return CS.Call(2, 174, 2, false, this); },
        set_swingLimitSpring: function(v) { return CS.Call(3, 174, 2, false, this, v); },
        get_lowTwistLimit: function() { return CS.Call(2, 174, 3, false, this); },
        set_lowTwistLimit: function(v) { return CS.Call(3, 174, 3, false, this, v); },
        get_highTwistLimit: function() { return CS.Call(2, 174, 4, false, this); },
        set_highTwistLimit: function(v) { return CS.Call(3, 174, 4, false, this, v); },
        get_swing1Limit: function() { return CS.Call(2, 174, 5, false, this); },
        set_swing1Limit: function(v) { return CS.Call(3, 174, 5, false, this, v); },
        get_swing2Limit: function() { return CS.Call(2, 174, 6, false, this); },
        set_swing2Limit: function(v) { return CS.Call(3, 174, 6, false, this, v); },
        get_enableProjection: function() { return CS.Call(2, 174, 7, false, this); },
        set_enableProjection: function(v) { return CS.Call(3, 174, 7, false, this, v); },
        get_projectionDistance: function() { return CS.Call(2, 174, 8, false, this); },
        set_projectionDistance: function(v) { return CS.Call(3, 174, 8, false, this, v); },
        get_projectionAngle: function() { return CS.Call(2, 174, 9, false, this); },
        set_projectionAngle: function(v) { return CS.Call(3, 174, 9, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$CharacterJoint);

// UnityEngine.ConfigurableJoint
var UnityEngine$ConfigurableJoint = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.ConfigurableJoint",
    Kind: "Class",
    baseTypeName: "UnityEngine.Joint",
    definition: {
        ctor: function() { CS.Call(5, 175, 0, true, this); },
        get_secondaryAxis: function() { return CS.Call(2, 175, 0, false, this); },
        set_secondaryAxis: function(v) { return CS.Call(3, 175, 0, false, this, v); },
        get_xMotion: function() { return CS.Call(2, 175, 1, false, this); },
        set_xMotion: function(v) { return CS.Call(3, 175, 1, false, this, v); },
        get_yMotion: function() { return CS.Call(2, 175, 2, false, this); },
        set_yMotion: function(v) { return CS.Call(3, 175, 2, false, this, v); },
        get_zMotion: function() { return CS.Call(2, 175, 3, false, this); },
        set_zMotion: function(v) { return CS.Call(3, 175, 3, false, this, v); },
        get_angularXMotion: function() { return CS.Call(2, 175, 4, false, this); },
        set_angularXMotion: function(v) { return CS.Call(3, 175, 4, false, this, v); },
        get_angularYMotion: function() { return CS.Call(2, 175, 5, false, this); },
        set_angularYMotion: function(v) { return CS.Call(3, 175, 5, false, this, v); },
        get_angularZMotion: function() { return CS.Call(2, 175, 6, false, this); },
        set_angularZMotion: function(v) { return CS.Call(3, 175, 6, false, this, v); },
        get_linearLimitSpring: function() { return CS.Call(2, 175, 7, false, this); },
        set_linearLimitSpring: function(v) { return CS.Call(3, 175, 7, false, this, v); },
        get_angularXLimitSpring: function() { return CS.Call(2, 175, 8, false, this); },
        set_angularXLimitSpring: function(v) { return CS.Call(3, 175, 8, false, this, v); },
        get_angularYZLimitSpring: function() { return CS.Call(2, 175, 9, false, this); },
        set_angularYZLimitSpring: function(v) { return CS.Call(3, 175, 9, false, this, v); },
        get_linearLimit: function() { return CS.Call(2, 175, 10, false, this); },
        set_linearLimit: function(v) { return CS.Call(3, 175, 10, false, this, v); },
        get_lowAngularXLimit: function() { return CS.Call(2, 175, 11, false, this); },
        set_lowAngularXLimit: function(v) { return CS.Call(3, 175, 11, false, this, v); },
        get_highAngularXLimit: function() { return CS.Call(2, 175, 12, false, this); },
        set_highAngularXLimit: function(v) { return CS.Call(3, 175, 12, false, this, v); },
        get_angularYLimit: function() { return CS.Call(2, 175, 13, false, this); },
        set_angularYLimit: function(v) { return CS.Call(3, 175, 13, false, this, v); },
        get_angularZLimit: function() { return CS.Call(2, 175, 14, false, this); },
        set_angularZLimit: function(v) { return CS.Call(3, 175, 14, false, this, v); },
        get_targetPosition: function() { return CS.Call(2, 175, 15, false, this); },
        set_targetPosition: function(v) { return CS.Call(3, 175, 15, false, this, v); },
        get_targetVelocity: function() { return CS.Call(2, 175, 16, false, this); },
        set_targetVelocity: function(v) { return CS.Call(3, 175, 16, false, this, v); },
        get_xDrive: function() { return CS.Call(2, 175, 17, false, this); },
        set_xDrive: function(v) { return CS.Call(3, 175, 17, false, this, v); },
        get_yDrive: function() { return CS.Call(2, 175, 18, false, this); },
        set_yDrive: function(v) { return CS.Call(3, 175, 18, false, this, v); },
        get_zDrive: function() { return CS.Call(2, 175, 19, false, this); },
        set_zDrive: function(v) { return CS.Call(3, 175, 19, false, this, v); },
        get_targetRotation: function() { return CS.Call(2, 175, 20, false, this); },
        set_targetRotation: function(v) { return CS.Call(3, 175, 20, false, this, v); },
        get_targetAngularVelocity: function() { return CS.Call(2, 175, 21, false, this); },
        set_targetAngularVelocity: function(v) { return CS.Call(3, 175, 21, false, this, v); },
        get_rotationDriveMode: function() { return CS.Call(2, 175, 22, false, this); },
        set_rotationDriveMode: function(v) { return CS.Call(3, 175, 22, false, this, v); },
        get_angularXDrive: function() { return CS.Call(2, 175, 23, false, this); },
        set_angularXDrive: function(v) { return CS.Call(3, 175, 23, false, this, v); },
        get_angularYZDrive: function() { return CS.Call(2, 175, 24, false, this); },
        set_angularYZDrive: function(v) { return CS.Call(3, 175, 24, false, this, v); },
        get_slerpDrive: function() { return CS.Call(2, 175, 25, false, this); },
        set_slerpDrive: function(v) { return CS.Call(3, 175, 25, false, this, v); },
        get_projectionMode: function() { return CS.Call(2, 175, 26, false, this); },
        set_projectionMode: function(v) { return CS.Call(3, 175, 26, false, this, v); },
        get_projectionDistance: function() { return CS.Call(2, 175, 27, false, this); },
        set_projectionDistance: function(v) { return CS.Call(3, 175, 27, false, this, v); },
        get_projectionAngle: function() { return CS.Call(2, 175, 28, false, this); },
        set_projectionAngle: function(v) { return CS.Call(3, 175, 28, false, this, v); },
        get_configuredInWorldSpace: function() { return CS.Call(2, 175, 29, false, this); },
        set_configuredInWorldSpace: function(v) { return CS.Call(3, 175, 29, false, this, v); },
        get_swapBodies: function() { return CS.Call(2, 175, 30, false, this); },
        set_swapBodies: function(v) { return CS.Call(3, 175, 30, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$ConfigurableJoint);

// UnityEngine.ConstantForce
var UnityEngine$ConstantForce = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.ConstantForce",
    Kind: "Class",
    baseTypeName: "UnityEngine.Behaviour",
    definition: {
        ctor: function() { CS.Call(5, 176, 0, true, this); },
        get_force: function() { return CS.Call(2, 176, 0, false, this); },
        set_force: function(v) { return CS.Call(3, 176, 0, false, this, v); },
        get_relativeForce: function() { return CS.Call(2, 176, 1, false, this); },
        set_relativeForce: function(v) { return CS.Call(3, 176, 1, false, this, v); },
        get_torque: function() { return CS.Call(2, 176, 2, false, this); },
        set_torque: function(v) { return CS.Call(3, 176, 2, false, this, v); },
        get_relativeTorque: function() { return CS.Call(2, 176, 3, false, this); },
        set_relativeTorque: function(v) { return CS.Call(3, 176, 3, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$ConstantForce);

// UnityEngine.Collider
var UnityEngine$Collider = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Collider",
    Kind: "Class",
    baseTypeName: "UnityEngine.Component",
    definition: {
        ctor: function() { CS.Call(5, 177, 0, true, this); },
        get_enabled: function() { return CS.Call(2, 177, 0, false, this); },
        set_enabled: function(v) { return CS.Call(3, 177, 0, false, this, v); },
        get_attachedRigidbody: function() { return CS.Call(2, 177, 1, false, this); },
        set_attachedRigidbody: function(v) { return CS.Call(3, 177, 1, false, this, v); },
        get_isTrigger: function() { return CS.Call(2, 177, 2, false, this); },
        set_isTrigger: function(v) { return CS.Call(3, 177, 2, false, this, v); },
        get_contactOffset: function() { return CS.Call(2, 177, 3, false, this); },
        set_contactOffset: function(v) { return CS.Call(3, 177, 3, false, this, v); },
        get_material: function() { return CS.Call(2, 177, 4, false, this); },
        set_material: function(v) { return CS.Call(3, 177, 4, false, this, v); },
        get_sharedMaterial: function() { return CS.Call(2, 177, 5, false, this); },
        set_sharedMaterial: function(v) { return CS.Call(3, 177, 5, false, this, v); },
        get_bounds: function() { return CS.Call(2, 177, 6, false, this); },
        set_bounds: function(v) { return CS.Call(3, 177, 6, false, this, v); },
        ClosestPointOnBounds: function(a0/*Vector3*/) { 
            return CS.Call(4, 177, 0, false, this, a0); //Ret: Vector3
        },
        Raycast: function(a0/*Ray*/, a1/*RaycastHit&*/, a2/*Single*/) { 
            return CS.Call(4, 177, 1, false, this, a0, a1, a2); //Ret: Boolean
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Collider);

// UnityEngine.BoxCollider
var UnityEngine$BoxCollider = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.BoxCollider",
    Kind: "Class",
    baseTypeName: "UnityEngine.Collider",
    definition: {
        ctor: function() { CS.Call(5, 178, 0, true, this); },
        get_center: function() { return CS.Call(2, 178, 0, false, this); },
        set_center: function(v) { return CS.Call(3, 178, 0, false, this, v); },
        get_size: function() { return CS.Call(2, 178, 1, false, this); },
        set_size: function(v) { return CS.Call(3, 178, 1, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$BoxCollider);

// UnityEngine.SphereCollider
var UnityEngine$SphereCollider = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.SphereCollider",
    Kind: "Class",
    baseTypeName: "UnityEngine.Collider",
    definition: {
        ctor: function() { CS.Call(5, 179, 0, true, this); },
        get_center: function() { return CS.Call(2, 179, 0, false, this); },
        set_center: function(v) { return CS.Call(3, 179, 0, false, this, v); },
        get_radius: function() { return CS.Call(2, 179, 1, false, this); },
        set_radius: function(v) { return CS.Call(3, 179, 1, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$SphereCollider);

// UnityEngine.MeshCollider
var UnityEngine$MeshCollider = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.MeshCollider",
    Kind: "Class",
    baseTypeName: "UnityEngine.Collider",
    definition: {
        ctor: function() { CS.Call(5, 180, 0, true, this); },
        get_sharedMesh: function() { return CS.Call(2, 180, 0, false, this); },
        set_sharedMesh: function(v) { return CS.Call(3, 180, 0, false, this, v); },
        get_convex: function() { return CS.Call(2, 180, 1, false, this); },
        set_convex: function(v) { return CS.Call(3, 180, 1, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$MeshCollider);

// UnityEngine.CapsuleCollider
var UnityEngine$CapsuleCollider = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.CapsuleCollider",
    Kind: "Class",
    baseTypeName: "UnityEngine.Collider",
    definition: {
        ctor: function() { CS.Call(5, 181, 0, true, this); },
        get_center: function() { return CS.Call(2, 181, 0, false, this); },
        set_center: function(v) { return CS.Call(3, 181, 0, false, this, v); },
        get_radius: function() { return CS.Call(2, 181, 1, false, this); },
        set_radius: function(v) { return CS.Call(3, 181, 1, false, this, v); },
        get_height: function() { return CS.Call(2, 181, 2, false, this); },
        set_height: function(v) { return CS.Call(3, 181, 2, false, this, v); },
        get_direction: function() { return CS.Call(2, 181, 3, false, this); },
        set_direction: function(v) { return CS.Call(3, 181, 3, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$CapsuleCollider);

// UnityEngine.WheelCollider
var UnityEngine$WheelCollider = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.WheelCollider",
    Kind: "Class",
    baseTypeName: "UnityEngine.Collider",
    definition: {
        ctor: function() { CS.Call(5, 182, 0, true, this); },
        get_center: function() { return CS.Call(2, 182, 0, false, this); },
        set_center: function(v) { return CS.Call(3, 182, 0, false, this, v); },
        get_radius: function() { return CS.Call(2, 182, 1, false, this); },
        set_radius: function(v) { return CS.Call(3, 182, 1, false, this, v); },
        get_suspensionDistance: function() { return CS.Call(2, 182, 2, false, this); },
        set_suspensionDistance: function(v) { return CS.Call(3, 182, 2, false, this, v); },
        get_suspensionSpring: function() { return CS.Call(2, 182, 3, false, this); },
        set_suspensionSpring: function(v) { return CS.Call(3, 182, 3, false, this, v); },
        get_forceAppPointDistance: function() { return CS.Call(2, 182, 4, false, this); },
        set_forceAppPointDistance: function(v) { return CS.Call(3, 182, 4, false, this, v); },
        get_mass: function() { return CS.Call(2, 182, 5, false, this); },
        set_mass: function(v) { return CS.Call(3, 182, 5, false, this, v); },
        get_wheelDampingRate: function() { return CS.Call(2, 182, 6, false, this); },
        set_wheelDampingRate: function(v) { return CS.Call(3, 182, 6, false, this, v); },
        get_forwardFriction: function() { return CS.Call(2, 182, 7, false, this); },
        set_forwardFriction: function(v) { return CS.Call(3, 182, 7, false, this, v); },
        get_sidewaysFriction: function() { return CS.Call(2, 182, 8, false, this); },
        set_sidewaysFriction: function(v) { return CS.Call(3, 182, 8, false, this, v); },
        get_motorTorque: function() { return CS.Call(2, 182, 9, false, this); },
        set_motorTorque: function(v) { return CS.Call(3, 182, 9, false, this, v); },
        get_brakeTorque: function() { return CS.Call(2, 182, 10, false, this); },
        set_brakeTorque: function(v) { return CS.Call(3, 182, 10, false, this, v); },
        get_steerAngle: function() { return CS.Call(2, 182, 11, false, this); },
        set_steerAngle: function(v) { return CS.Call(3, 182, 11, false, this, v); },
        get_isGrounded: function() { return CS.Call(2, 182, 12, false, this); },
        set_isGrounded: function(v) { return CS.Call(3, 182, 12, false, this, v); },
        get_sprungMass: function() { return CS.Call(2, 182, 13, false, this); },
        set_sprungMass: function(v) { return CS.Call(3, 182, 13, false, this, v); },
        get_rpm: function() { return CS.Call(2, 182, 14, false, this); },
        set_rpm: function(v) { return CS.Call(3, 182, 14, false, this, v); },
        ConfigureVehicleSubsteps: function(a0/*Single*/, a1/*Int32*/, a2/*Int32*/) { 
            return CS.Call(4, 182, 0, false, this, a0, a1, a2); //Ret: Void
        },
        GetGroundHit: function(a0/*WheelHit&*/) { 
            return CS.Call(4, 182, 1, false, this, a0); //Ret: Boolean
        },
        GetWorldPose: function(a0/*Vector3&*/, a1/*Quaternion&*/) { 
            return CS.Call(4, 182, 2, false, this, a0, a1); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$WheelCollider);

// UnityEngine.RaycastHit
var UnityEngine$RaycastHit = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.RaycastHit",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    definition: {
        ctor: function() { CS.Call(5, 183, 0, true, this); },
        get_point: function() { return CS.Call(2, 183, 0, false, this); },
        set_point: function(v) { return CS.Call(3, 183, 0, false, this, v); },
        get_normal: function() { return CS.Call(2, 183, 1, false, this); },
        set_normal: function(v) { return CS.Call(3, 183, 1, false, this, v); },
        get_barycentricCoordinate: function() { return CS.Call(2, 183, 2, false, this); },
        set_barycentricCoordinate: function(v) { return CS.Call(3, 183, 2, false, this, v); },
        get_distance: function() { return CS.Call(2, 183, 3, false, this); },
        set_distance: function(v) { return CS.Call(3, 183, 3, false, this, v); },
        get_triangleIndex: function() { return CS.Call(2, 183, 4, false, this); },
        set_triangleIndex: function(v) { return CS.Call(3, 183, 4, false, this, v); },
        get_textureCoord: function() { return CS.Call(2, 183, 5, false, this); },
        set_textureCoord: function(v) { return CS.Call(3, 183, 5, false, this, v); },
        get_textureCoord2: function() { return CS.Call(2, 183, 6, false, this); },
        set_textureCoord2: function(v) { return CS.Call(3, 183, 6, false, this, v); },
        get_lightmapCoord: function() { return CS.Call(2, 183, 7, false, this); },
        set_lightmapCoord: function(v) { return CS.Call(3, 183, 7, false, this, v); },
        get_collider: function() { return CS.Call(2, 183, 8, false, this); },
        set_collider: function(v) { return CS.Call(3, 183, 8, false, this, v); },
        get_rigidbody: function() { return CS.Call(2, 183, 9, false, this); },
        set_rigidbody: function(v) { return CS.Call(3, 183, 9, false, this, v); },
        get_transform: function() { return CS.Call(2, 183, 10, false, this); },
        set_transform: function(v) { return CS.Call(3, 183, 10, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$RaycastHit);

// UnityEngine.PhysicMaterial
var UnityEngine$PhysicMaterial = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.PhysicMaterial",
    Kind: "Class",
    baseTypeName: "UnityEngine.Object",
    definition: {
        ctor: function() { CS.Call(5, 184, 0, true, this); },
        ctor$$String: function(a0) { CS.Call(5, 184, 1, true, this, a0); },
        get_dynamicFriction: function() { return CS.Call(2, 184, 0, false, this); },
        set_dynamicFriction: function(v) { return CS.Call(3, 184, 0, false, this, v); },
        get_staticFriction: function() { return CS.Call(2, 184, 1, false, this); },
        set_staticFriction: function(v) { return CS.Call(3, 184, 1, false, this, v); },
        get_bounciness: function() { return CS.Call(2, 184, 2, false, this); },
        set_bounciness: function(v) { return CS.Call(3, 184, 2, false, this, v); },
        get_frictionCombine: function() { return CS.Call(2, 184, 3, false, this); },
        set_frictionCombine: function(v) { return CS.Call(3, 184, 3, false, this, v); },
        get_bounceCombine: function() { return CS.Call(2, 184, 4, false, this); },
        set_bounceCombine: function(v) { return CS.Call(3, 184, 4, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$PhysicMaterial);

// UnityEngine.CharacterController
var UnityEngine$CharacterController = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.CharacterController",
    Kind: "Class",
    baseTypeName: "UnityEngine.Collider",
    definition: {
        ctor: function() { CS.Call(5, 185, 0, true, this); },
        get_isGrounded: function() { return CS.Call(2, 185, 0, false, this); },
        set_isGrounded: function(v) { return CS.Call(3, 185, 0, false, this, v); },
        get_velocity: function() { return CS.Call(2, 185, 1, false, this); },
        set_velocity: function(v) { return CS.Call(3, 185, 1, false, this, v); },
        get_collisionFlags: function() { return CS.Call(2, 185, 2, false, this); },
        set_collisionFlags: function(v) { return CS.Call(3, 185, 2, false, this, v); },
        get_radius: function() { return CS.Call(2, 185, 3, false, this); },
        set_radius: function(v) { return CS.Call(3, 185, 3, false, this, v); },
        get_height: function() { return CS.Call(2, 185, 4, false, this); },
        set_height: function(v) { return CS.Call(3, 185, 4, false, this, v); },
        get_center: function() { return CS.Call(2, 185, 5, false, this); },
        set_center: function(v) { return CS.Call(3, 185, 5, false, this, v); },
        get_slopeLimit: function() { return CS.Call(2, 185, 6, false, this); },
        set_slopeLimit: function(v) { return CS.Call(3, 185, 6, false, this, v); },
        get_stepOffset: function() { return CS.Call(2, 185, 7, false, this); },
        set_stepOffset: function(v) { return CS.Call(3, 185, 7, false, this, v); },
        get_skinWidth: function() { return CS.Call(2, 185, 8, false, this); },
        set_skinWidth: function(v) { return CS.Call(3, 185, 8, false, this, v); },
        get_detectCollisions: function() { return CS.Call(2, 185, 9, false, this); },
        set_detectCollisions: function(v) { return CS.Call(3, 185, 9, false, this, v); },
        get_enableOverlapRecovery: function() { return CS.Call(2, 185, 10, false, this); },
        set_enableOverlapRecovery: function(v) { return CS.Call(3, 185, 10, false, this, v); },
        Move: function(a0/*Vector3*/) { 
            return CS.Call(4, 185, 0, false, this, a0); //Ret: CollisionFlags
        },
        SimpleMove: function(a0/*Vector3*/) { 
            return CS.Call(4, 185, 1, false, this, a0); //Ret: Boolean
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$CharacterController);

// UnityEngine.ClothSphereColliderPair
var UnityEngine$ClothSphereColliderPair = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.ClothSphereColliderPair",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    definition: {
        ctor: function() { CS.Call(5, 186, 0, true, this); },
        ctor$$SphereCollider: function(a0) { CS.Call(5, 186, 1, true, this, a0); },
        ctor$$SphereCollider$$SphereCollider: function(a0, a1) { CS.Call(5, 186, 2, true, this, a0, a1); },
        get_first: function() { return CS.Call(2, 186, 0, false, this); },
        set_first: function(v) { return CS.Call(3, 186, 0, false, this, v); },
        get_second: function() { return CS.Call(2, 186, 1, false, this); },
        set_second: function(v) { return CS.Call(3, 186, 1, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$ClothSphereColliderPair);

// UnityEngine.Cloth
var UnityEngine$Cloth = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Cloth",
    Kind: "Class",
    baseTypeName: "UnityEngine.Component",
    definition: {
        ctor: function() { CS.Call(5, 187, 0, true, this); },
        get_sleepThreshold: function() { return CS.Call(2, 187, 0, false, this); },
        set_sleepThreshold: function(v) { return CS.Call(3, 187, 0, false, this, v); },
        get_bendingStiffness: function() { return CS.Call(2, 187, 1, false, this); },
        set_bendingStiffness: function(v) { return CS.Call(3, 187, 1, false, this, v); },
        get_stretchingStiffness: function() { return CS.Call(2, 187, 2, false, this); },
        set_stretchingStiffness: function(v) { return CS.Call(3, 187, 2, false, this, v); },
        get_damping: function() { return CS.Call(2, 187, 3, false, this); },
        set_damping: function(v) { return CS.Call(3, 187, 3, false, this, v); },
        get_externalAcceleration: function() { return CS.Call(2, 187, 4, false, this); },
        set_externalAcceleration: function(v) { return CS.Call(3, 187, 4, false, this, v); },
        get_randomAcceleration: function() { return CS.Call(2, 187, 5, false, this); },
        set_randomAcceleration: function(v) { return CS.Call(3, 187, 5, false, this, v); },
        get_useGravity: function() { return CS.Call(2, 187, 6, false, this); },
        set_useGravity: function(v) { return CS.Call(3, 187, 6, false, this, v); },
        get_enabled: function() { return CS.Call(2, 187, 7, false, this); },
        set_enabled: function(v) { return CS.Call(3, 187, 7, false, this, v); },
        get_vertices: function() { return CS.Call(2, 187, 8, false, this); },
        set_vertices: function(v) { return CS.Call(3, 187, 8, false, this, v); },
        get_normals: function() { return CS.Call(2, 187, 9, false, this); },
        set_normals: function(v) { return CS.Call(3, 187, 9, false, this, v); },
        get_friction: function() { return CS.Call(2, 187, 10, false, this); },
        set_friction: function(v) { return CS.Call(3, 187, 10, false, this, v); },
        get_collisionMassScale: function() { return CS.Call(2, 187, 11, false, this); },
        set_collisionMassScale: function(v) { return CS.Call(3, 187, 11, false, this, v); },
        get_enableContinuousCollision: function() { return CS.Call(2, 187, 12, false, this); },
        set_enableContinuousCollision: function(v) { return CS.Call(3, 187, 12, false, this, v); },
        get_useVirtualParticles: function() { return CS.Call(2, 187, 13, false, this); },
        set_useVirtualParticles: function(v) { return CS.Call(3, 187, 13, false, this, v); },
        get_enableTethers: function() { return CS.Call(2, 187, 14, false, this); },
        set_enableTethers: function(v) { return CS.Call(3, 187, 14, false, this, v); },
        get_coefficients: function() { return CS.Call(2, 187, 15, false, this); },
        set_coefficients: function(v) { return CS.Call(3, 187, 15, false, this, v); },
        get_worldVelocityScale: function() { return CS.Call(2, 187, 16, false, this); },
        set_worldVelocityScale: function(v) { return CS.Call(3, 187, 16, false, this, v); },
        get_worldAccelerationScale: function() { return CS.Call(2, 187, 17, false, this); },
        set_worldAccelerationScale: function(v) { return CS.Call(3, 187, 17, false, this, v); },
        get_clothSolverFrequency: function() { return CS.Call(2, 187, 18, false, this); },
        set_clothSolverFrequency: function(v) { return CS.Call(3, 187, 18, false, this, v); },
        get_capsuleColliders: function() { return CS.Call(2, 187, 19, false, this); },
        set_capsuleColliders: function(v) { return CS.Call(3, 187, 19, false, this, v); },
        get_sphereColliders: function() { return CS.Call(2, 187, 20, false, this); },
        set_sphereColliders: function(v) { return CS.Call(3, 187, 20, false, this, v); },
        ClearTransformMotion: function() { 
            return CS.Call(4, 187, 0, false, this); //Ret: Void
        },
        SetEnabledFading$$Boolean$$Single: function(a0/*Boolean*/, a1/*Single*/) { 
            return CS.Call(4, 187, 1, false, this, a0, a1); //Ret: Void
        },
        SetEnabledFading$$Boolean: function(a0/*Boolean*/) { 
            return CS.Call(4, 187, 2, false, this, a0); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Cloth);

// UnityEngine.Physics2D
var UnityEngine$Physics2D = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Physics2D",
    Kind: "Class",
    baseTypeName: "System.Object",
    staticFields: {
        IgnoreRaycastLayer: {
            get: function() { return CS.Call(0, 188, 0, true); }, 
            set: function(v) { return CS.Call(1, 188, 0, true, v); }
        },
        DefaultRaycastLayers: {
            get: function() { return CS.Call(0, 188, 1, true); }, 
            set: function(v) { return CS.Call(1, 188, 1, true, v); }
        },
        AllLayers: {
            get: function() { return CS.Call(0, 188, 2, true); }, 
            set: function(v) { return CS.Call(1, 188, 2, true, v); }
        },
    },
    staticDefinition: {
        get_velocityIterations: function() { return CS.Call(2, 188, 0, true); },
        set_velocityIterations: function(v) { return CS.Call(3, 188, 0, true, v); },
        get_positionIterations: function() { return CS.Call(2, 188, 1, true); },
        set_positionIterations: function(v) { return CS.Call(3, 188, 1, true, v); },
        get_gravity: function() { return CS.Call(2, 188, 2, true); },
        set_gravity: function(v) { return CS.Call(3, 188, 2, true, v); },
        get_queriesHitTriggers: function() { return CS.Call(2, 188, 3, true); },
        set_queriesHitTriggers: function(v) { return CS.Call(3, 188, 3, true, v); },
        get_queriesStartInColliders: function() { return CS.Call(2, 188, 4, true); },
        set_queriesStartInColliders: function(v) { return CS.Call(3, 188, 4, true, v); },
        get_changeStopsCallbacks: function() { return CS.Call(2, 188, 5, true); },
        set_changeStopsCallbacks: function(v) { return CS.Call(3, 188, 5, true, v); },
        get_velocityThreshold: function() { return CS.Call(2, 188, 6, true); },
        set_velocityThreshold: function(v) { return CS.Call(3, 188, 6, true, v); },
        get_maxLinearCorrection: function() { return CS.Call(2, 188, 7, true); },
        set_maxLinearCorrection: function(v) { return CS.Call(3, 188, 7, true, v); },
        get_maxAngularCorrection: function() { return CS.Call(2, 188, 8, true); },
        set_maxAngularCorrection: function(v) { return CS.Call(3, 188, 8, true, v); },
        get_maxTranslationSpeed: function() { return CS.Call(2, 188, 9, true); },
        set_maxTranslationSpeed: function(v) { return CS.Call(3, 188, 9, true, v); },
        get_maxRotationSpeed: function() { return CS.Call(2, 188, 10, true); },
        set_maxRotationSpeed: function(v) { return CS.Call(3, 188, 10, true, v); },
        get_minPenetrationForPenalty: function() { return CS.Call(2, 188, 11, true); },
        set_minPenetrationForPenalty: function(v) { return CS.Call(3, 188, 11, true, v); },
        get_baumgarteScale: function() { return CS.Call(2, 188, 12, true); },
        set_baumgarteScale: function(v) { return CS.Call(3, 188, 12, true, v); },
        get_baumgarteTOIScale: function() { return CS.Call(2, 188, 13, true); },
        set_baumgarteTOIScale: function(v) { return CS.Call(3, 188, 13, true, v); },
        get_timeToSleep: function() { return CS.Call(2, 188, 14, true); },
        set_timeToSleep: function(v) { return CS.Call(3, 188, 14, true, v); },
        get_linearSleepTolerance: function() { return CS.Call(2, 188, 15, true); },
        set_linearSleepTolerance: function(v) { return CS.Call(3, 188, 15, true, v); },
        get_angularSleepTolerance: function() { return CS.Call(2, 188, 16, true); },
        set_angularSleepTolerance: function(v) { return CS.Call(3, 188, 16, true, v); },
        get_alwaysShowColliders: function() { return CS.Call(2, 188, 17, true); },
        set_alwaysShowColliders: function(v) { return CS.Call(3, 188, 17, true, v); },
        get_showColliderSleep: function() { return CS.Call(2, 188, 18, true); },
        set_showColliderSleep: function(v) { return CS.Call(3, 188, 18, true, v); },
        get_showColliderContacts: function() { return CS.Call(2, 188, 19, true); },
        set_showColliderContacts: function(v) { return CS.Call(3, 188, 19, true, v); },
        get_contactArrowScale: function() { return CS.Call(2, 188, 20, true); },
        set_contactArrowScale: function(v) { return CS.Call(3, 188, 20, true, v); },
        get_colliderAwakeColor: function() { return CS.Call(2, 188, 21, true); },
        set_colliderAwakeColor: function(v) { return CS.Call(3, 188, 21, true, v); },
        get_colliderAsleepColor: function() { return CS.Call(2, 188, 22, true); },
        set_colliderAsleepColor: function(v) { return CS.Call(3, 188, 22, true, v); },
        get_colliderContactColor: function() { return CS.Call(2, 188, 23, true); },
        set_colliderContactColor: function(v) { return CS.Call(3, 188, 23, true, v); },
        BoxCast$$Vector2$$Vector2$$Single$$Vector2$$Single$$Int32$$Single$$Single: function(a0/*Vector2*/, a1/*Vector2*/, a2/*Single*/, a3/*Vector2*/, a4/*Single*/, a5/*Int32*/, a6/*Single*/, a7/*Single*/) { 
            return CS.Call(4, 188, 0, true, a0, a1, a2, a3, a4, a5, a6, a7); //Ret: RaycastHit2D
        },
        BoxCast$$Vector2$$Vector2$$Single$$Vector2$$Single$$Int32$$Single: function(a0/*Vector2*/, a1/*Vector2*/, a2/*Single*/, a3/*Vector2*/, a4/*Single*/, a5/*Int32*/, a6/*Single*/) { 
            return CS.Call(4, 188, 1, true, a0, a1, a2, a3, a4, a5, a6); //Ret: RaycastHit2D
        },
        BoxCast$$Vector2$$Vector2$$Single$$Vector2$$Single$$Int32: function(a0/*Vector2*/, a1/*Vector2*/, a2/*Single*/, a3/*Vector2*/, a4/*Single*/, a5/*Int32*/) { 
            return CS.Call(4, 188, 2, true, a0, a1, a2, a3, a4, a5); //Ret: RaycastHit2D
        },
        BoxCast$$Vector2$$Vector2$$Single$$Vector2$$Single: function(a0/*Vector2*/, a1/*Vector2*/, a2/*Single*/, a3/*Vector2*/, a4/*Single*/) { 
            return CS.Call(4, 188, 3, true, a0, a1, a2, a3, a4); //Ret: RaycastHit2D
        },
        BoxCast$$Vector2$$Vector2$$Single$$Vector2: function(a0/*Vector2*/, a1/*Vector2*/, a2/*Single*/, a3/*Vector2*/) { 
            return CS.Call(4, 188, 4, true, a0, a1, a2, a3); //Ret: RaycastHit2D
        },
        BoxCastAll$$Vector2$$Vector2$$Single$$Vector2$$Single$$Int32$$Single$$Single: function(a0/*Vector2*/, a1/*Vector2*/, a2/*Single*/, a3/*Vector2*/, a4/*Single*/, a5/*Int32*/, a6/*Single*/, a7/*Single*/) { 
            return CS.Call(4, 188, 5, true, a0, a1, a2, a3, a4, a5, a6, a7); //Ret: RaycastHit2D[]
        },
        BoxCastAll$$Vector2$$Vector2$$Single$$Vector2$$Single$$Int32$$Single: function(a0/*Vector2*/, a1/*Vector2*/, a2/*Single*/, a3/*Vector2*/, a4/*Single*/, a5/*Int32*/, a6/*Single*/) { 
            return CS.Call(4, 188, 6, true, a0, a1, a2, a3, a4, a5, a6); //Ret: RaycastHit2D[]
        },
        BoxCastAll$$Vector2$$Vector2$$Single$$Vector2$$Single$$Int32: function(a0/*Vector2*/, a1/*Vector2*/, a2/*Single*/, a3/*Vector2*/, a4/*Single*/, a5/*Int32*/) { 
            return CS.Call(4, 188, 7, true, a0, a1, a2, a3, a4, a5); //Ret: RaycastHit2D[]
        },
        BoxCastAll$$Vector2$$Vector2$$Single$$Vector2$$Single: function(a0/*Vector2*/, a1/*Vector2*/, a2/*Single*/, a3/*Vector2*/, a4/*Single*/) { 
            return CS.Call(4, 188, 8, true, a0, a1, a2, a3, a4); //Ret: RaycastHit2D[]
        },
        BoxCastAll$$Vector2$$Vector2$$Single$$Vector2: function(a0/*Vector2*/, a1/*Vector2*/, a2/*Single*/, a3/*Vector2*/) { 
            return CS.Call(4, 188, 9, true, a0, a1, a2, a3); //Ret: RaycastHit2D[]
        },
        BoxCastNonAlloc$$Vector2$$Vector2$$Single$$Vector2$$RaycastHit2D$Array$$Single$$Int32$$Single$$Single: function(a0/*Vector2*/, a1/*Vector2*/, a2/*Single*/, a3/*Vector2*/, a4/*RaycastHit2D[]*/, a5/*Single*/, a6/*Int32*/, a7/*Single*/, a8/*Single*/) { 
            return CS.Call(4, 188, 10, true, a0, a1, a2, a3, a4, a5, a6, a7, a8); //Ret: Int32
        },
        BoxCastNonAlloc$$Vector2$$Vector2$$Single$$Vector2$$RaycastHit2D$Array$$Single$$Int32$$Single: function(a0/*Vector2*/, a1/*Vector2*/, a2/*Single*/, a3/*Vector2*/, a4/*RaycastHit2D[]*/, a5/*Single*/, a6/*Int32*/, a7/*Single*/) { 
            return CS.Call(4, 188, 11, true, a0, a1, a2, a3, a4, a5, a6, a7); //Ret: Int32
        },
        BoxCastNonAlloc$$Vector2$$Vector2$$Single$$Vector2$$RaycastHit2D$Array$$Single$$Int32: function(a0/*Vector2*/, a1/*Vector2*/, a2/*Single*/, a3/*Vector2*/, a4/*RaycastHit2D[]*/, a5/*Single*/, a6/*Int32*/) { 
            return CS.Call(4, 188, 12, true, a0, a1, a2, a3, a4, a5, a6); //Ret: Int32
        },
        BoxCastNonAlloc$$Vector2$$Vector2$$Single$$Vector2$$RaycastHit2D$Array$$Single: function(a0/*Vector2*/, a1/*Vector2*/, a2/*Single*/, a3/*Vector2*/, a4/*RaycastHit2D[]*/, a5/*Single*/) { 
            return CS.Call(4, 188, 13, true, a0, a1, a2, a3, a4, a5); //Ret: Int32
        },
        BoxCastNonAlloc$$Vector2$$Vector2$$Single$$Vector2$$RaycastHit2D$Array: function(a0/*Vector2*/, a1/*Vector2*/, a2/*Single*/, a3/*Vector2*/, a4/*RaycastHit2D[]*/) { 
            return CS.Call(4, 188, 14, true, a0, a1, a2, a3, a4); //Ret: Int32
        },
        CircleCast$$Vector2$$Single$$Vector2$$Single$$Int32$$Single$$Single: function(a0/*Vector2*/, a1/*Single*/, a2/*Vector2*/, a3/*Single*/, a4/*Int32*/, a5/*Single*/, a6/*Single*/) { 
            return CS.Call(4, 188, 15, true, a0, a1, a2, a3, a4, a5, a6); //Ret: RaycastHit2D
        },
        CircleCast$$Vector2$$Single$$Vector2$$Single$$Int32$$Single: function(a0/*Vector2*/, a1/*Single*/, a2/*Vector2*/, a3/*Single*/, a4/*Int32*/, a5/*Single*/) { 
            return CS.Call(4, 188, 16, true, a0, a1, a2, a3, a4, a5); //Ret: RaycastHit2D
        },
        CircleCast$$Vector2$$Single$$Vector2$$Single$$Int32: function(a0/*Vector2*/, a1/*Single*/, a2/*Vector2*/, a3/*Single*/, a4/*Int32*/) { 
            return CS.Call(4, 188, 17, true, a0, a1, a2, a3, a4); //Ret: RaycastHit2D
        },
        CircleCast$$Vector2$$Single$$Vector2$$Single: function(a0/*Vector2*/, a1/*Single*/, a2/*Vector2*/, a3/*Single*/) { 
            return CS.Call(4, 188, 18, true, a0, a1, a2, a3); //Ret: RaycastHit2D
        },
        CircleCast$$Vector2$$Single$$Vector2: function(a0/*Vector2*/, a1/*Single*/, a2/*Vector2*/) { 
            return CS.Call(4, 188, 19, true, a0, a1, a2); //Ret: RaycastHit2D
        },
        CircleCastAll$$Vector2$$Single$$Vector2$$Single$$Int32$$Single$$Single: function(a0/*Vector2*/, a1/*Single*/, a2/*Vector2*/, a3/*Single*/, a4/*Int32*/, a5/*Single*/, a6/*Single*/) { 
            return CS.Call(4, 188, 20, true, a0, a1, a2, a3, a4, a5, a6); //Ret: RaycastHit2D[]
        },
        CircleCastAll$$Vector2$$Single$$Vector2$$Single$$Int32$$Single: function(a0/*Vector2*/, a1/*Single*/, a2/*Vector2*/, a3/*Single*/, a4/*Int32*/, a5/*Single*/) { 
            return CS.Call(4, 188, 21, true, a0, a1, a2, a3, a4, a5); //Ret: RaycastHit2D[]
        },
        CircleCastAll$$Vector2$$Single$$Vector2$$Single$$Int32: function(a0/*Vector2*/, a1/*Single*/, a2/*Vector2*/, a3/*Single*/, a4/*Int32*/) { 
            return CS.Call(4, 188, 22, true, a0, a1, a2, a3, a4); //Ret: RaycastHit2D[]
        },
        CircleCastAll$$Vector2$$Single$$Vector2$$Single: function(a0/*Vector2*/, a1/*Single*/, a2/*Vector2*/, a3/*Single*/) { 
            return CS.Call(4, 188, 23, true, a0, a1, a2, a3); //Ret: RaycastHit2D[]
        },
        CircleCastAll$$Vector2$$Single$$Vector2: function(a0/*Vector2*/, a1/*Single*/, a2/*Vector2*/) { 
            return CS.Call(4, 188, 24, true, a0, a1, a2); //Ret: RaycastHit2D[]
        },
        CircleCastNonAlloc$$Vector2$$Single$$Vector2$$RaycastHit2D$Array$$Single$$Int32$$Single$$Single: function(a0/*Vector2*/, a1/*Single*/, a2/*Vector2*/, a3/*RaycastHit2D[]*/, a4/*Single*/, a5/*Int32*/, a6/*Single*/, a7/*Single*/) { 
            return CS.Call(4, 188, 25, true, a0, a1, a2, a3, a4, a5, a6, a7); //Ret: Int32
        },
        CircleCastNonAlloc$$Vector2$$Single$$Vector2$$RaycastHit2D$Array$$Single$$Int32$$Single: function(a0/*Vector2*/, a1/*Single*/, a2/*Vector2*/, a3/*RaycastHit2D[]*/, a4/*Single*/, a5/*Int32*/, a6/*Single*/) { 
            return CS.Call(4, 188, 26, true, a0, a1, a2, a3, a4, a5, a6); //Ret: Int32
        },
        CircleCastNonAlloc$$Vector2$$Single$$Vector2$$RaycastHit2D$Array$$Single$$Int32: function(a0/*Vector2*/, a1/*Single*/, a2/*Vector2*/, a3/*RaycastHit2D[]*/, a4/*Single*/, a5/*Int32*/) { 
            return CS.Call(4, 188, 27, true, a0, a1, a2, a3, a4, a5); //Ret: Int32
        },
        CircleCastNonAlloc$$Vector2$$Single$$Vector2$$RaycastHit2D$Array$$Single: function(a0/*Vector2*/, a1/*Single*/, a2/*Vector2*/, a3/*RaycastHit2D[]*/, a4/*Single*/) { 
            return CS.Call(4, 188, 28, true, a0, a1, a2, a3, a4); //Ret: Int32
        },
        CircleCastNonAlloc$$Vector2$$Single$$Vector2$$RaycastHit2D$Array: function(a0/*Vector2*/, a1/*Single*/, a2/*Vector2*/, a3/*RaycastHit2D[]*/) { 
            return CS.Call(4, 188, 29, true, a0, a1, a2, a3); //Ret: Int32
        },
        GetIgnoreCollision: function(a0/*Collider2D*/, a1/*Collider2D*/) { 
            return CS.Call(4, 188, 30, true, a0, a1); //Ret: Boolean
        },
        GetIgnoreLayerCollision: function(a0/*Int32*/, a1/*Int32*/) { 
            return CS.Call(4, 188, 31, true, a0, a1); //Ret: Boolean
        },
        GetLayerCollisionMask: function(a0/*Int32*/) { 
            return CS.Call(4, 188, 32, true, a0); //Ret: Int32
        },
        GetRayIntersection$$Ray$$Single$$Int32: function(a0/*Ray*/, a1/*Single*/, a2/*Int32*/) { 
            return CS.Call(4, 188, 33, true, a0, a1, a2); //Ret: RaycastHit2D
        },
        GetRayIntersection$$Ray$$Single: function(a0/*Ray*/, a1/*Single*/) { 
            return CS.Call(4, 188, 34, true, a0, a1); //Ret: RaycastHit2D
        },
        GetRayIntersection$$Ray: function(a0/*Ray*/) { 
            return CS.Call(4, 188, 35, true, a0); //Ret: RaycastHit2D
        },
        GetRayIntersectionAll$$Ray$$Single$$Int32: function(a0/*Ray*/, a1/*Single*/, a2/*Int32*/) { 
            return CS.Call(4, 188, 36, true, a0, a1, a2); //Ret: RaycastHit2D[]
        },
        GetRayIntersectionAll$$Ray$$Single: function(a0/*Ray*/, a1/*Single*/) { 
            return CS.Call(4, 188, 37, true, a0, a1); //Ret: RaycastHit2D[]
        },
        GetRayIntersectionAll$$Ray: function(a0/*Ray*/) { 
            return CS.Call(4, 188, 38, true, a0); //Ret: RaycastHit2D[]
        },
        GetRayIntersectionNonAlloc$$Ray$$RaycastHit2D$Array$$Single$$Int32: function(a0/*Ray*/, a1/*RaycastHit2D[]*/, a2/*Single*/, a3/*Int32*/) { 
            return CS.Call(4, 188, 39, true, a0, a1, a2, a3); //Ret: Int32
        },
        GetRayIntersectionNonAlloc$$Ray$$RaycastHit2D$Array$$Single: function(a0/*Ray*/, a1/*RaycastHit2D[]*/, a2/*Single*/) { 
            return CS.Call(4, 188, 40, true, a0, a1, a2); //Ret: Int32
        },
        GetRayIntersectionNonAlloc$$Ray$$RaycastHit2D$Array: function(a0/*Ray*/, a1/*RaycastHit2D[]*/) { 
            return CS.Call(4, 188, 41, true, a0, a1); //Ret: Int32
        },
        IgnoreCollision$$Collider2D$$Collider2D$$Boolean: function(a0/*Collider2D*/, a1/*Collider2D*/, a2/*Boolean*/) { 
            return CS.Call(4, 188, 42, true, a0, a1, a2); //Ret: Void
        },
        IgnoreCollision$$Collider2D$$Collider2D: function(a0/*Collider2D*/, a1/*Collider2D*/) { 
            return CS.Call(4, 188, 43, true, a0, a1); //Ret: Void
        },
        IgnoreLayerCollision$$Int32$$Int32$$Boolean: function(a0/*Int32*/, a1/*Int32*/, a2/*Boolean*/) { 
            return CS.Call(4, 188, 44, true, a0, a1, a2); //Ret: Void
        },
        IgnoreLayerCollision$$Int32$$Int32: function(a0/*Int32*/, a1/*Int32*/) { 
            return CS.Call(4, 188, 45, true, a0, a1); //Ret: Void
        },
        IsTouching: function(a0/*Collider2D*/, a1/*Collider2D*/) { 
            return CS.Call(4, 188, 46, true, a0, a1); //Ret: Boolean
        },
        IsTouchingLayers$$Collider2D$$Int32: function(a0/*Collider2D*/, a1/*Int32*/) { 
            return CS.Call(4, 188, 47, true, a0, a1); //Ret: Boolean
        },
        IsTouchingLayers$$Collider2D: function(a0/*Collider2D*/) { 
            return CS.Call(4, 188, 48, true, a0); //Ret: Boolean
        },
        Linecast$$Vector2$$Vector2$$Int32$$Single$$Single: function(a0/*Vector2*/, a1/*Vector2*/, a2/*Int32*/, a3/*Single*/, a4/*Single*/) { 
            return CS.Call(4, 188, 49, true, a0, a1, a2, a3, a4); //Ret: RaycastHit2D
        },
        Linecast$$Vector2$$Vector2$$Int32$$Single: function(a0/*Vector2*/, a1/*Vector2*/, a2/*Int32*/, a3/*Single*/) { 
            return CS.Call(4, 188, 50, true, a0, a1, a2, a3); //Ret: RaycastHit2D
        },
        Linecast$$Vector2$$Vector2$$Int32: function(a0/*Vector2*/, a1/*Vector2*/, a2/*Int32*/) { 
            return CS.Call(4, 188, 51, true, a0, a1, a2); //Ret: RaycastHit2D
        },
        Linecast$$Vector2$$Vector2: function(a0/*Vector2*/, a1/*Vector2*/) { 
            return CS.Call(4, 188, 52, true, a0, a1); //Ret: RaycastHit2D
        },
        LinecastAll$$Vector2$$Vector2$$Int32$$Single$$Single: function(a0/*Vector2*/, a1/*Vector2*/, a2/*Int32*/, a3/*Single*/, a4/*Single*/) { 
            return CS.Call(4, 188, 53, true, a0, a1, a2, a3, a4); //Ret: RaycastHit2D[]
        },
        LinecastAll$$Vector2$$Vector2$$Int32$$Single: function(a0/*Vector2*/, a1/*Vector2*/, a2/*Int32*/, a3/*Single*/) { 
            return CS.Call(4, 188, 54, true, a0, a1, a2, a3); //Ret: RaycastHit2D[]
        },
        LinecastAll$$Vector2$$Vector2$$Int32: function(a0/*Vector2*/, a1/*Vector2*/, a2/*Int32*/) { 
            return CS.Call(4, 188, 55, true, a0, a1, a2); //Ret: RaycastHit2D[]
        },
        LinecastAll$$Vector2$$Vector2: function(a0/*Vector2*/, a1/*Vector2*/) { 
            return CS.Call(4, 188, 56, true, a0, a1); //Ret: RaycastHit2D[]
        },
        LinecastNonAlloc$$Vector2$$Vector2$$RaycastHit2D$Array$$Int32$$Single$$Single: function(a0/*Vector2*/, a1/*Vector2*/, a2/*RaycastHit2D[]*/, a3/*Int32*/, a4/*Single*/, a5/*Single*/) { 
            return CS.Call(4, 188, 57, true, a0, a1, a2, a3, a4, a5); //Ret: Int32
        },
        LinecastNonAlloc$$Vector2$$Vector2$$RaycastHit2D$Array$$Int32$$Single: function(a0/*Vector2*/, a1/*Vector2*/, a2/*RaycastHit2D[]*/, a3/*Int32*/, a4/*Single*/) { 
            return CS.Call(4, 188, 58, true, a0, a1, a2, a3, a4); //Ret: Int32
        },
        LinecastNonAlloc$$Vector2$$Vector2$$RaycastHit2D$Array$$Int32: function(a0/*Vector2*/, a1/*Vector2*/, a2/*RaycastHit2D[]*/, a3/*Int32*/) { 
            return CS.Call(4, 188, 59, true, a0, a1, a2, a3); //Ret: Int32
        },
        LinecastNonAlloc$$Vector2$$Vector2$$RaycastHit2D$Array: function(a0/*Vector2*/, a1/*Vector2*/, a2/*RaycastHit2D[]*/) { 
            return CS.Call(4, 188, 60, true, a0, a1, a2); //Ret: Int32
        },
        OverlapArea$$Vector2$$Vector2$$Int32$$Single$$Single: function(a0/*Vector2*/, a1/*Vector2*/, a2/*Int32*/, a3/*Single*/, a4/*Single*/) { 
            return CS.Call(4, 188, 61, true, a0, a1, a2, a3, a4); //Ret: Collider2D
        },
        OverlapArea$$Vector2$$Vector2$$Int32$$Single: function(a0/*Vector2*/, a1/*Vector2*/, a2/*Int32*/, a3/*Single*/) { 
            return CS.Call(4, 188, 62, true, a0, a1, a2, a3); //Ret: Collider2D
        },
        OverlapArea$$Vector2$$Vector2$$Int32: function(a0/*Vector2*/, a1/*Vector2*/, a2/*Int32*/) { 
            return CS.Call(4, 188, 63, true, a0, a1, a2); //Ret: Collider2D
        },
        OverlapArea$$Vector2$$Vector2: function(a0/*Vector2*/, a1/*Vector2*/) { 
            return CS.Call(4, 188, 64, true, a0, a1); //Ret: Collider2D
        },
        OverlapAreaAll$$Vector2$$Vector2$$Int32$$Single$$Single: function(a0/*Vector2*/, a1/*Vector2*/, a2/*Int32*/, a3/*Single*/, a4/*Single*/) { 
            return CS.Call(4, 188, 65, true, a0, a1, a2, a3, a4); //Ret: Collider2D[]
        },
        OverlapAreaAll$$Vector2$$Vector2$$Int32$$Single: function(a0/*Vector2*/, a1/*Vector2*/, a2/*Int32*/, a3/*Single*/) { 
            return CS.Call(4, 188, 66, true, a0, a1, a2, a3); //Ret: Collider2D[]
        },
        OverlapAreaAll$$Vector2$$Vector2$$Int32: function(a0/*Vector2*/, a1/*Vector2*/, a2/*Int32*/) { 
            return CS.Call(4, 188, 67, true, a0, a1, a2); //Ret: Collider2D[]
        },
        OverlapAreaAll$$Vector2$$Vector2: function(a0/*Vector2*/, a1/*Vector2*/) { 
            return CS.Call(4, 188, 68, true, a0, a1); //Ret: Collider2D[]
        },
        OverlapAreaNonAlloc$$Vector2$$Vector2$$Collider2D$Array$$Int32$$Single$$Single: function(a0/*Vector2*/, a1/*Vector2*/, a2/*Collider2D[]*/, a3/*Int32*/, a4/*Single*/, a5/*Single*/) { 
            return CS.Call(4, 188, 69, true, a0, a1, a2, a3, a4, a5); //Ret: Int32
        },
        OverlapAreaNonAlloc$$Vector2$$Vector2$$Collider2D$Array$$Int32$$Single: function(a0/*Vector2*/, a1/*Vector2*/, a2/*Collider2D[]*/, a3/*Int32*/, a4/*Single*/) { 
            return CS.Call(4, 188, 70, true, a0, a1, a2, a3, a4); //Ret: Int32
        },
        OverlapAreaNonAlloc$$Vector2$$Vector2$$Collider2D$Array$$Int32: function(a0/*Vector2*/, a1/*Vector2*/, a2/*Collider2D[]*/, a3/*Int32*/) { 
            return CS.Call(4, 188, 71, true, a0, a1, a2, a3); //Ret: Int32
        },
        OverlapAreaNonAlloc$$Vector2$$Vector2$$Collider2D$Array: function(a0/*Vector2*/, a1/*Vector2*/, a2/*Collider2D[]*/) { 
            return CS.Call(4, 188, 72, true, a0, a1, a2); //Ret: Int32
        },
        OverlapBox$$Vector2$$Vector2$$Single$$Int32$$Single$$Single: function(a0/*Vector2*/, a1/*Vector2*/, a2/*Single*/, a3/*Int32*/, a4/*Single*/, a5/*Single*/) { 
            return CS.Call(4, 188, 73, true, a0, a1, a2, a3, a4, a5); //Ret: Collider2D
        },
        OverlapBox$$Vector2$$Vector2$$Single$$Int32$$Single: function(a0/*Vector2*/, a1/*Vector2*/, a2/*Single*/, a3/*Int32*/, a4/*Single*/) { 
            return CS.Call(4, 188, 74, true, a0, a1, a2, a3, a4); //Ret: Collider2D
        },
        OverlapBox$$Vector2$$Vector2$$Single$$Int32: function(a0/*Vector2*/, a1/*Vector2*/, a2/*Single*/, a3/*Int32*/) { 
            return CS.Call(4, 188, 75, true, a0, a1, a2, a3); //Ret: Collider2D
        },
        OverlapBox$$Vector2$$Vector2$$Single: function(a0/*Vector2*/, a1/*Vector2*/, a2/*Single*/) { 
            return CS.Call(4, 188, 76, true, a0, a1, a2); //Ret: Collider2D
        },
        OverlapBoxAll$$Vector2$$Vector2$$Single$$Int32$$Single$$Single: function(a0/*Vector2*/, a1/*Vector2*/, a2/*Single*/, a3/*Int32*/, a4/*Single*/, a5/*Single*/) { 
            return CS.Call(4, 188, 77, true, a0, a1, a2, a3, a4, a5); //Ret: Collider2D[]
        },
        OverlapBoxAll$$Vector2$$Vector2$$Single$$Int32$$Single: function(a0/*Vector2*/, a1/*Vector2*/, a2/*Single*/, a3/*Int32*/, a4/*Single*/) { 
            return CS.Call(4, 188, 78, true, a0, a1, a2, a3, a4); //Ret: Collider2D[]
        },
        OverlapBoxAll$$Vector2$$Vector2$$Single$$Int32: function(a0/*Vector2*/, a1/*Vector2*/, a2/*Single*/, a3/*Int32*/) { 
            return CS.Call(4, 188, 79, true, a0, a1, a2, a3); //Ret: Collider2D[]
        },
        OverlapBoxAll$$Vector2$$Vector2$$Single: function(a0/*Vector2*/, a1/*Vector2*/, a2/*Single*/) { 
            return CS.Call(4, 188, 80, true, a0, a1, a2); //Ret: Collider2D[]
        },
        OverlapBoxNonAlloc$$Vector2$$Vector2$$Single$$Collider2D$Array$$Int32$$Single$$Single: function(a0/*Vector2*/, a1/*Vector2*/, a2/*Single*/, a3/*Collider2D[]*/, a4/*Int32*/, a5/*Single*/, a6/*Single*/) { 
            return CS.Call(4, 188, 81, true, a0, a1, a2, a3, a4, a5, a6); //Ret: Int32
        },
        OverlapBoxNonAlloc$$Vector2$$Vector2$$Single$$Collider2D$Array$$Int32$$Single: function(a0/*Vector2*/, a1/*Vector2*/, a2/*Single*/, a3/*Collider2D[]*/, a4/*Int32*/, a5/*Single*/) { 
            return CS.Call(4, 188, 82, true, a0, a1, a2, a3, a4, a5); //Ret: Int32
        },
        OverlapBoxNonAlloc$$Vector2$$Vector2$$Single$$Collider2D$Array$$Int32: function(a0/*Vector2*/, a1/*Vector2*/, a2/*Single*/, a3/*Collider2D[]*/, a4/*Int32*/) { 
            return CS.Call(4, 188, 83, true, a0, a1, a2, a3, a4); //Ret: Int32
        },
        OverlapBoxNonAlloc$$Vector2$$Vector2$$Single$$Collider2D$Array: function(a0/*Vector2*/, a1/*Vector2*/, a2/*Single*/, a3/*Collider2D[]*/) { 
            return CS.Call(4, 188, 84, true, a0, a1, a2, a3); //Ret: Int32
        },
        OverlapCircle$$Vector2$$Single$$Int32$$Single$$Single: function(a0/*Vector2*/, a1/*Single*/, a2/*Int32*/, a3/*Single*/, a4/*Single*/) { 
            return CS.Call(4, 188, 85, true, a0, a1, a2, a3, a4); //Ret: Collider2D
        },
        OverlapCircle$$Vector2$$Single$$Int32$$Single: function(a0/*Vector2*/, a1/*Single*/, a2/*Int32*/, a3/*Single*/) { 
            return CS.Call(4, 188, 86, true, a0, a1, a2, a3); //Ret: Collider2D
        },
        OverlapCircle$$Vector2$$Single$$Int32: function(a0/*Vector2*/, a1/*Single*/, a2/*Int32*/) { 
            return CS.Call(4, 188, 87, true, a0, a1, a2); //Ret: Collider2D
        },
        OverlapCircle$$Vector2$$Single: function(a0/*Vector2*/, a1/*Single*/) { 
            return CS.Call(4, 188, 88, true, a0, a1); //Ret: Collider2D
        },
        OverlapCircleAll$$Vector2$$Single$$Int32$$Single$$Single: function(a0/*Vector2*/, a1/*Single*/, a2/*Int32*/, a3/*Single*/, a4/*Single*/) { 
            return CS.Call(4, 188, 89, true, a0, a1, a2, a3, a4); //Ret: Collider2D[]
        },
        OverlapCircleAll$$Vector2$$Single$$Int32$$Single: function(a0/*Vector2*/, a1/*Single*/, a2/*Int32*/, a3/*Single*/) { 
            return CS.Call(4, 188, 90, true, a0, a1, a2, a3); //Ret: Collider2D[]
        },
        OverlapCircleAll$$Vector2$$Single$$Int32: function(a0/*Vector2*/, a1/*Single*/, a2/*Int32*/) { 
            return CS.Call(4, 188, 91, true, a0, a1, a2); //Ret: Collider2D[]
        },
        OverlapCircleAll$$Vector2$$Single: function(a0/*Vector2*/, a1/*Single*/) { 
            return CS.Call(4, 188, 92, true, a0, a1); //Ret: Collider2D[]
        },
        OverlapCircleNonAlloc$$Vector2$$Single$$Collider2D$Array$$Int32$$Single$$Single: function(a0/*Vector2*/, a1/*Single*/, a2/*Collider2D[]*/, a3/*Int32*/, a4/*Single*/, a5/*Single*/) { 
            return CS.Call(4, 188, 93, true, a0, a1, a2, a3, a4, a5); //Ret: Int32
        },
        OverlapCircleNonAlloc$$Vector2$$Single$$Collider2D$Array$$Int32$$Single: function(a0/*Vector2*/, a1/*Single*/, a2/*Collider2D[]*/, a3/*Int32*/, a4/*Single*/) { 
            return CS.Call(4, 188, 94, true, a0, a1, a2, a3, a4); //Ret: Int32
        },
        OverlapCircleNonAlloc$$Vector2$$Single$$Collider2D$Array$$Int32: function(a0/*Vector2*/, a1/*Single*/, a2/*Collider2D[]*/, a3/*Int32*/) { 
            return CS.Call(4, 188, 95, true, a0, a1, a2, a3); //Ret: Int32
        },
        OverlapCircleNonAlloc$$Vector2$$Single$$Collider2D$Array: function(a0/*Vector2*/, a1/*Single*/, a2/*Collider2D[]*/) { 
            return CS.Call(4, 188, 96, true, a0, a1, a2); //Ret: Int32
        },
        OverlapPoint$$Vector2$$Int32$$Single$$Single: function(a0/*Vector2*/, a1/*Int32*/, a2/*Single*/, a3/*Single*/) { 
            return CS.Call(4, 188, 97, true, a0, a1, a2, a3); //Ret: Collider2D
        },
        OverlapPoint$$Vector2$$Int32$$Single: function(a0/*Vector2*/, a1/*Int32*/, a2/*Single*/) { 
            return CS.Call(4, 188, 98, true, a0, a1, a2); //Ret: Collider2D
        },
        OverlapPoint$$Vector2$$Int32: function(a0/*Vector2*/, a1/*Int32*/) { 
            return CS.Call(4, 188, 99, true, a0, a1); //Ret: Collider2D
        },
        OverlapPoint$$Vector2: function(a0/*Vector2*/) { 
            return CS.Call(4, 188, 100, true, a0); //Ret: Collider2D
        },
        OverlapPointAll$$Vector2$$Int32$$Single$$Single: function(a0/*Vector2*/, a1/*Int32*/, a2/*Single*/, a3/*Single*/) { 
            return CS.Call(4, 188, 101, true, a0, a1, a2, a3); //Ret: Collider2D[]
        },
        OverlapPointAll$$Vector2$$Int32$$Single: function(a0/*Vector2*/, a1/*Int32*/, a2/*Single*/) { 
            return CS.Call(4, 188, 102, true, a0, a1, a2); //Ret: Collider2D[]
        },
        OverlapPointAll$$Vector2$$Int32: function(a0/*Vector2*/, a1/*Int32*/) { 
            return CS.Call(4, 188, 103, true, a0, a1); //Ret: Collider2D[]
        },
        OverlapPointAll$$Vector2: function(a0/*Vector2*/) { 
            return CS.Call(4, 188, 104, true, a0); //Ret: Collider2D[]
        },
        OverlapPointNonAlloc$$Vector2$$Collider2D$Array$$Int32$$Single$$Single: function(a0/*Vector2*/, a1/*Collider2D[]*/, a2/*Int32*/, a3/*Single*/, a4/*Single*/) { 
            return CS.Call(4, 188, 105, true, a0, a1, a2, a3, a4); //Ret: Int32
        },
        OverlapPointNonAlloc$$Vector2$$Collider2D$Array$$Int32$$Single: function(a0/*Vector2*/, a1/*Collider2D[]*/, a2/*Int32*/, a3/*Single*/) { 
            return CS.Call(4, 188, 106, true, a0, a1, a2, a3); //Ret: Int32
        },
        OverlapPointNonAlloc$$Vector2$$Collider2D$Array$$Int32: function(a0/*Vector2*/, a1/*Collider2D[]*/, a2/*Int32*/) { 
            return CS.Call(4, 188, 107, true, a0, a1, a2); //Ret: Int32
        },
        OverlapPointNonAlloc$$Vector2$$Collider2D$Array: function(a0/*Vector2*/, a1/*Collider2D[]*/) { 
            return CS.Call(4, 188, 108, true, a0, a1); //Ret: Int32
        },
        Raycast$$Vector2$$Vector2$$Single$$Int32$$Single$$Single: function(a0/*Vector2*/, a1/*Vector2*/, a2/*Single*/, a3/*Int32*/, a4/*Single*/, a5/*Single*/) { 
            return CS.Call(4, 188, 109, true, a0, a1, a2, a3, a4, a5); //Ret: RaycastHit2D
        },
        Raycast$$Vector2$$Vector2$$Single$$Int32$$Single: function(a0/*Vector2*/, a1/*Vector2*/, a2/*Single*/, a3/*Int32*/, a4/*Single*/) { 
            return CS.Call(4, 188, 110, true, a0, a1, a2, a3, a4); //Ret: RaycastHit2D
        },
        Raycast$$Vector2$$Vector2$$Single$$Int32: function(a0/*Vector2*/, a1/*Vector2*/, a2/*Single*/, a3/*Int32*/) { 
            return CS.Call(4, 188, 111, true, a0, a1, a2, a3); //Ret: RaycastHit2D
        },
        Raycast$$Vector2$$Vector2$$Single: function(a0/*Vector2*/, a1/*Vector2*/, a2/*Single*/) { 
            return CS.Call(4, 188, 112, true, a0, a1, a2); //Ret: RaycastHit2D
        },
        Raycast$$Vector2$$Vector2: function(a0/*Vector2*/, a1/*Vector2*/) { 
            return CS.Call(4, 188, 113, true, a0, a1); //Ret: RaycastHit2D
        },
        RaycastAll$$Vector2$$Vector2$$Single$$Int32$$Single$$Single: function(a0/*Vector2*/, a1/*Vector2*/, a2/*Single*/, a3/*Int32*/, a4/*Single*/, a5/*Single*/) { 
            return CS.Call(4, 188, 114, true, a0, a1, a2, a3, a4, a5); //Ret: RaycastHit2D[]
        },
        RaycastAll$$Vector2$$Vector2$$Single$$Int32$$Single: function(a0/*Vector2*/, a1/*Vector2*/, a2/*Single*/, a3/*Int32*/, a4/*Single*/) { 
            return CS.Call(4, 188, 115, true, a0, a1, a2, a3, a4); //Ret: RaycastHit2D[]
        },
        RaycastAll$$Vector2$$Vector2$$Single$$Int32: function(a0/*Vector2*/, a1/*Vector2*/, a2/*Single*/, a3/*Int32*/) { 
            return CS.Call(4, 188, 116, true, a0, a1, a2, a3); //Ret: RaycastHit2D[]
        },
        RaycastAll$$Vector2$$Vector2$$Single: function(a0/*Vector2*/, a1/*Vector2*/, a2/*Single*/) { 
            return CS.Call(4, 188, 117, true, a0, a1, a2); //Ret: RaycastHit2D[]
        },
        RaycastAll$$Vector2$$Vector2: function(a0/*Vector2*/, a1/*Vector2*/) { 
            return CS.Call(4, 188, 118, true, a0, a1); //Ret: RaycastHit2D[]
        },
        RaycastNonAlloc$$Vector2$$Vector2$$RaycastHit2D$Array$$Single$$Int32$$Single$$Single: function(a0/*Vector2*/, a1/*Vector2*/, a2/*RaycastHit2D[]*/, a3/*Single*/, a4/*Int32*/, a5/*Single*/, a6/*Single*/) { 
            return CS.Call(4, 188, 119, true, a0, a1, a2, a3, a4, a5, a6); //Ret: Int32
        },
        RaycastNonAlloc$$Vector2$$Vector2$$RaycastHit2D$Array$$Single$$Int32$$Single: function(a0/*Vector2*/, a1/*Vector2*/, a2/*RaycastHit2D[]*/, a3/*Single*/, a4/*Int32*/, a5/*Single*/) { 
            return CS.Call(4, 188, 120, true, a0, a1, a2, a3, a4, a5); //Ret: Int32
        },
        RaycastNonAlloc$$Vector2$$Vector2$$RaycastHit2D$Array$$Single$$Int32: function(a0/*Vector2*/, a1/*Vector2*/, a2/*RaycastHit2D[]*/, a3/*Single*/, a4/*Int32*/) { 
            return CS.Call(4, 188, 121, true, a0, a1, a2, a3, a4); //Ret: Int32
        },
        RaycastNonAlloc$$Vector2$$Vector2$$RaycastHit2D$Array$$Single: function(a0/*Vector2*/, a1/*Vector2*/, a2/*RaycastHit2D[]*/, a3/*Single*/) { 
            return CS.Call(4, 188, 122, true, a0, a1, a2, a3); //Ret: Int32
        },
        RaycastNonAlloc$$Vector2$$Vector2$$RaycastHit2D$Array: function(a0/*Vector2*/, a1/*Vector2*/, a2/*RaycastHit2D[]*/) { 
            return CS.Call(4, 188, 123, true, a0, a1, a2); //Ret: Int32
        },
        SetLayerCollisionMask: function(a0/*Int32*/, a1/*Int32*/) { 
            return CS.Call(4, 188, 124, true, a0, a1); //Ret: Void
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 188, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Physics2D);

// UnityEngine.RaycastHit2D
var UnityEngine$RaycastHit2D = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.RaycastHit2D",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    staticDefinition: {
        op_Implicit: function(a0/*RaycastHit2D*/) { 
            return CS.Call(4, 189, 1, true, a0); //Ret: Boolean
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 189, 0, true, this); },
        get_centroid: function() { return CS.Call(2, 189, 0, false, this); },
        set_centroid: function(v) { return CS.Call(3, 189, 0, false, this, v); },
        get_point: function() { return CS.Call(2, 189, 1, false, this); },
        set_point: function(v) { return CS.Call(3, 189, 1, false, this, v); },
        get_normal: function() { return CS.Call(2, 189, 2, false, this); },
        set_normal: function(v) { return CS.Call(3, 189, 2, false, this, v); },
        get_distance: function() { return CS.Call(2, 189, 3, false, this); },
        set_distance: function(v) { return CS.Call(3, 189, 3, false, this, v); },
        get_fraction: function() { return CS.Call(2, 189, 4, false, this); },
        set_fraction: function(v) { return CS.Call(3, 189, 4, false, this, v); },
        get_collider: function() { return CS.Call(2, 189, 5, false, this); },
        set_collider: function(v) { return CS.Call(3, 189, 5, false, this, v); },
        get_rigidbody: function() { return CS.Call(2, 189, 6, false, this); },
        set_rigidbody: function(v) { return CS.Call(3, 189, 6, false, this, v); },
        get_transform: function() { return CS.Call(2, 189, 7, false, this); },
        set_transform: function(v) { return CS.Call(3, 189, 7, false, this, v); },
        CompareTo: function(a0/*RaycastHit2D*/) { 
            return CS.Call(4, 189, 0, false, this, a0); //Ret: Int32
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$RaycastHit2D);

// UnityEngine.Rigidbody2D
var UnityEngine$Rigidbody2D = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Rigidbody2D",
    Kind: "Class",
    baseTypeName: "UnityEngine.Component",
    definition: {
        ctor: function() { CS.Call(5, 190, 0, true, this); },
        get_position: function() { return CS.Call(2, 190, 0, false, this); },
        set_position: function(v) { return CS.Call(3, 190, 0, false, this, v); },
        get_rotation: function() { return CS.Call(2, 190, 1, false, this); },
        set_rotation: function(v) { return CS.Call(3, 190, 1, false, this, v); },
        get_velocity: function() { return CS.Call(2, 190, 2, false, this); },
        set_velocity: function(v) { return CS.Call(3, 190, 2, false, this, v); },
        get_angularVelocity: function() { return CS.Call(2, 190, 3, false, this); },
        set_angularVelocity: function(v) { return CS.Call(3, 190, 3, false, this, v); },
        get_useAutoMass: function() { return CS.Call(2, 190, 4, false, this); },
        set_useAutoMass: function(v) { return CS.Call(3, 190, 4, false, this, v); },
        get_mass: function() { return CS.Call(2, 190, 5, false, this); },
        set_mass: function(v) { return CS.Call(3, 190, 5, false, this, v); },
        get_centerOfMass: function() { return CS.Call(2, 190, 6, false, this); },
        set_centerOfMass: function(v) { return CS.Call(3, 190, 6, false, this, v); },
        get_worldCenterOfMass: function() { return CS.Call(2, 190, 7, false, this); },
        set_worldCenterOfMass: function(v) { return CS.Call(3, 190, 7, false, this, v); },
        get_inertia: function() { return CS.Call(2, 190, 8, false, this); },
        set_inertia: function(v) { return CS.Call(3, 190, 8, false, this, v); },
        get_drag: function() { return CS.Call(2, 190, 9, false, this); },
        set_drag: function(v) { return CS.Call(3, 190, 9, false, this, v); },
        get_angularDrag: function() { return CS.Call(2, 190, 10, false, this); },
        set_angularDrag: function(v) { return CS.Call(3, 190, 10, false, this, v); },
        get_gravityScale: function() { return CS.Call(2, 190, 11, false, this); },
        set_gravityScale: function(v) { return CS.Call(3, 190, 11, false, this, v); },
        get_isKinematic: function() { return CS.Call(2, 190, 12, false, this); },
        set_isKinematic: function(v) { return CS.Call(3, 190, 12, false, this, v); },
        get_freezeRotation: function() { return CS.Call(2, 190, 13, false, this); },
        set_freezeRotation: function(v) { return CS.Call(3, 190, 13, false, this, v); },
        get_constraints: function() { return CS.Call(2, 190, 14, false, this); },
        set_constraints: function(v) { return CS.Call(3, 190, 14, false, this, v); },
        get_simulated: function() { return CS.Call(2, 190, 15, false, this); },
        set_simulated: function(v) { return CS.Call(3, 190, 15, false, this, v); },
        get_interpolation: function() { return CS.Call(2, 190, 16, false, this); },
        set_interpolation: function(v) { return CS.Call(3, 190, 16, false, this, v); },
        get_sleepMode: function() { return CS.Call(2, 190, 17, false, this); },
        set_sleepMode: function(v) { return CS.Call(3, 190, 17, false, this, v); },
        get_collisionDetectionMode: function() { return CS.Call(2, 190, 18, false, this); },
        set_collisionDetectionMode: function(v) { return CS.Call(3, 190, 18, false, this, v); },
        AddForce$$Vector2$$ForceMode2D: function(a0/*Vector2*/, a1/*ForceMode2D*/) { 
            return CS.Call(4, 190, 0, false, this, a0, a1); //Ret: Void
        },
        AddForce$$Vector2: function(a0/*Vector2*/) { 
            return CS.Call(4, 190, 1, false, this, a0); //Ret: Void
        },
        AddForceAtPosition$$Vector2$$Vector2$$ForceMode2D: function(a0/*Vector2*/, a1/*Vector2*/, a2/*ForceMode2D*/) { 
            return CS.Call(4, 190, 2, false, this, a0, a1, a2); //Ret: Void
        },
        AddForceAtPosition$$Vector2$$Vector2: function(a0/*Vector2*/, a1/*Vector2*/) { 
            return CS.Call(4, 190, 3, false, this, a0, a1); //Ret: Void
        },
        AddRelativeForce$$Vector2$$ForceMode2D: function(a0/*Vector2*/, a1/*ForceMode2D*/) { 
            return CS.Call(4, 190, 4, false, this, a0, a1); //Ret: Void
        },
        AddRelativeForce$$Vector2: function(a0/*Vector2*/) { 
            return CS.Call(4, 190, 5, false, this, a0); //Ret: Void
        },
        AddTorque$$Single$$ForceMode2D: function(a0/*Single*/, a1/*ForceMode2D*/) { 
            return CS.Call(4, 190, 6, false, this, a0, a1); //Ret: Void
        },
        AddTorque$$Single: function(a0/*Single*/) { 
            return CS.Call(4, 190, 7, false, this, a0); //Ret: Void
        },
        Cast$$Vector2$$RaycastHit2D$Array$$Single: function(a0/*Vector2*/, a1/*RaycastHit2D[]*/, a2/*Single*/) { 
            return CS.Call(4, 190, 8, false, this, a0, a1, a2); //Ret: Int32
        },
        Cast$$Vector2$$RaycastHit2D$Array: function(a0/*Vector2*/, a1/*RaycastHit2D[]*/) { 
            return CS.Call(4, 190, 9, false, this, a0, a1); //Ret: Int32
        },
        GetPoint: function(a0/*Vector2*/) { 
            return CS.Call(4, 190, 10, false, this, a0); //Ret: Vector2
        },
        GetPointVelocity: function(a0/*Vector2*/) { 
            return CS.Call(4, 190, 11, false, this, a0); //Ret: Vector2
        },
        GetRelativePoint: function(a0/*Vector2*/) { 
            return CS.Call(4, 190, 12, false, this, a0); //Ret: Vector2
        },
        GetRelativePointVelocity: function(a0/*Vector2*/) { 
            return CS.Call(4, 190, 13, false, this, a0); //Ret: Vector2
        },
        GetRelativeVector: function(a0/*Vector2*/) { 
            return CS.Call(4, 190, 14, false, this, a0); //Ret: Vector2
        },
        GetVector: function(a0/*Vector2*/) { 
            return CS.Call(4, 190, 15, false, this, a0); //Ret: Vector2
        },
        IsAwake: function() { 
            return CS.Call(4, 190, 16, false, this); //Ret: Boolean
        },
        IsSleeping: function() { 
            return CS.Call(4, 190, 17, false, this); //Ret: Boolean
        },
        IsTouching: function(a0/*Collider2D*/) { 
            return CS.Call(4, 190, 18, false, this, a0); //Ret: Boolean
        },
        IsTouchingLayers$$Int32: function(a0/*Int32*/) { 
            return CS.Call(4, 190, 19, false, this, a0); //Ret: Boolean
        },
        IsTouchingLayers: function() { 
            return CS.Call(4, 190, 20, false, this); //Ret: Boolean
        },
        MovePosition: function(a0/*Vector2*/) { 
            return CS.Call(4, 190, 21, false, this, a0); //Ret: Void
        },
        MoveRotation: function(a0/*Single*/) { 
            return CS.Call(4, 190, 22, false, this, a0); //Ret: Void
        },
        OverlapPoint: function(a0/*Vector2*/) { 
            return CS.Call(4, 190, 23, false, this, a0); //Ret: Boolean
        },
        Sleep: function() { 
            return CS.Call(4, 190, 24, false, this); //Ret: Void
        },
        WakeUp: function() { 
            return CS.Call(4, 190, 25, false, this); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Rigidbody2D);

// UnityEngine.Collider2D
var UnityEngine$Collider2D = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Collider2D",
    Kind: "Class",
    baseTypeName: "UnityEngine.Behaviour",
    definition: {
        ctor: function() { CS.Call(5, 191, 0, true, this); },
        get_density: function() { return CS.Call(2, 191, 0, false, this); },
        set_density: function(v) { return CS.Call(3, 191, 0, false, this, v); },
        get_isTrigger: function() { return CS.Call(2, 191, 1, false, this); },
        set_isTrigger: function(v) { return CS.Call(3, 191, 1, false, this, v); },
        get_usedByEffector: function() { return CS.Call(2, 191, 2, false, this); },
        set_usedByEffector: function(v) { return CS.Call(3, 191, 2, false, this, v); },
        get_offset: function() { return CS.Call(2, 191, 3, false, this); },
        set_offset: function(v) { return CS.Call(3, 191, 3, false, this, v); },
        get_attachedRigidbody: function() { return CS.Call(2, 191, 4, false, this); },
        set_attachedRigidbody: function(v) { return CS.Call(3, 191, 4, false, this, v); },
        get_shapeCount: function() { return CS.Call(2, 191, 5, false, this); },
        set_shapeCount: function(v) { return CS.Call(3, 191, 5, false, this, v); },
        get_bounds: function() { return CS.Call(2, 191, 6, false, this); },
        set_bounds: function(v) { return CS.Call(3, 191, 6, false, this, v); },
        get_sharedMaterial: function() { return CS.Call(2, 191, 7, false, this); },
        set_sharedMaterial: function(v) { return CS.Call(3, 191, 7, false, this, v); },
        Cast$$Vector2$$RaycastHit2D$Array$$Single$$Boolean: function(a0/*Vector2*/, a1/*RaycastHit2D[]*/, a2/*Single*/, a3/*Boolean*/) { 
            return CS.Call(4, 191, 0, false, this, a0, a1, a2, a3); //Ret: Int32
        },
        Cast$$Vector2$$RaycastHit2D$Array$$Single: function(a0/*Vector2*/, a1/*RaycastHit2D[]*/, a2/*Single*/) { 
            return CS.Call(4, 191, 1, false, this, a0, a1, a2); //Ret: Int32
        },
        Cast$$Vector2$$RaycastHit2D$Array: function(a0/*Vector2*/, a1/*RaycastHit2D[]*/) { 
            return CS.Call(4, 191, 2, false, this, a0, a1); //Ret: Int32
        },
        IsTouching: function(a0/*Collider2D*/) { 
            return CS.Call(4, 191, 3, false, this, a0); //Ret: Boolean
        },
        IsTouchingLayers$$Int32: function(a0/*Int32*/) { 
            return CS.Call(4, 191, 4, false, this, a0); //Ret: Boolean
        },
        IsTouchingLayers: function() { 
            return CS.Call(4, 191, 5, false, this); //Ret: Boolean
        },
        OverlapPoint: function(a0/*Vector2*/) { 
            return CS.Call(4, 191, 6, false, this, a0); //Ret: Boolean
        },
        Raycast$$Vector2$$RaycastHit2D$Array$$Single$$Int32$$Single$$Single: function(a0/*Vector2*/, a1/*RaycastHit2D[]*/, a2/*Single*/, a3/*Int32*/, a4/*Single*/, a5/*Single*/) { 
            return CS.Call(4, 191, 7, false, this, a0, a1, a2, a3, a4, a5); //Ret: Int32
        },
        Raycast$$Vector2$$RaycastHit2D$Array$$Single$$Int32$$Single: function(a0/*Vector2*/, a1/*RaycastHit2D[]*/, a2/*Single*/, a3/*Int32*/, a4/*Single*/) { 
            return CS.Call(4, 191, 8, false, this, a0, a1, a2, a3, a4); //Ret: Int32
        },
        Raycast$$Vector2$$RaycastHit2D$Array$$Single$$Int32: function(a0/*Vector2*/, a1/*RaycastHit2D[]*/, a2/*Single*/, a3/*Int32*/) { 
            return CS.Call(4, 191, 9, false, this, a0, a1, a2, a3); //Ret: Int32
        },
        Raycast$$Vector2$$RaycastHit2D$Array$$Single: function(a0/*Vector2*/, a1/*RaycastHit2D[]*/, a2/*Single*/) { 
            return CS.Call(4, 191, 10, false, this, a0, a1, a2); //Ret: Int32
        },
        Raycast$$Vector2$$RaycastHit2D$Array: function(a0/*Vector2*/, a1/*RaycastHit2D[]*/) { 
            return CS.Call(4, 191, 11, false, this, a0, a1); //Ret: Int32
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Collider2D);

// UnityEngine.CircleCollider2D
var UnityEngine$CircleCollider2D = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.CircleCollider2D",
    Kind: "Class",
    baseTypeName: "UnityEngine.Collider2D",
    definition: {
        ctor: function() { CS.Call(5, 192, 0, true, this); },
        get_radius: function() { return CS.Call(2, 192, 0, false, this); },
        set_radius: function(v) { return CS.Call(3, 192, 0, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$CircleCollider2D);

// UnityEngine.BoxCollider2D
var UnityEngine$BoxCollider2D = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.BoxCollider2D",
    Kind: "Class",
    baseTypeName: "UnityEngine.Collider2D",
    definition: {
        ctor: function() { CS.Call(5, 193, 0, true, this); },
        get_size: function() { return CS.Call(2, 193, 0, false, this); },
        set_size: function(v) { return CS.Call(3, 193, 0, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$BoxCollider2D);

// UnityEngine.EdgeCollider2D
var UnityEngine$EdgeCollider2D = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.EdgeCollider2D",
    Kind: "Class",
    baseTypeName: "UnityEngine.Collider2D",
    definition: {
        ctor: function() { CS.Call(5, 194, 0, true, this); },
        get_edgeCount: function() { return CS.Call(2, 194, 0, false, this); },
        set_edgeCount: function(v) { return CS.Call(3, 194, 0, false, this, v); },
        get_pointCount: function() { return CS.Call(2, 194, 1, false, this); },
        set_pointCount: function(v) { return CS.Call(3, 194, 1, false, this, v); },
        get_points: function() { return CS.Call(2, 194, 2, false, this); },
        set_points: function(v) { return CS.Call(3, 194, 2, false, this, v); },
        Reset: function() { 
            return CS.Call(4, 194, 0, false, this); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$EdgeCollider2D);

// UnityEngine.PolygonCollider2D
var UnityEngine$PolygonCollider2D = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.PolygonCollider2D",
    Kind: "Class",
    baseTypeName: "UnityEngine.Collider2D",
    definition: {
        ctor: function() { CS.Call(5, 195, 0, true, this); },
        get_points: function() { return CS.Call(2, 195, 0, false, this); },
        set_points: function(v) { return CS.Call(3, 195, 0, false, this, v); },
        get_pathCount: function() { return CS.Call(2, 195, 1, false, this); },
        set_pathCount: function(v) { return CS.Call(3, 195, 1, false, this, v); },
        CreatePrimitive$$Int32$$Vector2$$Vector2: function(a0/*Int32*/, a1/*Vector2*/, a2/*Vector2*/) { 
            return CS.Call(4, 195, 0, false, this, a0, a1, a2); //Ret: Void
        },
        CreatePrimitive$$Int32$$Vector2: function(a0/*Int32*/, a1/*Vector2*/) { 
            return CS.Call(4, 195, 1, false, this, a0, a1); //Ret: Void
        },
        CreatePrimitive$$Int32: function(a0/*Int32*/) { 
            return CS.Call(4, 195, 2, false, this, a0); //Ret: Void
        },
        GetPath: function(a0/*Int32*/) { 
            return CS.Call(4, 195, 3, false, this, a0); //Ret: Vector2[]
        },
        GetTotalPointCount: function() { 
            return CS.Call(4, 195, 4, false, this); //Ret: Int32
        },
        SetPath: function(a0/*Int32*/, a1/*Vector2[]*/) { 
            return CS.Call(4, 195, 5, false, this, a0, a1); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$PolygonCollider2D);

// UnityEngine.ContactPoint2D
var UnityEngine$ContactPoint2D = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.ContactPoint2D",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    definition: {
        ctor: function() { CS.Call(5, 196, 0, true, this); },
        get_point: function() { return CS.Call(2, 196, 0, false, this); },
        set_point: function(v) { return CS.Call(3, 196, 0, false, this, v); },
        get_normal: function() { return CS.Call(2, 196, 1, false, this); },
        set_normal: function(v) { return CS.Call(3, 196, 1, false, this, v); },
        get_collider: function() { return CS.Call(2, 196, 2, false, this); },
        set_collider: function(v) { return CS.Call(3, 196, 2, false, this, v); },
        get_otherCollider: function() { return CS.Call(2, 196, 3, false, this); },
        set_otherCollider: function(v) { return CS.Call(3, 196, 3, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$ContactPoint2D);

// UnityEngine.Collision2D
var UnityEngine$Collision2D = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Collision2D",
    Kind: "Class",
    baseTypeName: "System.Object",
    definition: {
        ctor: function() { CS.Call(5, 197, 0, true, this); },
        get_enabled: function() { return CS.Call(2, 197, 0, false, this); },
        set_enabled: function(v) { return CS.Call(3, 197, 0, false, this, v); },
        get_rigidbody: function() { return CS.Call(2, 197, 1, false, this); },
        set_rigidbody: function(v) { return CS.Call(3, 197, 1, false, this, v); },
        get_collider: function() { return CS.Call(2, 197, 2, false, this); },
        set_collider: function(v) { return CS.Call(3, 197, 2, false, this, v); },
        get_transform: function() { return CS.Call(2, 197, 3, false, this); },
        set_transform: function(v) { return CS.Call(3, 197, 3, false, this, v); },
        get_gameObject: function() { return CS.Call(2, 197, 4, false, this); },
        set_gameObject: function(v) { return CS.Call(3, 197, 4, false, this, v); },
        get_contacts: function() { return CS.Call(2, 197, 5, false, this); },
        set_contacts: function(v) { return CS.Call(3, 197, 5, false, this, v); },
        get_relativeVelocity: function() { return CS.Call(2, 197, 6, false, this); },
        set_relativeVelocity: function(v) { return CS.Call(3, 197, 6, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Collision2D);

// UnityEngine.JointAngleLimits2D
var UnityEngine$JointAngleLimits2D = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.JointAngleLimits2D",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    definition: {
        ctor: function() { CS.Call(5, 198, 0, true, this); },
        get_min: function() { return CS.Call(2, 198, 0, false, this); },
        set_min: function(v) { return CS.Call(3, 198, 0, false, this, v); },
        get_max: function() { return CS.Call(2, 198, 1, false, this); },
        set_max: function(v) { return CS.Call(3, 198, 1, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$JointAngleLimits2D);

// UnityEngine.JointTranslationLimits2D
var UnityEngine$JointTranslationLimits2D = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.JointTranslationLimits2D",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    definition: {
        ctor: function() { CS.Call(5, 199, 0, true, this); },
        get_min: function() { return CS.Call(2, 199, 0, false, this); },
        set_min: function(v) { return CS.Call(3, 199, 0, false, this, v); },
        get_max: function() { return CS.Call(2, 199, 1, false, this); },
        set_max: function(v) { return CS.Call(3, 199, 1, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$JointTranslationLimits2D);

// UnityEngine.JointMotor2D
var UnityEngine$JointMotor2D = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.JointMotor2D",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    definition: {
        ctor: function() { CS.Call(5, 200, 0, true, this); },
        get_motorSpeed: function() { return CS.Call(2, 200, 0, false, this); },
        set_motorSpeed: function(v) { return CS.Call(3, 200, 0, false, this, v); },
        get_maxMotorTorque: function() { return CS.Call(2, 200, 1, false, this); },
        set_maxMotorTorque: function(v) { return CS.Call(3, 200, 1, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$JointMotor2D);

// UnityEngine.JointSuspension2D
var UnityEngine$JointSuspension2D = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.JointSuspension2D",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    definition: {
        ctor: function() { CS.Call(5, 201, 0, true, this); },
        get_dampingRatio: function() { return CS.Call(2, 201, 0, false, this); },
        set_dampingRatio: function(v) { return CS.Call(3, 201, 0, false, this, v); },
        get_frequency: function() { return CS.Call(2, 201, 1, false, this); },
        set_frequency: function(v) { return CS.Call(3, 201, 1, false, this, v); },
        get_angle: function() { return CS.Call(2, 201, 2, false, this); },
        set_angle: function(v) { return CS.Call(3, 201, 2, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$JointSuspension2D);

// UnityEngine.Joint2D
var UnityEngine$Joint2D = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Joint2D",
    Kind: "Class",
    baseTypeName: "UnityEngine.Behaviour",
    definition: {
        ctor: function() { CS.Call(5, 202, 0, true, this); },
        get_connectedBody: function() { return CS.Call(2, 202, 0, false, this); },
        set_connectedBody: function(v) { return CS.Call(3, 202, 0, false, this, v); },
        get_enableCollision: function() { return CS.Call(2, 202, 1, false, this); },
        set_enableCollision: function(v) { return CS.Call(3, 202, 1, false, this, v); },
        get_breakForce: function() { return CS.Call(2, 202, 2, false, this); },
        set_breakForce: function(v) { return CS.Call(3, 202, 2, false, this, v); },
        get_breakTorque: function() { return CS.Call(2, 202, 3, false, this); },
        set_breakTorque: function(v) { return CS.Call(3, 202, 3, false, this, v); },
        get_reactionForce: function() { return CS.Call(2, 202, 4, false, this); },
        set_reactionForce: function(v) { return CS.Call(3, 202, 4, false, this, v); },
        get_reactionTorque: function() { return CS.Call(2, 202, 5, false, this); },
        set_reactionTorque: function(v) { return CS.Call(3, 202, 5, false, this, v); },
        GetReactionForce: function(a0/*Single*/) { 
            return CS.Call(4, 202, 0, false, this, a0); //Ret: Vector2
        },
        GetReactionTorque: function(a0/*Single*/) { 
            return CS.Call(4, 202, 1, false, this, a0); //Ret: Single
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Joint2D);

// UnityEngine.AnchoredJoint2D
var UnityEngine$AnchoredJoint2D = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.AnchoredJoint2D",
    Kind: "Class",
    baseTypeName: "UnityEngine.Joint2D",
    definition: {
        ctor: function() { CS.Call(5, 203, 0, true, this); },
        get_anchor: function() { return CS.Call(2, 203, 0, false, this); },
        set_anchor: function(v) { return CS.Call(3, 203, 0, false, this, v); },
        get_connectedAnchor: function() { return CS.Call(2, 203, 1, false, this); },
        set_connectedAnchor: function(v) { return CS.Call(3, 203, 1, false, this, v); },
        get_autoConfigureConnectedAnchor: function() { return CS.Call(2, 203, 2, false, this); },
        set_autoConfigureConnectedAnchor: function(v) { return CS.Call(3, 203, 2, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$AnchoredJoint2D);

// UnityEngine.SpringJoint2D
var UnityEngine$SpringJoint2D = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.SpringJoint2D",
    Kind: "Class",
    baseTypeName: "UnityEngine.AnchoredJoint2D",
    definition: {
        ctor: function() { CS.Call(5, 204, 0, true, this); },
        get_autoConfigureDistance: function() { return CS.Call(2, 204, 0, false, this); },
        set_autoConfigureDistance: function(v) { return CS.Call(3, 204, 0, false, this, v); },
        get_distance: function() { return CS.Call(2, 204, 1, false, this); },
        set_distance: function(v) { return CS.Call(3, 204, 1, false, this, v); },
        get_dampingRatio: function() { return CS.Call(2, 204, 2, false, this); },
        set_dampingRatio: function(v) { return CS.Call(3, 204, 2, false, this, v); },
        get_frequency: function() { return CS.Call(2, 204, 3, false, this); },
        set_frequency: function(v) { return CS.Call(3, 204, 3, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$SpringJoint2D);

// UnityEngine.DistanceJoint2D
var UnityEngine$DistanceJoint2D = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.DistanceJoint2D",
    Kind: "Class",
    baseTypeName: "UnityEngine.AnchoredJoint2D",
    definition: {
        ctor: function() { CS.Call(5, 205, 0, true, this); },
        get_autoConfigureDistance: function() { return CS.Call(2, 205, 0, false, this); },
        set_autoConfigureDistance: function(v) { return CS.Call(3, 205, 0, false, this, v); },
        get_distance: function() { return CS.Call(2, 205, 1, false, this); },
        set_distance: function(v) { return CS.Call(3, 205, 1, false, this, v); },
        get_maxDistanceOnly: function() { return CS.Call(2, 205, 2, false, this); },
        set_maxDistanceOnly: function(v) { return CS.Call(3, 205, 2, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$DistanceJoint2D);

// UnityEngine.FrictionJoint2D
var UnityEngine$FrictionJoint2D = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.FrictionJoint2D",
    Kind: "Class",
    baseTypeName: "UnityEngine.AnchoredJoint2D",
    definition: {
        ctor: function() { CS.Call(5, 206, 0, true, this); },
        get_maxForce: function() { return CS.Call(2, 206, 0, false, this); },
        set_maxForce: function(v) { return CS.Call(3, 206, 0, false, this, v); },
        get_maxTorque: function() { return CS.Call(2, 206, 1, false, this); },
        set_maxTorque: function(v) { return CS.Call(3, 206, 1, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$FrictionJoint2D);

// UnityEngine.HingeJoint2D
var UnityEngine$HingeJoint2D = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.HingeJoint2D",
    Kind: "Class",
    baseTypeName: "UnityEngine.AnchoredJoint2D",
    definition: {
        ctor: function() { CS.Call(5, 207, 0, true, this); },
        get_useMotor: function() { return CS.Call(2, 207, 0, false, this); },
        set_useMotor: function(v) { return CS.Call(3, 207, 0, false, this, v); },
        get_useLimits: function() { return CS.Call(2, 207, 1, false, this); },
        set_useLimits: function(v) { return CS.Call(3, 207, 1, false, this, v); },
        get_motor: function() { return CS.Call(2, 207, 2, false, this); },
        set_motor: function(v) { return CS.Call(3, 207, 2, false, this, v); },
        get_limits: function() { return CS.Call(2, 207, 3, false, this); },
        set_limits: function(v) { return CS.Call(3, 207, 3, false, this, v); },
        get_limitState: function() { return CS.Call(2, 207, 4, false, this); },
        set_limitState: function(v) { return CS.Call(3, 207, 4, false, this, v); },
        get_referenceAngle: function() { return CS.Call(2, 207, 5, false, this); },
        set_referenceAngle: function(v) { return CS.Call(3, 207, 5, false, this, v); },
        get_jointAngle: function() { return CS.Call(2, 207, 6, false, this); },
        set_jointAngle: function(v) { return CS.Call(3, 207, 6, false, this, v); },
        get_jointSpeed: function() { return CS.Call(2, 207, 7, false, this); },
        set_jointSpeed: function(v) { return CS.Call(3, 207, 7, false, this, v); },
        GetMotorTorque: function(a0/*Single*/) { 
            return CS.Call(4, 207, 0, false, this, a0); //Ret: Single
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$HingeJoint2D);

// UnityEngine.RelativeJoint2D
var UnityEngine$RelativeJoint2D = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.RelativeJoint2D",
    Kind: "Class",
    baseTypeName: "UnityEngine.Joint2D",
    definition: {
        ctor: function() { CS.Call(5, 208, 0, true, this); },
        get_maxForce: function() { return CS.Call(2, 208, 0, false, this); },
        set_maxForce: function(v) { return CS.Call(3, 208, 0, false, this, v); },
        get_maxTorque: function() { return CS.Call(2, 208, 1, false, this); },
        set_maxTorque: function(v) { return CS.Call(3, 208, 1, false, this, v); },
        get_correctionScale: function() { return CS.Call(2, 208, 2, false, this); },
        set_correctionScale: function(v) { return CS.Call(3, 208, 2, false, this, v); },
        get_autoConfigureOffset: function() { return CS.Call(2, 208, 3, false, this); },
        set_autoConfigureOffset: function(v) { return CS.Call(3, 208, 3, false, this, v); },
        get_linearOffset: function() { return CS.Call(2, 208, 4, false, this); },
        set_linearOffset: function(v) { return CS.Call(3, 208, 4, false, this, v); },
        get_angularOffset: function() { return CS.Call(2, 208, 5, false, this); },
        set_angularOffset: function(v) { return CS.Call(3, 208, 5, false, this, v); },
        get_target: function() { return CS.Call(2, 208, 6, false, this); },
        set_target: function(v) { return CS.Call(3, 208, 6, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$RelativeJoint2D);

// UnityEngine.SliderJoint2D
var UnityEngine$SliderJoint2D = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.SliderJoint2D",
    Kind: "Class",
    baseTypeName: "UnityEngine.AnchoredJoint2D",
    definition: {
        ctor: function() { CS.Call(5, 209, 0, true, this); },
        get_autoConfigureAngle: function() { return CS.Call(2, 209, 0, false, this); },
        set_autoConfigureAngle: function(v) { return CS.Call(3, 209, 0, false, this, v); },
        get_angle: function() { return CS.Call(2, 209, 1, false, this); },
        set_angle: function(v) { return CS.Call(3, 209, 1, false, this, v); },
        get_useMotor: function() { return CS.Call(2, 209, 2, false, this); },
        set_useMotor: function(v) { return CS.Call(3, 209, 2, false, this, v); },
        get_useLimits: function() { return CS.Call(2, 209, 3, false, this); },
        set_useLimits: function(v) { return CS.Call(3, 209, 3, false, this, v); },
        get_motor: function() { return CS.Call(2, 209, 4, false, this); },
        set_motor: function(v) { return CS.Call(3, 209, 4, false, this, v); },
        get_limits: function() { return CS.Call(2, 209, 5, false, this); },
        set_limits: function(v) { return CS.Call(3, 209, 5, false, this, v); },
        get_limitState: function() { return CS.Call(2, 209, 6, false, this); },
        set_limitState: function(v) { return CS.Call(3, 209, 6, false, this, v); },
        get_referenceAngle: function() { return CS.Call(2, 209, 7, false, this); },
        set_referenceAngle: function(v) { return CS.Call(3, 209, 7, false, this, v); },
        get_jointTranslation: function() { return CS.Call(2, 209, 8, false, this); },
        set_jointTranslation: function(v) { return CS.Call(3, 209, 8, false, this, v); },
        get_jointSpeed: function() { return CS.Call(2, 209, 9, false, this); },
        set_jointSpeed: function(v) { return CS.Call(3, 209, 9, false, this, v); },
        GetMotorForce: function(a0/*Single*/) { 
            return CS.Call(4, 209, 0, false, this, a0); //Ret: Single
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$SliderJoint2D);

// UnityEngine.TargetJoint2D
var UnityEngine$TargetJoint2D = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.TargetJoint2D",
    Kind: "Class",
    baseTypeName: "UnityEngine.Joint2D",
    definition: {
        ctor: function() { CS.Call(5, 210, 0, true, this); },
        get_anchor: function() { return CS.Call(2, 210, 0, false, this); },
        set_anchor: function(v) { return CS.Call(3, 210, 0, false, this, v); },
        get_target: function() { return CS.Call(2, 210, 1, false, this); },
        set_target: function(v) { return CS.Call(3, 210, 1, false, this, v); },
        get_autoConfigureTarget: function() { return CS.Call(2, 210, 2, false, this); },
        set_autoConfigureTarget: function(v) { return CS.Call(3, 210, 2, false, this, v); },
        get_maxForce: function() { return CS.Call(2, 210, 3, false, this); },
        set_maxForce: function(v) { return CS.Call(3, 210, 3, false, this, v); },
        get_dampingRatio: function() { return CS.Call(2, 210, 4, false, this); },
        set_dampingRatio: function(v) { return CS.Call(3, 210, 4, false, this, v); },
        get_frequency: function() { return CS.Call(2, 210, 5, false, this); },
        set_frequency: function(v) { return CS.Call(3, 210, 5, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$TargetJoint2D);

// UnityEngine.FixedJoint2D
var UnityEngine$FixedJoint2D = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.FixedJoint2D",
    Kind: "Class",
    baseTypeName: "UnityEngine.AnchoredJoint2D",
    definition: {
        ctor: function() { CS.Call(5, 211, 0, true, this); },
        get_dampingRatio: function() { return CS.Call(2, 211, 0, false, this); },
        set_dampingRatio: function(v) { return CS.Call(3, 211, 0, false, this, v); },
        get_frequency: function() { return CS.Call(2, 211, 1, false, this); },
        set_frequency: function(v) { return CS.Call(3, 211, 1, false, this, v); },
        get_referenceAngle: function() { return CS.Call(2, 211, 2, false, this); },
        set_referenceAngle: function(v) { return CS.Call(3, 211, 2, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$FixedJoint2D);

// UnityEngine.WheelJoint2D
var UnityEngine$WheelJoint2D = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.WheelJoint2D",
    Kind: "Class",
    baseTypeName: "UnityEngine.AnchoredJoint2D",
    definition: {
        ctor: function() { CS.Call(5, 212, 0, true, this); },
        get_suspension: function() { return CS.Call(2, 212, 0, false, this); },
        set_suspension: function(v) { return CS.Call(3, 212, 0, false, this, v); },
        get_useMotor: function() { return CS.Call(2, 212, 1, false, this); },
        set_useMotor: function(v) { return CS.Call(3, 212, 1, false, this, v); },
        get_motor: function() { return CS.Call(2, 212, 2, false, this); },
        set_motor: function(v) { return CS.Call(3, 212, 2, false, this, v); },
        get_jointTranslation: function() { return CS.Call(2, 212, 3, false, this); },
        set_jointTranslation: function(v) { return CS.Call(3, 212, 3, false, this, v); },
        get_jointSpeed: function() { return CS.Call(2, 212, 4, false, this); },
        set_jointSpeed: function(v) { return CS.Call(3, 212, 4, false, this, v); },
        GetMotorTorque: function(a0/*Single*/) { 
            return CS.Call(4, 212, 0, false, this, a0); //Ret: Single
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$WheelJoint2D);

// UnityEngine.PhysicsMaterial2D
var UnityEngine$PhysicsMaterial2D = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.PhysicsMaterial2D",
    Kind: "Class",
    baseTypeName: "UnityEngine.Object",
    definition: {
        ctor: function() { CS.Call(5, 213, 0, true, this); },
        ctor$$String: function(a0) { CS.Call(5, 213, 1, true, this, a0); },
        get_bounciness: function() { return CS.Call(2, 213, 0, false, this); },
        set_bounciness: function(v) { return CS.Call(3, 213, 0, false, this, v); },
        get_friction: function() { return CS.Call(2, 213, 1, false, this); },
        set_friction: function(v) { return CS.Call(3, 213, 1, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$PhysicsMaterial2D);

// UnityEngine.PhysicsUpdateBehaviour2D
var UnityEngine$PhysicsUpdateBehaviour2D = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.PhysicsUpdateBehaviour2D",
    Kind: "Class",
    baseTypeName: "UnityEngine.Behaviour",
    definition: {
        ctor: function() { CS.Call(5, 214, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$PhysicsUpdateBehaviour2D);

// UnityEngine.ConstantForce2D
var UnityEngine$ConstantForce2D = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.ConstantForce2D",
    Kind: "Class",
    baseTypeName: "UnityEngine.PhysicsUpdateBehaviour2D",
    definition: {
        ctor: function() { CS.Call(5, 215, 0, true, this); },
        get_force: function() { return CS.Call(2, 215, 0, false, this); },
        set_force: function(v) { return CS.Call(3, 215, 0, false, this, v); },
        get_relativeForce: function() { return CS.Call(2, 215, 1, false, this); },
        set_relativeForce: function(v) { return CS.Call(3, 215, 1, false, this, v); },
        get_torque: function() { return CS.Call(2, 215, 2, false, this); },
        set_torque: function(v) { return CS.Call(3, 215, 2, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$ConstantForce2D);

// UnityEngine.Effector2D
var UnityEngine$Effector2D = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Effector2D",
    Kind: "Class",
    baseTypeName: "UnityEngine.Behaviour",
    definition: {
        ctor: function() { CS.Call(5, 216, 0, true, this); },
        get_useColliderMask: function() { return CS.Call(2, 216, 0, false, this); },
        set_useColliderMask: function(v) { return CS.Call(3, 216, 0, false, this, v); },
        get_colliderMask: function() { return CS.Call(2, 216, 1, false, this); },
        set_colliderMask: function(v) { return CS.Call(3, 216, 1, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Effector2D);

// UnityEngine.AreaEffector2D
var UnityEngine$AreaEffector2D = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.AreaEffector2D",
    Kind: "Class",
    baseTypeName: "UnityEngine.Effector2D",
    definition: {
        ctor: function() { CS.Call(5, 217, 0, true, this); },
        get_forceAngle: function() { return CS.Call(2, 217, 0, false, this); },
        set_forceAngle: function(v) { return CS.Call(3, 217, 0, false, this, v); },
        get_useGlobalAngle: function() { return CS.Call(2, 217, 1, false, this); },
        set_useGlobalAngle: function(v) { return CS.Call(3, 217, 1, false, this, v); },
        get_forceMagnitude: function() { return CS.Call(2, 217, 2, false, this); },
        set_forceMagnitude: function(v) { return CS.Call(3, 217, 2, false, this, v); },
        get_forceVariation: function() { return CS.Call(2, 217, 3, false, this); },
        set_forceVariation: function(v) { return CS.Call(3, 217, 3, false, this, v); },
        get_drag: function() { return CS.Call(2, 217, 4, false, this); },
        set_drag: function(v) { return CS.Call(3, 217, 4, false, this, v); },
        get_angularDrag: function() { return CS.Call(2, 217, 5, false, this); },
        set_angularDrag: function(v) { return CS.Call(3, 217, 5, false, this, v); },
        get_forceTarget: function() { return CS.Call(2, 217, 6, false, this); },
        set_forceTarget: function(v) { return CS.Call(3, 217, 6, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$AreaEffector2D);

// UnityEngine.BuoyancyEffector2D
var UnityEngine$BuoyancyEffector2D = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.BuoyancyEffector2D",
    Kind: "Class",
    baseTypeName: "UnityEngine.Effector2D",
    definition: {
        ctor: function() { CS.Call(5, 218, 0, true, this); },
        get_surfaceLevel: function() { return CS.Call(2, 218, 0, false, this); },
        set_surfaceLevel: function(v) { return CS.Call(3, 218, 0, false, this, v); },
        get_density: function() { return CS.Call(2, 218, 1, false, this); },
        set_density: function(v) { return CS.Call(3, 218, 1, false, this, v); },
        get_linearDrag: function() { return CS.Call(2, 218, 2, false, this); },
        set_linearDrag: function(v) { return CS.Call(3, 218, 2, false, this, v); },
        get_angularDrag: function() { return CS.Call(2, 218, 3, false, this); },
        set_angularDrag: function(v) { return CS.Call(3, 218, 3, false, this, v); },
        get_flowAngle: function() { return CS.Call(2, 218, 4, false, this); },
        set_flowAngle: function(v) { return CS.Call(3, 218, 4, false, this, v); },
        get_flowMagnitude: function() { return CS.Call(2, 218, 5, false, this); },
        set_flowMagnitude: function(v) { return CS.Call(3, 218, 5, false, this, v); },
        get_flowVariation: function() { return CS.Call(2, 218, 6, false, this); },
        set_flowVariation: function(v) { return CS.Call(3, 218, 6, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$BuoyancyEffector2D);

// UnityEngine.PointEffector2D
var UnityEngine$PointEffector2D = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.PointEffector2D",
    Kind: "Class",
    baseTypeName: "UnityEngine.Effector2D",
    definition: {
        ctor: function() { CS.Call(5, 219, 0, true, this); },
        get_forceMagnitude: function() { return CS.Call(2, 219, 0, false, this); },
        set_forceMagnitude: function(v) { return CS.Call(3, 219, 0, false, this, v); },
        get_forceVariation: function() { return CS.Call(2, 219, 1, false, this); },
        set_forceVariation: function(v) { return CS.Call(3, 219, 1, false, this, v); },
        get_distanceScale: function() { return CS.Call(2, 219, 2, false, this); },
        set_distanceScale: function(v) { return CS.Call(3, 219, 2, false, this, v); },
        get_drag: function() { return CS.Call(2, 219, 3, false, this); },
        set_drag: function(v) { return CS.Call(3, 219, 3, false, this, v); },
        get_angularDrag: function() { return CS.Call(2, 219, 4, false, this); },
        set_angularDrag: function(v) { return CS.Call(3, 219, 4, false, this, v); },
        get_forceSource: function() { return CS.Call(2, 219, 5, false, this); },
        set_forceSource: function(v) { return CS.Call(3, 219, 5, false, this, v); },
        get_forceTarget: function() { return CS.Call(2, 219, 6, false, this); },
        set_forceTarget: function(v) { return CS.Call(3, 219, 6, false, this, v); },
        get_forceMode: function() { return CS.Call(2, 219, 7, false, this); },
        set_forceMode: function(v) { return CS.Call(3, 219, 7, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$PointEffector2D);

// UnityEngine.PlatformEffector2D
var UnityEngine$PlatformEffector2D = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.PlatformEffector2D",
    Kind: "Class",
    baseTypeName: "UnityEngine.Effector2D",
    definition: {
        ctor: function() { CS.Call(5, 220, 0, true, this); },
        get_useOneWay: function() { return CS.Call(2, 220, 0, false, this); },
        set_useOneWay: function(v) { return CS.Call(3, 220, 0, false, this, v); },
        get_useOneWayGrouping: function() { return CS.Call(2, 220, 1, false, this); },
        set_useOneWayGrouping: function(v) { return CS.Call(3, 220, 1, false, this, v); },
        get_useSideFriction: function() { return CS.Call(2, 220, 2, false, this); },
        set_useSideFriction: function(v) { return CS.Call(3, 220, 2, false, this, v); },
        get_useSideBounce: function() { return CS.Call(2, 220, 3, false, this); },
        set_useSideBounce: function(v) { return CS.Call(3, 220, 3, false, this, v); },
        get_surfaceArc: function() { return CS.Call(2, 220, 4, false, this); },
        set_surfaceArc: function(v) { return CS.Call(3, 220, 4, false, this, v); },
        get_sideArc: function() { return CS.Call(2, 220, 5, false, this); },
        set_sideArc: function(v) { return CS.Call(3, 220, 5, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$PlatformEffector2D);

// UnityEngine.SurfaceEffector2D
var UnityEngine$SurfaceEffector2D = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.SurfaceEffector2D",
    Kind: "Class",
    baseTypeName: "UnityEngine.Effector2D",
    definition: {
        ctor: function() { CS.Call(5, 221, 0, true, this); },
        get_speed: function() { return CS.Call(2, 221, 0, false, this); },
        set_speed: function(v) { return CS.Call(3, 221, 0, false, this, v); },
        get_speedVariation: function() { return CS.Call(2, 221, 1, false, this); },
        set_speedVariation: function(v) { return CS.Call(3, 221, 1, false, this, v); },
        get_forceScale: function() { return CS.Call(2, 221, 2, false, this); },
        set_forceScale: function(v) { return CS.Call(3, 221, 2, false, this, v); },
        get_useContactForce: function() { return CS.Call(2, 221, 3, false, this); },
        set_useContactForce: function(v) { return CS.Call(3, 221, 3, false, this, v); },
        get_useFriction: function() { return CS.Call(2, 221, 4, false, this); },
        set_useFriction: function(v) { return CS.Call(3, 221, 4, false, this, v); },
        get_useBounce: function() { return CS.Call(2, 221, 5, false, this); },
        set_useBounce: function(v) { return CS.Call(3, 221, 5, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$SurfaceEffector2D);

// UnityEngine.NavMeshAgent
var UnityEngine$NavMeshAgent = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.NavMeshAgent",
    Kind: "Class",
    baseTypeName: "UnityEngine.Behaviour",
    definition: {
        ctor: function() { CS.Call(5, 222, 0, true, this); },
        get_destination: function() { return CS.Call(2, 222, 0, false, this); },
        set_destination: function(v) { return CS.Call(3, 222, 0, false, this, v); },
        get_stoppingDistance: function() { return CS.Call(2, 222, 1, false, this); },
        set_stoppingDistance: function(v) { return CS.Call(3, 222, 1, false, this, v); },
        get_velocity: function() { return CS.Call(2, 222, 2, false, this); },
        set_velocity: function(v) { return CS.Call(3, 222, 2, false, this, v); },
        get_nextPosition: function() { return CS.Call(2, 222, 3, false, this); },
        set_nextPosition: function(v) { return CS.Call(3, 222, 3, false, this, v); },
        get_steeringTarget: function() { return CS.Call(2, 222, 4, false, this); },
        set_steeringTarget: function(v) { return CS.Call(3, 222, 4, false, this, v); },
        get_desiredVelocity: function() { return CS.Call(2, 222, 5, false, this); },
        set_desiredVelocity: function(v) { return CS.Call(3, 222, 5, false, this, v); },
        get_remainingDistance: function() { return CS.Call(2, 222, 6, false, this); },
        set_remainingDistance: function(v) { return CS.Call(3, 222, 6, false, this, v); },
        get_baseOffset: function() { return CS.Call(2, 222, 7, false, this); },
        set_baseOffset: function(v) { return CS.Call(3, 222, 7, false, this, v); },
        get_isOnOffMeshLink: function() { return CS.Call(2, 222, 8, false, this); },
        set_isOnOffMeshLink: function(v) { return CS.Call(3, 222, 8, false, this, v); },
        get_currentOffMeshLinkData: function() { return CS.Call(2, 222, 9, false, this); },
        set_currentOffMeshLinkData: function(v) { return CS.Call(3, 222, 9, false, this, v); },
        get_nextOffMeshLinkData: function() { return CS.Call(2, 222, 10, false, this); },
        set_nextOffMeshLinkData: function(v) { return CS.Call(3, 222, 10, false, this, v); },
        get_autoTraverseOffMeshLink: function() { return CS.Call(2, 222, 11, false, this); },
        set_autoTraverseOffMeshLink: function(v) { return CS.Call(3, 222, 11, false, this, v); },
        get_autoBraking: function() { return CS.Call(2, 222, 12, false, this); },
        set_autoBraking: function(v) { return CS.Call(3, 222, 12, false, this, v); },
        get_autoRepath: function() { return CS.Call(2, 222, 13, false, this); },
        set_autoRepath: function(v) { return CS.Call(3, 222, 13, false, this, v); },
        get_hasPath: function() { return CS.Call(2, 222, 14, false, this); },
        set_hasPath: function(v) { return CS.Call(3, 222, 14, false, this, v); },
        get_pathPending: function() { return CS.Call(2, 222, 15, false, this); },
        set_pathPending: function(v) { return CS.Call(3, 222, 15, false, this, v); },
        get_isPathStale: function() { return CS.Call(2, 222, 16, false, this); },
        set_isPathStale: function(v) { return CS.Call(3, 222, 16, false, this, v); },
        get_pathStatus: function() { return CS.Call(2, 222, 17, false, this); },
        set_pathStatus: function(v) { return CS.Call(3, 222, 17, false, this, v); },
        get_pathEndPosition: function() { return CS.Call(2, 222, 18, false, this); },
        set_pathEndPosition: function(v) { return CS.Call(3, 222, 18, false, this, v); },
        get_path: function() { return CS.Call(2, 222, 19, false, this); },
        set_path: function(v) { return CS.Call(3, 222, 19, false, this, v); },
        get_areaMask: function() { return CS.Call(2, 222, 20, false, this); },
        set_areaMask: function(v) { return CS.Call(3, 222, 20, false, this, v); },
        get_speed: function() { return CS.Call(2, 222, 21, false, this); },
        set_speed: function(v) { return CS.Call(3, 222, 21, false, this, v); },
        get_angularSpeed: function() { return CS.Call(2, 222, 22, false, this); },
        set_angularSpeed: function(v) { return CS.Call(3, 222, 22, false, this, v); },
        get_acceleration: function() { return CS.Call(2, 222, 23, false, this); },
        set_acceleration: function(v) { return CS.Call(3, 222, 23, false, this, v); },
        get_updatePosition: function() { return CS.Call(2, 222, 24, false, this); },
        set_updatePosition: function(v) { return CS.Call(3, 222, 24, false, this, v); },
        get_updateRotation: function() { return CS.Call(2, 222, 25, false, this); },
        set_updateRotation: function(v) { return CS.Call(3, 222, 25, false, this, v); },
        get_radius: function() { return CS.Call(2, 222, 26, false, this); },
        set_radius: function(v) { return CS.Call(3, 222, 26, false, this, v); },
        get_height: function() { return CS.Call(2, 222, 27, false, this); },
        set_height: function(v) { return CS.Call(3, 222, 27, false, this, v); },
        get_obstacleAvoidanceType: function() { return CS.Call(2, 222, 28, false, this); },
        set_obstacleAvoidanceType: function(v) { return CS.Call(3, 222, 28, false, this, v); },
        get_avoidancePriority: function() { return CS.Call(2, 222, 29, false, this); },
        set_avoidancePriority: function(v) { return CS.Call(3, 222, 29, false, this, v); },
        get_isOnNavMesh: function() { return CS.Call(2, 222, 30, false, this); },
        set_isOnNavMesh: function(v) { return CS.Call(3, 222, 30, false, this, v); },
        ActivateCurrentOffMeshLink: function(a0/*Boolean*/) { 
            return CS.Call(4, 222, 0, false, this, a0); //Ret: Void
        },
        CalculatePath: function(a0/*Vector3*/, a1/*NavMeshPath*/) { 
            return CS.Call(4, 222, 1, false, this, a0, a1); //Ret: Boolean
        },
        CompleteOffMeshLink: function() { 
            return CS.Call(4, 222, 2, false, this); //Ret: Void
        },
        FindClosestEdge: function(a0/*NavMeshHit&*/) { 
            return CS.Call(4, 222, 3, false, this, a0); //Ret: Boolean
        },
        GetAreaCost: function(a0/*Int32*/) { 
            return CS.Call(4, 222, 4, false, this, a0); //Ret: Single
        },
        Move: function(a0/*Vector3*/) { 
            return CS.Call(4, 222, 5, false, this, a0); //Ret: Void
        },
        Raycast: function(a0/*Vector3*/, a1/*NavMeshHit&*/) { 
            return CS.Call(4, 222, 6, false, this, a0, a1); //Ret: Boolean
        },
        ResetPath: function() { 
            return CS.Call(4, 222, 7, false, this); //Ret: Void
        },
        Resume: function() { 
            return CS.Call(4, 222, 8, false, this); //Ret: Void
        },
        SamplePathPosition: function(a0/*Int32*/, a1/*Single*/, a2/*NavMeshHit&*/) { 
            return CS.Call(4, 222, 9, false, this, a0, a1, a2); //Ret: Boolean
        },
        SetAreaCost: function(a0/*Int32*/, a1/*Single*/) { 
            return CS.Call(4, 222, 10, false, this, a0, a1); //Ret: Void
        },
        SetDestination: function(a0/*Vector3*/) { 
            return CS.Call(4, 222, 11, false, this, a0); //Ret: Boolean
        },
        SetPath: function(a0/*NavMeshPath*/) { 
            return CS.Call(4, 222, 12, false, this, a0); //Ret: Boolean
        },
        Stop: function() { 
            return CS.Call(4, 222, 13, false, this); //Ret: Void
        },
        Warp: function(a0/*Vector3*/) { 
            return CS.Call(4, 222, 14, false, this, a0); //Ret: Boolean
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$NavMeshAgent);

// UnityEngine.NavMeshHit
var UnityEngine$NavMeshHit = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.NavMeshHit",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    definition: {
        ctor: function() { CS.Call(5, 223, 0, true, this); },
        get_position: function() { return CS.Call(2, 223, 0, false, this); },
        set_position: function(v) { return CS.Call(3, 223, 0, false, this, v); },
        get_normal: function() { return CS.Call(2, 223, 1, false, this); },
        set_normal: function(v) { return CS.Call(3, 223, 1, false, this, v); },
        get_distance: function() { return CS.Call(2, 223, 2, false, this); },
        set_distance: function(v) { return CS.Call(3, 223, 2, false, this, v); },
        get_mask: function() { return CS.Call(2, 223, 3, false, this); },
        set_mask: function(v) { return CS.Call(3, 223, 3, false, this, v); },
        get_hit: function() { return CS.Call(2, 223, 4, false, this); },
        set_hit: function(v) { return CS.Call(3, 223, 4, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$NavMeshHit);

// UnityEngine.NavMeshTriangulation
var UnityEngine$NavMeshTriangulation = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.NavMeshTriangulation",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    fields: {
        vertices: {
            get: function() { return CS.Call(0, 224, 0, false, this); }, 
            set: function(v) { return CS.Call(1, 224, 0, false, this, v); }
        },
        indices: {
            get: function() { return CS.Call(0, 224, 1, false, this); }, 
            set: function(v) { return CS.Call(1, 224, 1, false, this, v); }
        },
        areas: {
            get: function() { return CS.Call(0, 224, 2, false, this); }, 
            set: function(v) { return CS.Call(1, 224, 2, false, this, v); }
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 224, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$NavMeshTriangulation);

// UnityEngine.NavMesh
var UnityEngine$NavMesh = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.NavMesh",
    Kind: "Class",
    baseTypeName: "System.Object",
    staticFields: {
        AllAreas: {
            get: function() { return CS.Call(0, 225, 0, true); }, 
            set: function(v) { return CS.Call(1, 225, 0, true, v); }
        },
    },
    staticDefinition: {
        get_avoidancePredictionTime: function() { return CS.Call(2, 225, 0, true); },
        set_avoidancePredictionTime: function(v) { return CS.Call(3, 225, 0, true, v); },
        get_pathfindingIterationsPerFrame: function() { return CS.Call(2, 225, 1, true); },
        set_pathfindingIterationsPerFrame: function(v) { return CS.Call(3, 225, 1, true, v); },
        CalculatePath: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Int32*/, a3/*NavMeshPath*/) { 
            return CS.Call(4, 225, 0, true, a0, a1, a2, a3); //Ret: Boolean
        },
        CalculateTriangulation: function() { 
            return CS.Call(4, 225, 1, true); //Ret: NavMeshTriangulation
        },
        FindClosestEdge: function(a0/*Vector3*/, a1/*NavMeshHit&*/, a2/*Int32*/) { 
            return CS.Call(4, 225, 2, true, a0, a1, a2); //Ret: Boolean
        },
        GetAreaCost: function(a0/*Int32*/) { 
            return CS.Call(4, 225, 3, true, a0); //Ret: Single
        },
        GetAreaFromName: function(a0/*String*/) { 
            return CS.Call(4, 225, 4, true, a0); //Ret: Int32
        },
        Raycast: function(a0/*Vector3*/, a1/*Vector3*/, a2/*NavMeshHit&*/, a3/*Int32*/) { 
            return CS.Call(4, 225, 5, true, a0, a1, a2, a3); //Ret: Boolean
        },
        SamplePosition: function(a0/*Vector3*/, a1/*NavMeshHit&*/, a2/*Single*/, a3/*Int32*/) { 
            return CS.Call(4, 225, 6, true, a0, a1, a2, a3); //Ret: Boolean
        },
        SetAreaCost: function(a0/*Int32*/, a1/*Single*/) { 
            return CS.Call(4, 225, 7, true, a0, a1); //Ret: Void
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 225, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$NavMesh);

// UnityEngine.NavMeshObstacle
var UnityEngine$NavMeshObstacle = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.NavMeshObstacle",
    Kind: "Class",
    baseTypeName: "UnityEngine.Behaviour",
    definition: {
        ctor: function() { CS.Call(5, 226, 0, true, this); },
        get_height: function() { return CS.Call(2, 226, 0, false, this); },
        set_height: function(v) { return CS.Call(3, 226, 0, false, this, v); },
        get_radius: function() { return CS.Call(2, 226, 1, false, this); },
        set_radius: function(v) { return CS.Call(3, 226, 1, false, this, v); },
        get_velocity: function() { return CS.Call(2, 226, 2, false, this); },
        set_velocity: function(v) { return CS.Call(3, 226, 2, false, this, v); },
        get_carving: function() { return CS.Call(2, 226, 3, false, this); },
        set_carving: function(v) { return CS.Call(3, 226, 3, false, this, v); },
        get_carveOnlyStationary: function() { return CS.Call(2, 226, 4, false, this); },
        set_carveOnlyStationary: function(v) { return CS.Call(3, 226, 4, false, this, v); },
        get_carvingMoveThreshold: function() { return CS.Call(2, 226, 5, false, this); },
        set_carvingMoveThreshold: function(v) { return CS.Call(3, 226, 5, false, this, v); },
        get_carvingTimeToStationary: function() { return CS.Call(2, 226, 6, false, this); },
        set_carvingTimeToStationary: function(v) { return CS.Call(3, 226, 6, false, this, v); },
        get_shape: function() { return CS.Call(2, 226, 7, false, this); },
        set_shape: function(v) { return CS.Call(3, 226, 7, false, this, v); },
        get_center: function() { return CS.Call(2, 226, 8, false, this); },
        set_center: function(v) { return CS.Call(3, 226, 8, false, this, v); },
        get_size: function() { return CS.Call(2, 226, 9, false, this); },
        set_size: function(v) { return CS.Call(3, 226, 9, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$NavMeshObstacle);

// UnityEngine.NavMeshPath
var UnityEngine$NavMeshPath = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.NavMeshPath",
    Kind: "Class",
    baseTypeName: "System.Object",
    definition: {
        ctor: function() { CS.Call(5, 227, 0, true, this); },
        get_corners: function() { return CS.Call(2, 227, 0, false, this); },
        set_corners: function(v) { return CS.Call(3, 227, 0, false, this, v); },
        get_status: function() { return CS.Call(2, 227, 1, false, this); },
        set_status: function(v) { return CS.Call(3, 227, 1, false, this, v); },
        ClearCorners: function() { 
            return CS.Call(4, 227, 0, false, this); //Ret: Void
        },
        GetCornersNonAlloc: function(a0/*Vector3[]*/) { 
            return CS.Call(4, 227, 1, false, this, a0); //Ret: Int32
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$NavMeshPath);

// UnityEngine.OffMeshLinkData
var UnityEngine$OffMeshLinkData = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.OffMeshLinkData",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    definition: {
        ctor: function() { CS.Call(5, 228, 0, true, this); },
        get_valid: function() { return CS.Call(2, 228, 0, false, this); },
        set_valid: function(v) { return CS.Call(3, 228, 0, false, this, v); },
        get_activated: function() { return CS.Call(2, 228, 1, false, this); },
        set_activated: function(v) { return CS.Call(3, 228, 1, false, this, v); },
        get_linkType: function() { return CS.Call(2, 228, 2, false, this); },
        set_linkType: function(v) { return CS.Call(3, 228, 2, false, this, v); },
        get_startPos: function() { return CS.Call(2, 228, 3, false, this); },
        set_startPos: function(v) { return CS.Call(3, 228, 3, false, this, v); },
        get_endPos: function() { return CS.Call(2, 228, 4, false, this); },
        set_endPos: function(v) { return CS.Call(3, 228, 4, false, this, v); },
        get_offMeshLink: function() { return CS.Call(2, 228, 5, false, this); },
        set_offMeshLink: function(v) { return CS.Call(3, 228, 5, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$OffMeshLinkData);

// UnityEngine.OffMeshLink
var UnityEngine$OffMeshLink = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.OffMeshLink",
    Kind: "Class",
    baseTypeName: "UnityEngine.Component",
    definition: {
        ctor: function() { CS.Call(5, 229, 0, true, this); },
        get_activated: function() { return CS.Call(2, 229, 0, false, this); },
        set_activated: function(v) { return CS.Call(3, 229, 0, false, this, v); },
        get_occupied: function() { return CS.Call(2, 229, 1, false, this); },
        set_occupied: function(v) { return CS.Call(3, 229, 1, false, this, v); },
        get_costOverride: function() { return CS.Call(2, 229, 2, false, this); },
        set_costOverride: function(v) { return CS.Call(3, 229, 2, false, this, v); },
        get_biDirectional: function() { return CS.Call(2, 229, 3, false, this); },
        set_biDirectional: function(v) { return CS.Call(3, 229, 3, false, this, v); },
        get_area: function() { return CS.Call(2, 229, 4, false, this); },
        set_area: function(v) { return CS.Call(3, 229, 4, false, this, v); },
        get_autoUpdatePositions: function() { return CS.Call(2, 229, 5, false, this); },
        set_autoUpdatePositions: function(v) { return CS.Call(3, 229, 5, false, this, v); },
        get_startTransform: function() { return CS.Call(2, 229, 6, false, this); },
        set_startTransform: function(v) { return CS.Call(3, 229, 6, false, this, v); },
        get_endTransform: function() { return CS.Call(2, 229, 7, false, this); },
        set_endTransform: function(v) { return CS.Call(3, 229, 7, false, this, v); },
        UpdatePositions: function() { 
            return CS.Call(4, 229, 0, false, this); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$OffMeshLink);

// UnityEngine.AudioConfiguration
var UnityEngine$AudioConfiguration = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.AudioConfiguration",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    fields: {
        speakerMode: {
            get: function() { return CS.Call(0, 230, 0, false, this); }, 
            set: function(v) { return CS.Call(1, 230, 0, false, this, v); }
        },
        dspBufferSize: {
            get: function() { return CS.Call(0, 230, 1, false, this); }, 
            set: function(v) { return CS.Call(1, 230, 1, false, this, v); }
        },
        sampleRate: {
            get: function() { return CS.Call(0, 230, 2, false, this); }, 
            set: function(v) { return CS.Call(1, 230, 2, false, this, v); }
        },
        numRealVoices: {
            get: function() { return CS.Call(0, 230, 3, false, this); }, 
            set: function(v) { return CS.Call(1, 230, 3, false, this, v); }
        },
        numVirtualVoices: {
            get: function() { return CS.Call(0, 230, 4, false, this); }, 
            set: function(v) { return CS.Call(1, 230, 4, false, this, v); }
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 230, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$AudioConfiguration);

// UnityEngine.AudioSettings
var UnityEngine$AudioSettings = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.AudioSettings",
    Kind: "Class",
    baseTypeName: "System.Object",
    staticDefinition: {
        get_driverCapabilities: function() { return CS.Call(2, 231, 0, true); },
        set_driverCapabilities: function(v) { return CS.Call(3, 231, 0, true, v); },
        get_speakerMode: function() { return CS.Call(2, 231, 1, true); },
        set_speakerMode: function(v) { return CS.Call(3, 231, 1, true, v); },
        get_dspTime: function() { return CS.Call(2, 231, 2, true); },
        set_dspTime: function(v) { return CS.Call(3, 231, 2, true, v); },
        get_outputSampleRate: function() { return CS.Call(2, 231, 3, true); },
        set_outputSampleRate: function(v) { return CS.Call(3, 231, 3, true, v); },
        add_OnAudioConfigurationChanged: function(a0/*AudioConfigurationChangeHandler*/) { 
            return CS.Call(4, 231, 0, true, a0); //Ret: Void
        },
        GetConfiguration: function() { 
            return CS.Call(4, 231, 1, true); //Ret: AudioConfiguration
        },
        GetDSPBufferSize: function(a0/*Int32&*/, a1/*Int32&*/) { 
            return CS.Call(4, 231, 2, true, a0, a1); //Ret: Void
        },
        remove_OnAudioConfigurationChanged: function(a0/*AudioConfigurationChangeHandler*/) { 
            return CS.Call(4, 231, 3, true, a0); //Ret: Void
        },
        Reset: function(a0/*AudioConfiguration*/) { 
            return CS.Call(4, 231, 4, true, a0); //Ret: Boolean
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 231, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$AudioSettings);

// UnityEngine.AudioClip
var UnityEngine$AudioClip = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.AudioClip",
    Kind: "Class",
    baseTypeName: "UnityEngine.Object",
    staticDefinition: {
        Create$$String$$Int32$$Int32$$Int32$$Boolean$$PCMReaderCallback$$PCMSetPositionCallback: function(a0/*String*/, a1/*Int32*/, a2/*Int32*/, a3/*Int32*/, a4/*Boolean*/, a5/*PCMReaderCallback*/, a6/*PCMSetPositionCallback*/) { 
            return CS.Call(4, 232, 4, true, a0, a1, a2, a3, a4, a5, a6); //Ret: AudioClip
        },
        Create$$String$$Int32$$Int32$$Int32$$Boolean$$PCMReaderCallback: function(a0/*String*/, a1/*Int32*/, a2/*Int32*/, a3/*Int32*/, a4/*Boolean*/, a5/*PCMReaderCallback*/) { 
            return CS.Call(4, 232, 5, true, a0, a1, a2, a3, a4, a5); //Ret: AudioClip
        },
        Create$$String$$Int32$$Int32$$Int32$$Boolean: function(a0/*String*/, a1/*Int32*/, a2/*Int32*/, a3/*Int32*/, a4/*Boolean*/) { 
            return CS.Call(4, 232, 6, true, a0, a1, a2, a3, a4); //Ret: AudioClip
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 232, 0, true, this); },
        get_length: function() { return CS.Call(2, 232, 0, false, this); },
        set_length: function(v) { return CS.Call(3, 232, 0, false, this, v); },
        get_samples: function() { return CS.Call(2, 232, 1, false, this); },
        set_samples: function(v) { return CS.Call(3, 232, 1, false, this, v); },
        get_channels: function() { return CS.Call(2, 232, 2, false, this); },
        set_channels: function(v) { return CS.Call(3, 232, 2, false, this, v); },
        get_frequency: function() { return CS.Call(2, 232, 3, false, this); },
        set_frequency: function(v) { return CS.Call(3, 232, 3, false, this, v); },
        get_loadType: function() { return CS.Call(2, 232, 4, false, this); },
        set_loadType: function(v) { return CS.Call(3, 232, 4, false, this, v); },
        get_preloadAudioData: function() { return CS.Call(2, 232, 5, false, this); },
        set_preloadAudioData: function(v) { return CS.Call(3, 232, 5, false, this, v); },
        get_loadState: function() { return CS.Call(2, 232, 6, false, this); },
        set_loadState: function(v) { return CS.Call(3, 232, 6, false, this, v); },
        get_loadInBackground: function() { return CS.Call(2, 232, 7, false, this); },
        set_loadInBackground: function(v) { return CS.Call(3, 232, 7, false, this, v); },
        GetData: function(a0/*Single[]*/, a1/*Int32*/) { 
            return CS.Call(4, 232, 0, false, this, a0, a1); //Ret: Boolean
        },
        LoadAudioData: function() { 
            return CS.Call(4, 232, 1, false, this); //Ret: Boolean
        },
        SetData: function(a0/*Single[]*/, a1/*Int32*/) { 
            return CS.Call(4, 232, 2, false, this, a0, a1); //Ret: Boolean
        },
        UnloadAudioData: function() { 
            return CS.Call(4, 232, 3, false, this); //Ret: Boolean
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$AudioClip);

// UnityEngine.AudioListener
var UnityEngine$AudioListener = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.AudioListener",
    Kind: "Class",
    baseTypeName: "UnityEngine.Behaviour",
    staticDefinition: {
        get_volume: function() { return CS.Call(2, 233, 0, true); },
        set_volume: function(v) { return CS.Call(3, 233, 0, true, v); },
        get_pause: function() { return CS.Call(2, 233, 1, true); },
        set_pause: function(v) { return CS.Call(3, 233, 1, true, v); },
        GetOutputData$$Single$Array$$Int32: function(a0/*Single[]*/, a1/*Int32*/) { 
            return CS.Call(4, 233, 0, true, a0, a1); //Ret: Void
        },
        GetSpectrumData$$Single$Array$$Int32$$FFTWindow: function(a0/*Single[]*/, a1/*Int32*/, a2/*FFTWindow*/) { 
            return CS.Call(4, 233, 1, true, a0, a1, a2); //Ret: Void
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 233, 0, true, this); },
        get_velocityUpdateMode: function() { return CS.Call(2, 233, 2, false, this); },
        set_velocityUpdateMode: function(v) { return CS.Call(3, 233, 2, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$AudioListener);

// UnityEngine.AudioSource
var UnityEngine$AudioSource = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.AudioSource",
    Kind: "Class",
    baseTypeName: "UnityEngine.Behaviour",
    staticDefinition: {
        PlayClipAtPoint$$AudioClip$$Vector3$$Single: function(a0/*AudioClip*/, a1/*Vector3*/, a2/*Single*/) { 
            return CS.Call(4, 234, 17, true, a0, a1, a2); //Ret: Void
        },
        PlayClipAtPoint$$AudioClip$$Vector3: function(a0/*AudioClip*/, a1/*Vector3*/) { 
            return CS.Call(4, 234, 18, true, a0, a1); //Ret: Void
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 234, 0, true, this); },
        get_volume: function() { return CS.Call(2, 234, 0, false, this); },
        set_volume: function(v) { return CS.Call(3, 234, 0, false, this, v); },
        get_pitch: function() { return CS.Call(2, 234, 1, false, this); },
        set_pitch: function(v) { return CS.Call(3, 234, 1, false, this, v); },
        get_time: function() { return CS.Call(2, 234, 2, false, this); },
        set_time: function(v) { return CS.Call(3, 234, 2, false, this, v); },
        get_timeSamples: function() { return CS.Call(2, 234, 3, false, this); },
        set_timeSamples: function(v) { return CS.Call(3, 234, 3, false, this, v); },
        get_clip: function() { return CS.Call(2, 234, 4, false, this); },
        set_clip: function(v) { return CS.Call(3, 234, 4, false, this, v); },
        get_outputAudioMixerGroup: function() { return CS.Call(2, 234, 5, false, this); },
        set_outputAudioMixerGroup: function(v) { return CS.Call(3, 234, 5, false, this, v); },
        get_isPlaying: function() { return CS.Call(2, 234, 6, false, this); },
        set_isPlaying: function(v) { return CS.Call(3, 234, 6, false, this, v); },
        get_isVirtual: function() { return CS.Call(2, 234, 7, false, this); },
        set_isVirtual: function(v) { return CS.Call(3, 234, 7, false, this, v); },
        get_loop: function() { return CS.Call(2, 234, 8, false, this); },
        set_loop: function(v) { return CS.Call(3, 234, 8, false, this, v); },
        get_ignoreListenerVolume: function() { return CS.Call(2, 234, 9, false, this); },
        set_ignoreListenerVolume: function(v) { return CS.Call(3, 234, 9, false, this, v); },
        get_playOnAwake: function() { return CS.Call(2, 234, 10, false, this); },
        set_playOnAwake: function(v) { return CS.Call(3, 234, 10, false, this, v); },
        get_ignoreListenerPause: function() { return CS.Call(2, 234, 11, false, this); },
        set_ignoreListenerPause: function(v) { return CS.Call(3, 234, 11, false, this, v); },
        get_velocityUpdateMode: function() { return CS.Call(2, 234, 12, false, this); },
        set_velocityUpdateMode: function(v) { return CS.Call(3, 234, 12, false, this, v); },
        get_panStereo: function() { return CS.Call(2, 234, 13, false, this); },
        set_panStereo: function(v) { return CS.Call(3, 234, 13, false, this, v); },
        get_spatialBlend: function() { return CS.Call(2, 234, 14, false, this); },
        set_spatialBlend: function(v) { return CS.Call(3, 234, 14, false, this, v); },
        get_spatialize: function() { return CS.Call(2, 234, 15, false, this); },
        set_spatialize: function(v) { return CS.Call(3, 234, 15, false, this, v); },
        get_reverbZoneMix: function() { return CS.Call(2, 234, 16, false, this); },
        set_reverbZoneMix: function(v) { return CS.Call(3, 234, 16, false, this, v); },
        get_bypassEffects: function() { return CS.Call(2, 234, 17, false, this); },
        set_bypassEffects: function(v) { return CS.Call(3, 234, 17, false, this, v); },
        get_bypassListenerEffects: function() { return CS.Call(2, 234, 18, false, this); },
        set_bypassListenerEffects: function(v) { return CS.Call(3, 234, 18, false, this, v); },
        get_bypassReverbZones: function() { return CS.Call(2, 234, 19, false, this); },
        set_bypassReverbZones: function(v) { return CS.Call(3, 234, 19, false, this, v); },
        get_dopplerLevel: function() { return CS.Call(2, 234, 20, false, this); },
        set_dopplerLevel: function(v) { return CS.Call(3, 234, 20, false, this, v); },
        get_spread: function() { return CS.Call(2, 234, 21, false, this); },
        set_spread: function(v) { return CS.Call(3, 234, 21, false, this, v); },
        get_priority: function() { return CS.Call(2, 234, 22, false, this); },
        set_priority: function(v) { return CS.Call(3, 234, 22, false, this, v); },
        get_mute: function() { return CS.Call(2, 234, 23, false, this); },
        set_mute: function(v) { return CS.Call(3, 234, 23, false, this, v); },
        get_minDistance: function() { return CS.Call(2, 234, 24, false, this); },
        set_minDistance: function(v) { return CS.Call(3, 234, 24, false, this, v); },
        get_maxDistance: function() { return CS.Call(2, 234, 25, false, this); },
        set_maxDistance: function(v) { return CS.Call(3, 234, 25, false, this, v); },
        get_rolloffMode: function() { return CS.Call(2, 234, 26, false, this); },
        set_rolloffMode: function(v) { return CS.Call(3, 234, 26, false, this, v); },
        GetCustomCurve: function(a0/*AudioSourceCurveType*/) { 
            return CS.Call(4, 234, 0, false, this, a0); //Ret: AnimationCurve
        },
        GetOutputData$$Single$Array$$Int32: function(a0/*Single[]*/, a1/*Int32*/) { 
            return CS.Call(4, 234, 1, false, this, a0, a1); //Ret: Void
        },
        GetSpatializerFloat: function(a0/*Int32*/, a1/*Single&*/) { 
            return CS.Call(4, 234, 2, false, this, a0, a1); //Ret: Boolean
        },
        GetSpectrumData$$Single$Array$$Int32$$FFTWindow: function(a0/*Single[]*/, a1/*Int32*/, a2/*FFTWindow*/) { 
            return CS.Call(4, 234, 3, false, this, a0, a1, a2); //Ret: Void
        },
        Pause: function() { 
            return CS.Call(4, 234, 4, false, this); //Ret: Void
        },
        Play$$UInt64: function(a0/*UInt64*/) { 
            return CS.Call(4, 234, 5, false, this, a0); //Ret: Void
        },
        Play: function() { 
            return CS.Call(4, 234, 6, false, this); //Ret: Void
        },
        PlayDelayed: function(a0/*Single*/) { 
            return CS.Call(4, 234, 7, false, this, a0); //Ret: Void
        },
        PlayOneShot$$AudioClip$$Single: function(a0/*AudioClip*/, a1/*Single*/) { 
            return CS.Call(4, 234, 8, false, this, a0, a1); //Ret: Void
        },
        PlayOneShot$$AudioClip: function(a0/*AudioClip*/) { 
            return CS.Call(4, 234, 9, false, this, a0); //Ret: Void
        },
        PlayScheduled: function(a0/*Double*/) { 
            return CS.Call(4, 234, 10, false, this, a0); //Ret: Void
        },
        SetCustomCurve: function(a0/*AudioSourceCurveType*/, a1/*AnimationCurve*/) { 
            return CS.Call(4, 234, 11, false, this, a0, a1); //Ret: Void
        },
        SetScheduledEndTime: function(a0/*Double*/) { 
            return CS.Call(4, 234, 12, false, this, a0); //Ret: Void
        },
        SetScheduledStartTime: function(a0/*Double*/) { 
            return CS.Call(4, 234, 13, false, this, a0); //Ret: Void
        },
        SetSpatializerFloat: function(a0/*Int32*/, a1/*Single*/) { 
            return CS.Call(4, 234, 14, false, this, a0, a1); //Ret: Boolean
        },
        Stop: function() { 
            return CS.Call(4, 234, 15, false, this); //Ret: Void
        },
        UnPause: function() { 
            return CS.Call(4, 234, 16, false, this); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$AudioSource);

// UnityEngine.AudioReverbZone
var UnityEngine$AudioReverbZone = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.AudioReverbZone",
    Kind: "Class",
    baseTypeName: "UnityEngine.Behaviour",
    definition: {
        ctor: function() { CS.Call(5, 235, 0, true, this); },
        get_minDistance: function() { return CS.Call(2, 235, 0, false, this); },
        set_minDistance: function(v) { return CS.Call(3, 235, 0, false, this, v); },
        get_maxDistance: function() { return CS.Call(2, 235, 1, false, this); },
        set_maxDistance: function(v) { return CS.Call(3, 235, 1, false, this, v); },
        get_reverbPreset: function() { return CS.Call(2, 235, 2, false, this); },
        set_reverbPreset: function(v) { return CS.Call(3, 235, 2, false, this, v); },
        get_room: function() { return CS.Call(2, 235, 3, false, this); },
        set_room: function(v) { return CS.Call(3, 235, 3, false, this, v); },
        get_roomHF: function() { return CS.Call(2, 235, 4, false, this); },
        set_roomHF: function(v) { return CS.Call(3, 235, 4, false, this, v); },
        get_roomLF: function() { return CS.Call(2, 235, 5, false, this); },
        set_roomLF: function(v) { return CS.Call(3, 235, 5, false, this, v); },
        get_decayTime: function() { return CS.Call(2, 235, 6, false, this); },
        set_decayTime: function(v) { return CS.Call(3, 235, 6, false, this, v); },
        get_decayHFRatio: function() { return CS.Call(2, 235, 7, false, this); },
        set_decayHFRatio: function(v) { return CS.Call(3, 235, 7, false, this, v); },
        get_reflections: function() { return CS.Call(2, 235, 8, false, this); },
        set_reflections: function(v) { return CS.Call(3, 235, 8, false, this, v); },
        get_reflectionsDelay: function() { return CS.Call(2, 235, 9, false, this); },
        set_reflectionsDelay: function(v) { return CS.Call(3, 235, 9, false, this, v); },
        get_reverb: function() { return CS.Call(2, 235, 10, false, this); },
        set_reverb: function(v) { return CS.Call(3, 235, 10, false, this, v); },
        get_reverbDelay: function() { return CS.Call(2, 235, 11, false, this); },
        set_reverbDelay: function(v) { return CS.Call(3, 235, 11, false, this, v); },
        get_HFReference: function() { return CS.Call(2, 235, 12, false, this); },
        set_HFReference: function(v) { return CS.Call(3, 235, 12, false, this, v); },
        get_LFReference: function() { return CS.Call(2, 235, 13, false, this); },
        set_LFReference: function(v) { return CS.Call(3, 235, 13, false, this, v); },
        get_roomRolloffFactor: function() { return CS.Call(2, 235, 14, false, this); },
        set_roomRolloffFactor: function(v) { return CS.Call(3, 235, 14, false, this, v); },
        get_diffusion: function() { return CS.Call(2, 235, 15, false, this); },
        set_diffusion: function(v) { return CS.Call(3, 235, 15, false, this, v); },
        get_density: function() { return CS.Call(2, 235, 16, false, this); },
        set_density: function(v) { return CS.Call(3, 235, 16, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$AudioReverbZone);

// UnityEngine.AudioLowPassFilter
var UnityEngine$AudioLowPassFilter = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.AudioLowPassFilter",
    Kind: "Class",
    baseTypeName: "UnityEngine.Behaviour",
    definition: {
        ctor: function() { CS.Call(5, 236, 0, true, this); },
        get_cutoffFrequency: function() { return CS.Call(2, 236, 0, false, this); },
        set_cutoffFrequency: function(v) { return CS.Call(3, 236, 0, false, this, v); },
        get_customCutoffCurve: function() { return CS.Call(2, 236, 1, false, this); },
        set_customCutoffCurve: function(v) { return CS.Call(3, 236, 1, false, this, v); },
        get_lowpassResonanceQ: function() { return CS.Call(2, 236, 2, false, this); },
        set_lowpassResonanceQ: function(v) { return CS.Call(3, 236, 2, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$AudioLowPassFilter);

// UnityEngine.AudioHighPassFilter
var UnityEngine$AudioHighPassFilter = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.AudioHighPassFilter",
    Kind: "Class",
    baseTypeName: "UnityEngine.Behaviour",
    definition: {
        ctor: function() { CS.Call(5, 237, 0, true, this); },
        get_cutoffFrequency: function() { return CS.Call(2, 237, 0, false, this); },
        set_cutoffFrequency: function(v) { return CS.Call(3, 237, 0, false, this, v); },
        get_highpassResonanceQ: function() { return CS.Call(2, 237, 1, false, this); },
        set_highpassResonanceQ: function(v) { return CS.Call(3, 237, 1, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$AudioHighPassFilter);

// UnityEngine.AudioDistortionFilter
var UnityEngine$AudioDistortionFilter = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.AudioDistortionFilter",
    Kind: "Class",
    baseTypeName: "UnityEngine.Behaviour",
    definition: {
        ctor: function() { CS.Call(5, 238, 0, true, this); },
        get_distortionLevel: function() { return CS.Call(2, 238, 0, false, this); },
        set_distortionLevel: function(v) { return CS.Call(3, 238, 0, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$AudioDistortionFilter);

// UnityEngine.AudioEchoFilter
var UnityEngine$AudioEchoFilter = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.AudioEchoFilter",
    Kind: "Class",
    baseTypeName: "UnityEngine.Behaviour",
    definition: {
        ctor: function() { CS.Call(5, 239, 0, true, this); },
        get_delay: function() { return CS.Call(2, 239, 0, false, this); },
        set_delay: function(v) { return CS.Call(3, 239, 0, false, this, v); },
        get_decayRatio: function() { return CS.Call(2, 239, 1, false, this); },
        set_decayRatio: function(v) { return CS.Call(3, 239, 1, false, this, v); },
        get_dryMix: function() { return CS.Call(2, 239, 2, false, this); },
        set_dryMix: function(v) { return CS.Call(3, 239, 2, false, this, v); },
        get_wetMix: function() { return CS.Call(2, 239, 3, false, this); },
        set_wetMix: function(v) { return CS.Call(3, 239, 3, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$AudioEchoFilter);

// UnityEngine.AudioChorusFilter
var UnityEngine$AudioChorusFilter = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.AudioChorusFilter",
    Kind: "Class",
    baseTypeName: "UnityEngine.Behaviour",
    definition: {
        ctor: function() { CS.Call(5, 240, 0, true, this); },
        get_dryMix: function() { return CS.Call(2, 240, 0, false, this); },
        set_dryMix: function(v) { return CS.Call(3, 240, 0, false, this, v); },
        get_wetMix1: function() { return CS.Call(2, 240, 1, false, this); },
        set_wetMix1: function(v) { return CS.Call(3, 240, 1, false, this, v); },
        get_wetMix2: function() { return CS.Call(2, 240, 2, false, this); },
        set_wetMix2: function(v) { return CS.Call(3, 240, 2, false, this, v); },
        get_wetMix3: function() { return CS.Call(2, 240, 3, false, this); },
        set_wetMix3: function(v) { return CS.Call(3, 240, 3, false, this, v); },
        get_delay: function() { return CS.Call(2, 240, 4, false, this); },
        set_delay: function(v) { return CS.Call(3, 240, 4, false, this, v); },
        get_rate: function() { return CS.Call(2, 240, 5, false, this); },
        set_rate: function(v) { return CS.Call(3, 240, 5, false, this, v); },
        get_depth: function() { return CS.Call(2, 240, 6, false, this); },
        set_depth: function(v) { return CS.Call(3, 240, 6, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$AudioChorusFilter);

// UnityEngine.AudioReverbFilter
var UnityEngine$AudioReverbFilter = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.AudioReverbFilter",
    Kind: "Class",
    baseTypeName: "UnityEngine.Behaviour",
    definition: {
        ctor: function() { CS.Call(5, 241, 0, true, this); },
        get_reverbPreset: function() { return CS.Call(2, 241, 0, false, this); },
        set_reverbPreset: function(v) { return CS.Call(3, 241, 0, false, this, v); },
        get_dryLevel: function() { return CS.Call(2, 241, 1, false, this); },
        set_dryLevel: function(v) { return CS.Call(3, 241, 1, false, this, v); },
        get_room: function() { return CS.Call(2, 241, 2, false, this); },
        set_room: function(v) { return CS.Call(3, 241, 2, false, this, v); },
        get_roomHF: function() { return CS.Call(2, 241, 3, false, this); },
        set_roomHF: function(v) { return CS.Call(3, 241, 3, false, this, v); },
        get_roomRolloff: function() { return CS.Call(2, 241, 4, false, this); },
        set_roomRolloff: function(v) { return CS.Call(3, 241, 4, false, this, v); },
        get_decayTime: function() { return CS.Call(2, 241, 5, false, this); },
        set_decayTime: function(v) { return CS.Call(3, 241, 5, false, this, v); },
        get_decayHFRatio: function() { return CS.Call(2, 241, 6, false, this); },
        set_decayHFRatio: function(v) { return CS.Call(3, 241, 6, false, this, v); },
        get_reflectionsLevel: function() { return CS.Call(2, 241, 7, false, this); },
        set_reflectionsLevel: function(v) { return CS.Call(3, 241, 7, false, this, v); },
        get_reflectionsDelay: function() { return CS.Call(2, 241, 8, false, this); },
        set_reflectionsDelay: function(v) { return CS.Call(3, 241, 8, false, this, v); },
        get_reverbLevel: function() { return CS.Call(2, 241, 9, false, this); },
        set_reverbLevel: function(v) { return CS.Call(3, 241, 9, false, this, v); },
        get_reverbDelay: function() { return CS.Call(2, 241, 10, false, this); },
        set_reverbDelay: function(v) { return CS.Call(3, 241, 10, false, this, v); },
        get_diffusion: function() { return CS.Call(2, 241, 11, false, this); },
        set_diffusion: function(v) { return CS.Call(3, 241, 11, false, this, v); },
        get_density: function() { return CS.Call(2, 241, 12, false, this); },
        set_density: function(v) { return CS.Call(3, 241, 12, false, this, v); },
        get_hfReference: function() { return CS.Call(2, 241, 13, false, this); },
        set_hfReference: function(v) { return CS.Call(3, 241, 13, false, this, v); },
        get_roomLF: function() { return CS.Call(2, 241, 14, false, this); },
        set_roomLF: function(v) { return CS.Call(3, 241, 14, false, this, v); },
        get_lfReference: function() { return CS.Call(2, 241, 15, false, this); },
        set_lfReference: function(v) { return CS.Call(3, 241, 15, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$AudioReverbFilter);

// UnityEngine.Microphone
var UnityEngine$Microphone = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Microphone",
    Kind: "Class",
    baseTypeName: "System.Object",
    staticDefinition: {
        get_devices: function() { return CS.Call(2, 242, 0, true); },
        set_devices: function(v) { return CS.Call(3, 242, 0, true, v); },
        End: function(a0/*String*/) { 
            return CS.Call(4, 242, 0, true, a0); //Ret: Void
        },
        GetDeviceCaps: function(a0/*String*/, a1/*Int32&*/, a2/*Int32&*/) { 
            return CS.Call(4, 242, 1, true, a0, a1, a2); //Ret: Void
        },
        GetPosition: function(a0/*String*/) { 
            return CS.Call(4, 242, 2, true, a0); //Ret: Int32
        },
        IsRecording: function(a0/*String*/) { 
            return CS.Call(4, 242, 3, true, a0); //Ret: Boolean
        },
        Start: function(a0/*String*/, a1/*Boolean*/, a2/*Int32*/, a3/*Int32*/) { 
            return CS.Call(4, 242, 4, true, a0, a1, a2, a3); //Ret: AudioClip
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 242, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Microphone);

// UnityEngine.WebCamDevice
var UnityEngine$WebCamDevice = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.WebCamDevice",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    definition: {
        ctor: function() { CS.Call(5, 243, 0, true, this); },
        get_name: function() { return CS.Call(2, 243, 0, false, this); },
        set_name: function(v) { return CS.Call(3, 243, 0, false, this, v); },
        get_isFrontFacing: function() { return CS.Call(2, 243, 1, false, this); },
        set_isFrontFacing: function(v) { return CS.Call(3, 243, 1, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$WebCamDevice);

// UnityEngine.WebCamTexture
var UnityEngine$WebCamTexture = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.WebCamTexture",
    Kind: "Class",
    baseTypeName: "UnityEngine.Texture",
    staticDefinition: {
        get_devices: function() { return CS.Call(2, 244, 5, true); },
        set_devices: function(v) { return CS.Call(3, 244, 5, true, v); },
    },
    definition: {
        ctor$$String$$Int32$$Int32$$Int32: function(a0, a1, a2, a3) { CS.Call(5, 244, 0, true, this, a0, a1, a2, a3); },
        ctor$$String$$Int32$$Int32: function(a0, a1, a2) { CS.Call(5, 244, 1, true, this, a0, a1, a2); },
        ctor$$String: function(a0) { CS.Call(5, 244, 2, true, this, a0); },
        ctor$$Int32$$Int32$$Int32: function(a0, a1, a2) { CS.Call(5, 244, 3, true, this, a0, a1, a2); },
        ctor$$Int32$$Int32: function(a0, a1) { CS.Call(5, 244, 4, true, this, a0, a1); },
        ctor: function() { CS.Call(5, 244, 5, true, this); },
        get_isPlaying: function() { return CS.Call(2, 244, 0, false, this); },
        set_isPlaying: function(v) { return CS.Call(3, 244, 0, false, this, v); },
        get_deviceName: function() { return CS.Call(2, 244, 1, false, this); },
        set_deviceName: function(v) { return CS.Call(3, 244, 1, false, this, v); },
        get_requestedFPS: function() { return CS.Call(2, 244, 2, false, this); },
        set_requestedFPS: function(v) { return CS.Call(3, 244, 2, false, this, v); },
        get_requestedWidth: function() { return CS.Call(2, 244, 3, false, this); },
        set_requestedWidth: function(v) { return CS.Call(3, 244, 3, false, this, v); },
        get_requestedHeight: function() { return CS.Call(2, 244, 4, false, this); },
        set_requestedHeight: function(v) { return CS.Call(3, 244, 4, false, this, v); },
        get_videoRotationAngle: function() { return CS.Call(2, 244, 6, false, this); },
        set_videoRotationAngle: function(v) { return CS.Call(3, 244, 6, false, this, v); },
        get_videoVerticallyMirrored: function() { return CS.Call(2, 244, 7, false, this); },
        set_videoVerticallyMirrored: function(v) { return CS.Call(3, 244, 7, false, this, v); },
        get_didUpdateThisFrame: function() { return CS.Call(2, 244, 8, false, this); },
        set_didUpdateThisFrame: function(v) { return CS.Call(3, 244, 8, false, this, v); },
        GetPixel: function(a0/*Int32*/, a1/*Int32*/) { 
            return CS.Call(4, 244, 0, false, this, a0, a1); //Ret: Color
        },
        GetPixels$$Int32$$Int32$$Int32$$Int32: function(a0/*Int32*/, a1/*Int32*/, a2/*Int32*/, a3/*Int32*/) { 
            return CS.Call(4, 244, 1, false, this, a0, a1, a2, a3); //Ret: Color[]
        },
        GetPixels: function() { 
            return CS.Call(4, 244, 2, false, this); //Ret: Color[]
        },
        GetPixels32$$Color32$Array: function(a0/*Color32[]*/) { 
            return CS.Call(4, 244, 3, false, this, a0); //Ret: Color32[]
        },
        GetPixels32: function() { 
            return CS.Call(4, 244, 4, false, this); //Ret: Color32[]
        },
        Pause: function() { 
            return CS.Call(4, 244, 5, false, this); //Ret: Void
        },
        Play: function() { 
            return CS.Call(4, 244, 6, false, this); //Ret: Void
        },
        Stop: function() { 
            return CS.Call(4, 244, 7, false, this); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$WebCamTexture);

// UnityEngine.AnimationClipPair
var UnityEngine$AnimationClipPair = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.AnimationClipPair",
    Kind: "Class",
    baseTypeName: "System.Object",
    fields: {
        originalClip: {
            get: function() { return CS.Call(0, 245, 0, false, this); }, 
            set: function(v) { return CS.Call(1, 245, 0, false, this, v); }
        },
        overrideClip: {
            get: function() { return CS.Call(0, 245, 1, false, this); }, 
            set: function(v) { return CS.Call(1, 245, 1, false, this, v); }
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 245, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$AnimationClipPair);

// UnityEngine.AnimatorOverrideController
var UnityEngine$AnimatorOverrideController = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.AnimatorOverrideController",
    Kind: "Class",
    baseTypeName: "UnityEngine.RuntimeAnimatorController",
    definition: {
        ctor: function() { CS.Call(5, 246, 0, true, this); },
        get_runtimeAnimatorController: function() { return CS.Call(2, 246, 0, false, this); },
        set_runtimeAnimatorController: function(v) { return CS.Call(3, 246, 0, false, this, v); },
        get_Item$$String: function(ind0) { return CS.Call(2, 246, 1, false, this, ind0); },
        set_Item$$String: function(ind0, v) { return CS.Call(3, 246, 1, false, this, ind0, v); },
        get_Item$$AnimationClip: function(ind0) { return CS.Call(2, 246, 2, false, this, ind0); },
        set_Item$$AnimationClip: function(ind0, v) { return CS.Call(3, 246, 2, false, this, ind0, v); },
        get_clips: function() { return CS.Call(2, 246, 3, false, this); },
        set_clips: function(v) { return CS.Call(3, 246, 3, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$AnimatorOverrideController);

// UnityEngine.AnimationEvent
var UnityEngine$AnimationEvent = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.AnimationEvent",
    Kind: "Class",
    baseTypeName: "System.Object",
    definition: {
        ctor: function() { CS.Call(5, 247, 0, true, this); },
        get_stringParameter: function() { return CS.Call(2, 247, 0, false, this); },
        set_stringParameter: function(v) { return CS.Call(3, 247, 0, false, this, v); },
        get_floatParameter: function() { return CS.Call(2, 247, 1, false, this); },
        set_floatParameter: function(v) { return CS.Call(3, 247, 1, false, this, v); },
        get_intParameter: function() { return CS.Call(2, 247, 2, false, this); },
        set_intParameter: function(v) { return CS.Call(3, 247, 2, false, this, v); },
        get_objectReferenceParameter: function() { return CS.Call(2, 247, 3, false, this); },
        set_objectReferenceParameter: function(v) { return CS.Call(3, 247, 3, false, this, v); },
        get_functionName: function() { return CS.Call(2, 247, 4, false, this); },
        set_functionName: function(v) { return CS.Call(3, 247, 4, false, this, v); },
        get_time: function() { return CS.Call(2, 247, 5, false, this); },
        set_time: function(v) { return CS.Call(3, 247, 5, false, this, v); },
        get_messageOptions: function() { return CS.Call(2, 247, 6, false, this); },
        set_messageOptions: function(v) { return CS.Call(3, 247, 6, false, this, v); },
        get_isFiredByLegacy: function() { return CS.Call(2, 247, 7, false, this); },
        set_isFiredByLegacy: function(v) { return CS.Call(3, 247, 7, false, this, v); },
        get_isFiredByAnimator: function() { return CS.Call(2, 247, 8, false, this); },
        set_isFiredByAnimator: function(v) { return CS.Call(3, 247, 8, false, this, v); },
        get_animationState: function() { return CS.Call(2, 247, 9, false, this); },
        set_animationState: function(v) { return CS.Call(3, 247, 9, false, this, v); },
        get_animatorStateInfo: function() { return CS.Call(2, 247, 10, false, this); },
        set_animatorStateInfo: function(v) { return CS.Call(3, 247, 10, false, this, v); },
        get_animatorClipInfo: function() { return CS.Call(2, 247, 11, false, this); },
        set_animatorClipInfo: function(v) { return CS.Call(3, 247, 11, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$AnimationEvent);

// UnityEngine.AnimationClip
var UnityEngine$AnimationClip = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.AnimationClip",
    Kind: "Class",
    baseTypeName: "UnityEngine.Motion",
    definition: {
        ctor: function() { CS.Call(5, 248, 0, true, this); },
        get_length: function() { return CS.Call(2, 248, 0, false, this); },
        set_length: function(v) { return CS.Call(3, 248, 0, false, this, v); },
        get_frameRate: function() { return CS.Call(2, 248, 1, false, this); },
        set_frameRate: function(v) { return CS.Call(3, 248, 1, false, this, v); },
        get_wrapMode: function() { return CS.Call(2, 248, 2, false, this); },
        set_wrapMode: function(v) { return CS.Call(3, 248, 2, false, this, v); },
        get_localBounds: function() { return CS.Call(2, 248, 3, false, this); },
        set_localBounds: function(v) { return CS.Call(3, 248, 3, false, this, v); },
        get_legacy: function() { return CS.Call(2, 248, 4, false, this); },
        set_legacy: function(v) { return CS.Call(3, 248, 4, false, this, v); },
        get_humanMotion: function() { return CS.Call(2, 248, 5, false, this); },
        set_humanMotion: function(v) { return CS.Call(3, 248, 5, false, this, v); },
        get_events: function() { return CS.Call(2, 248, 6, false, this); },
        set_events: function(v) { return CS.Call(3, 248, 6, false, this, v); },
        AddEvent: function(a0/*AnimationEvent*/) { 
            return CS.Call(4, 248, 0, false, this, a0); //Ret: Void
        },
        ClearCurves: function() { 
            return CS.Call(4, 248, 1, false, this); //Ret: Void
        },
        EnsureQuaternionContinuity: function() { 
            return CS.Call(4, 248, 2, false, this); //Ret: Void
        },
        SampleAnimation: function(a0/*GameObject*/, a1/*Single*/) { 
            return CS.Call(4, 248, 3, false, this, a0, a1); //Ret: Void
        },
        SetCurve: function(a0/*String*/, a1/*Type*/, a2/*String*/, a3/*AnimationCurve*/) { 
            return CS.Call(4, 248, 4, false, this, a0, a1.get_FullName(), a2, a3); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$AnimationClip);

// UnityEngine.Animation
var UnityEngine$Animation = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Animation",
    Kind: "Class",
    baseTypeName: "UnityEngine.Behaviour",
    interfaceNames: ["System.Collections.IEnumerable"],
    definition: {
        ctor: function() { CS.Call(5, 249, 0, true, this); },
        get_clip: function() { return CS.Call(2, 249, 0, false, this); },
        set_clip: function(v) { return CS.Call(3, 249, 0, false, this, v); },
        get_playAutomatically: function() { return CS.Call(2, 249, 1, false, this); },
        set_playAutomatically: function(v) { return CS.Call(3, 249, 1, false, this, v); },
        get_wrapMode: function() { return CS.Call(2, 249, 2, false, this); },
        set_wrapMode: function(v) { return CS.Call(3, 249, 2, false, this, v); },
        get_isPlaying: function() { return CS.Call(2, 249, 3, false, this); },
        set_isPlaying: function(v) { return CS.Call(3, 249, 3, false, this, v); },
        get_Item$$String: function(ind0) { return CS.Call(2, 249, 4, false, this, ind0); },
        set_Item$$String: function(ind0, v) { return CS.Call(3, 249, 4, false, this, ind0, v); },
        get_animatePhysics: function() { return CS.Call(2, 249, 5, false, this); },
        set_animatePhysics: function(v) { return CS.Call(3, 249, 5, false, this, v); },
        get_cullingType: function() { return CS.Call(2, 249, 6, false, this); },
        set_cullingType: function(v) { return CS.Call(3, 249, 6, false, this, v); },
        get_localBounds: function() { return CS.Call(2, 249, 7, false, this); },
        set_localBounds: function(v) { return CS.Call(3, 249, 7, false, this, v); },
        AddClip$$AnimationClip$$String$$Int32$$Int32$$Boolean: function(a0/*AnimationClip*/, a1/*String*/, a2/*Int32*/, a3/*Int32*/, a4/*Boolean*/) { 
            return CS.Call(4, 249, 0, false, this, a0, a1, a2, a3, a4); //Ret: Void
        },
        AddClip$$AnimationClip$$String$$Int32$$Int32: function(a0/*AnimationClip*/, a1/*String*/, a2/*Int32*/, a3/*Int32*/) { 
            return CS.Call(4, 249, 1, false, this, a0, a1, a2, a3); //Ret: Void
        },
        AddClip$$AnimationClip$$String: function(a0/*AnimationClip*/, a1/*String*/) { 
            return CS.Call(4, 249, 2, false, this, a0, a1); //Ret: Void
        },
        Blend$$String$$Single$$Single: function(a0/*String*/, a1/*Single*/, a2/*Single*/) { 
            return CS.Call(4, 249, 3, false, this, a0, a1, a2); //Ret: Void
        },
        Blend$$String$$Single: function(a0/*String*/, a1/*Single*/) { 
            return CS.Call(4, 249, 4, false, this, a0, a1); //Ret: Void
        },
        Blend$$String: function(a0/*String*/) { 
            return CS.Call(4, 249, 5, false, this, a0); //Ret: Void
        },
        CrossFade$$String$$Single$$PlayMode: function(a0/*String*/, a1/*Single*/, a2/*PlayMode*/) { 
            return CS.Call(4, 249, 6, false, this, a0, a1, a2); //Ret: Void
        },
        CrossFade$$String$$Single: function(a0/*String*/, a1/*Single*/) { 
            return CS.Call(4, 249, 7, false, this, a0, a1); //Ret: Void
        },
        CrossFade$$String: function(a0/*String*/) { 
            return CS.Call(4, 249, 8, false, this, a0); //Ret: Void
        },
        CrossFadeQueued$$String$$Single$$QueueMode$$PlayMode: function(a0/*String*/, a1/*Single*/, a2/*QueueMode*/, a3/*PlayMode*/) { 
            return CS.Call(4, 249, 9, false, this, a0, a1, a2, a3); //Ret: AnimationState
        },
        CrossFadeQueued$$String$$Single$$QueueMode: function(a0/*String*/, a1/*Single*/, a2/*QueueMode*/) { 
            return CS.Call(4, 249, 10, false, this, a0, a1, a2); //Ret: AnimationState
        },
        CrossFadeQueued$$String$$Single: function(a0/*String*/, a1/*Single*/) { 
            return CS.Call(4, 249, 11, false, this, a0, a1); //Ret: AnimationState
        },
        CrossFadeQueued$$String: function(a0/*String*/) { 
            return CS.Call(4, 249, 12, false, this, a0); //Ret: AnimationState
        },
        GetClip: function(a0/*String*/) { 
            return CS.Call(4, 249, 13, false, this, a0); //Ret: AnimationClip
        },
        GetClipCount: function() { 
            return CS.Call(4, 249, 14, false, this); //Ret: Int32
        },
        GetEnumerator: function() { 
            return CS.Call(4, 249, 15, false, this); //Ret: IEnumerator
        },
        IsPlaying: function(a0/*String*/) { 
            return CS.Call(4, 249, 16, false, this, a0); //Ret: Boolean
        },
        Play$$String$$PlayMode: function(a0/*String*/, a1/*PlayMode*/) { 
            return CS.Call(4, 249, 17, false, this, a0, a1); //Ret: Boolean
        },
        Play$$String: function(a0/*String*/) { 
            return CS.Call(4, 249, 18, false, this, a0); //Ret: Boolean
        },
        Play$$PlayMode: function(a0/*PlayMode*/) { 
            return CS.Call(4, 249, 19, false, this, a0); //Ret: Boolean
        },
        Play: function() { 
            return CS.Call(4, 249, 20, false, this); //Ret: Boolean
        },
        PlayQueued$$String$$QueueMode$$PlayMode: function(a0/*String*/, a1/*QueueMode*/, a2/*PlayMode*/) { 
            return CS.Call(4, 249, 21, false, this, a0, a1, a2); //Ret: AnimationState
        },
        PlayQueued$$String$$QueueMode: function(a0/*String*/, a1/*QueueMode*/) { 
            return CS.Call(4, 249, 22, false, this, a0, a1); //Ret: AnimationState
        },
        PlayQueued$$String: function(a0/*String*/) { 
            return CS.Call(4, 249, 23, false, this, a0); //Ret: AnimationState
        },
        RemoveClip$$AnimationClip: function(a0/*AnimationClip*/) { 
            return CS.Call(4, 249, 24, false, this, a0); //Ret: Void
        },
        RemoveClip$$String: function(a0/*String*/) { 
            return CS.Call(4, 249, 25, false, this, a0); //Ret: Void
        },
        Rewind$$String: function(a0/*String*/) { 
            return CS.Call(4, 249, 26, false, this, a0); //Ret: Void
        },
        Rewind: function() { 
            return CS.Call(4, 249, 27, false, this); //Ret: Void
        },
        Sample: function() { 
            return CS.Call(4, 249, 28, false, this); //Ret: Void
        },
        Stop$$String: function(a0/*String*/) { 
            return CS.Call(4, 249, 29, false, this, a0); //Ret: Void
        },
        Stop: function() { 
            return CS.Call(4, 249, 30, false, this); //Ret: Void
        },
        SyncLayer: function(a0/*Int32*/) { 
            return CS.Call(4, 249, 31, false, this, a0); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Animation);

// UnityEngine.AnimationState
var UnityEngine$AnimationState = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.AnimationState",
    Kind: "Class",
    baseTypeName: "UnityEngine.TrackedReference",
    definition: {
        ctor: function() { CS.Call(5, 250, 0, true, this); },
        get_enabled: function() { return CS.Call(2, 250, 0, false, this); },
        set_enabled: function(v) { return CS.Call(3, 250, 0, false, this, v); },
        get_weight: function() { return CS.Call(2, 250, 1, false, this); },
        set_weight: function(v) { return CS.Call(3, 250, 1, false, this, v); },
        get_wrapMode: function() { return CS.Call(2, 250, 2, false, this); },
        set_wrapMode: function(v) { return CS.Call(3, 250, 2, false, this, v); },
        get_time: function() { return CS.Call(2, 250, 3, false, this); },
        set_time: function(v) { return CS.Call(3, 250, 3, false, this, v); },
        get_normalizedTime: function() { return CS.Call(2, 250, 4, false, this); },
        set_normalizedTime: function(v) { return CS.Call(3, 250, 4, false, this, v); },
        get_speed: function() { return CS.Call(2, 250, 5, false, this); },
        set_speed: function(v) { return CS.Call(3, 250, 5, false, this, v); },
        get_normalizedSpeed: function() { return CS.Call(2, 250, 6, false, this); },
        set_normalizedSpeed: function(v) { return CS.Call(3, 250, 6, false, this, v); },
        get_length: function() { return CS.Call(2, 250, 7, false, this); },
        set_length: function(v) { return CS.Call(3, 250, 7, false, this, v); },
        get_layer: function() { return CS.Call(2, 250, 8, false, this); },
        set_layer: function(v) { return CS.Call(3, 250, 8, false, this, v); },
        get_clip: function() { return CS.Call(2, 250, 9, false, this); },
        set_clip: function(v) { return CS.Call(3, 250, 9, false, this, v); },
        get_name: function() { return CS.Call(2, 250, 10, false, this); },
        set_name: function(v) { return CS.Call(3, 250, 10, false, this, v); },
        get_blendMode: function() { return CS.Call(2, 250, 11, false, this); },
        set_blendMode: function(v) { return CS.Call(3, 250, 11, false, this, v); },
        AddMixingTransform$$Transform$$Boolean: function(a0/*Transform*/, a1/*Boolean*/) { 
            return CS.Call(4, 250, 0, false, this, a0, a1); //Ret: Void
        },
        AddMixingTransform$$Transform: function(a0/*Transform*/) { 
            return CS.Call(4, 250, 1, false, this, a0); //Ret: Void
        },
        RemoveMixingTransform: function(a0/*Transform*/) { 
            return CS.Call(4, 250, 2, false, this, a0); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$AnimationState);

// UnityEngine.AnimatorClipInfo
var UnityEngine$AnimatorClipInfo = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.AnimatorClipInfo",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    definition: {
        ctor: function() { CS.Call(5, 251, 0, true, this); },
        get_clip: function() { return CS.Call(2, 251, 0, false, this); },
        set_clip: function(v) { return CS.Call(3, 251, 0, false, this, v); },
        get_weight: function() { return CS.Call(2, 251, 1, false, this); },
        set_weight: function(v) { return CS.Call(3, 251, 1, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$AnimatorClipInfo);

// UnityEngine.AnimatorStateInfo
var UnityEngine$AnimatorStateInfo = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.AnimatorStateInfo",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    definition: {
        ctor: function() { CS.Call(5, 252, 0, true, this); },
        get_fullPathHash: function() { return CS.Call(2, 252, 0, false, this); },
        set_fullPathHash: function(v) { return CS.Call(3, 252, 0, false, this, v); },
        get_shortNameHash: function() { return CS.Call(2, 252, 1, false, this); },
        set_shortNameHash: function(v) { return CS.Call(3, 252, 1, false, this, v); },
        get_normalizedTime: function() { return CS.Call(2, 252, 2, false, this); },
        set_normalizedTime: function(v) { return CS.Call(3, 252, 2, false, this, v); },
        get_length: function() { return CS.Call(2, 252, 3, false, this); },
        set_length: function(v) { return CS.Call(3, 252, 3, false, this, v); },
        get_speed: function() { return CS.Call(2, 252, 4, false, this); },
        set_speed: function(v) { return CS.Call(3, 252, 4, false, this, v); },
        get_speedMultiplier: function() { return CS.Call(2, 252, 5, false, this); },
        set_speedMultiplier: function(v) { return CS.Call(3, 252, 5, false, this, v); },
        get_tagHash: function() { return CS.Call(2, 252, 6, false, this); },
        set_tagHash: function(v) { return CS.Call(3, 252, 6, false, this, v); },
        get_loop: function() { return CS.Call(2, 252, 7, false, this); },
        set_loop: function(v) { return CS.Call(3, 252, 7, false, this, v); },
        IsName: function(a0/*String*/) { 
            return CS.Call(4, 252, 0, false, this, a0); //Ret: Boolean
        },
        IsTag: function(a0/*String*/) { 
            return CS.Call(4, 252, 1, false, this, a0); //Ret: Boolean
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$AnimatorStateInfo);

// UnityEngine.AnimatorTransitionInfo
var UnityEngine$AnimatorTransitionInfo = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.AnimatorTransitionInfo",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    definition: {
        ctor: function() { CS.Call(5, 253, 0, true, this); },
        get_fullPathHash: function() { return CS.Call(2, 253, 0, false, this); },
        set_fullPathHash: function(v) { return CS.Call(3, 253, 0, false, this, v); },
        get_nameHash: function() { return CS.Call(2, 253, 1, false, this); },
        set_nameHash: function(v) { return CS.Call(3, 253, 1, false, this, v); },
        get_userNameHash: function() { return CS.Call(2, 253, 2, false, this); },
        set_userNameHash: function(v) { return CS.Call(3, 253, 2, false, this, v); },
        get_normalizedTime: function() { return CS.Call(2, 253, 3, false, this); },
        set_normalizedTime: function(v) { return CS.Call(3, 253, 3, false, this, v); },
        get_anyState: function() { return CS.Call(2, 253, 4, false, this); },
        set_anyState: function(v) { return CS.Call(3, 253, 4, false, this, v); },
        IsName: function(a0/*String*/) { 
            return CS.Call(4, 253, 0, false, this, a0); //Ret: Boolean
        },
        IsUserName: function(a0/*String*/) { 
            return CS.Call(4, 253, 1, false, this, a0); //Ret: Boolean
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$AnimatorTransitionInfo);

// UnityEngine.MatchTargetWeightMask
var UnityEngine$MatchTargetWeightMask = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.MatchTargetWeightMask",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    definition: {
        ctor: function() { CS.Call(5, 254, 0, true, this); },
        ctor$$Vector3$$Single: function(a0, a1) { CS.Call(5, 254, 1, true, this, a0, a1); },
        get_positionXYZWeight: function() { return CS.Call(2, 254, 0, false, this); },
        set_positionXYZWeight: function(v) { return CS.Call(3, 254, 0, false, this, v); },
        get_rotationWeight: function() { return CS.Call(2, 254, 1, false, this); },
        set_rotationWeight: function(v) { return CS.Call(3, 254, 1, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$MatchTargetWeightMask);

// UnityEngine.Animator
var UnityEngine$Animator = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Animator",
    Kind: "Class",
    baseTypeName: "UnityEngine.Experimental.Director.DirectorPlayer",
    staticDefinition: {
        StringToHash: function(a0/*String*/) { 
            return CS.Call(4, 255, 90, true, a0); //Ret: Int32
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 255, 0, true, this); },
        get_isOptimizable: function() { return CS.Call(2, 255, 0, false, this); },
        set_isOptimizable: function(v) { return CS.Call(3, 255, 0, false, this, v); },
        get_isHuman: function() { return CS.Call(2, 255, 1, false, this); },
        set_isHuman: function(v) { return CS.Call(3, 255, 1, false, this, v); },
        get_hasRootMotion: function() { return CS.Call(2, 255, 2, false, this); },
        set_hasRootMotion: function(v) { return CS.Call(3, 255, 2, false, this, v); },
        get_humanScale: function() { return CS.Call(2, 255, 3, false, this); },
        set_humanScale: function(v) { return CS.Call(3, 255, 3, false, this, v); },
        get_isInitialized: function() { return CS.Call(2, 255, 4, false, this); },
        set_isInitialized: function(v) { return CS.Call(3, 255, 4, false, this, v); },
        get_deltaPosition: function() { return CS.Call(2, 255, 5, false, this); },
        set_deltaPosition: function(v) { return CS.Call(3, 255, 5, false, this, v); },
        get_deltaRotation: function() { return CS.Call(2, 255, 6, false, this); },
        set_deltaRotation: function(v) { return CS.Call(3, 255, 6, false, this, v); },
        get_velocity: function() { return CS.Call(2, 255, 7, false, this); },
        set_velocity: function(v) { return CS.Call(3, 255, 7, false, this, v); },
        get_angularVelocity: function() { return CS.Call(2, 255, 8, false, this); },
        set_angularVelocity: function(v) { return CS.Call(3, 255, 8, false, this, v); },
        get_rootPosition: function() { return CS.Call(2, 255, 9, false, this); },
        set_rootPosition: function(v) { return CS.Call(3, 255, 9, false, this, v); },
        get_rootRotation: function() { return CS.Call(2, 255, 10, false, this); },
        set_rootRotation: function(v) { return CS.Call(3, 255, 10, false, this, v); },
        get_applyRootMotion: function() { return CS.Call(2, 255, 11, false, this); },
        set_applyRootMotion: function(v) { return CS.Call(3, 255, 11, false, this, v); },
        get_linearVelocityBlending: function() { return CS.Call(2, 255, 12, false, this); },
        set_linearVelocityBlending: function(v) { return CS.Call(3, 255, 12, false, this, v); },
        get_updateMode: function() { return CS.Call(2, 255, 13, false, this); },
        set_updateMode: function(v) { return CS.Call(3, 255, 13, false, this, v); },
        get_hasTransformHierarchy: function() { return CS.Call(2, 255, 14, false, this); },
        set_hasTransformHierarchy: function(v) { return CS.Call(3, 255, 14, false, this, v); },
        get_gravityWeight: function() { return CS.Call(2, 255, 15, false, this); },
        set_gravityWeight: function(v) { return CS.Call(3, 255, 15, false, this, v); },
        get_bodyPosition: function() { return CS.Call(2, 255, 16, false, this); },
        set_bodyPosition: function(v) { return CS.Call(3, 255, 16, false, this, v); },
        get_bodyRotation: function() { return CS.Call(2, 255, 17, false, this); },
        set_bodyRotation: function(v) { return CS.Call(3, 255, 17, false, this, v); },
        get_stabilizeFeet: function() { return CS.Call(2, 255, 18, false, this); },
        set_stabilizeFeet: function(v) { return CS.Call(3, 255, 18, false, this, v); },
        get_layerCount: function() { return CS.Call(2, 255, 19, false, this); },
        set_layerCount: function(v) { return CS.Call(3, 255, 19, false, this, v); },
        get_parameters: function() { return CS.Call(2, 255, 20, false, this); },
        set_parameters: function(v) { return CS.Call(3, 255, 20, false, this, v); },
        get_parameterCount: function() { return CS.Call(2, 255, 21, false, this); },
        set_parameterCount: function(v) { return CS.Call(3, 255, 21, false, this, v); },
        get_feetPivotActive: function() { return CS.Call(2, 255, 22, false, this); },
        set_feetPivotActive: function(v) { return CS.Call(3, 255, 22, false, this, v); },
        get_pivotWeight: function() { return CS.Call(2, 255, 23, false, this); },
        set_pivotWeight: function(v) { return CS.Call(3, 255, 23, false, this, v); },
        get_pivotPosition: function() { return CS.Call(2, 255, 24, false, this); },
        set_pivotPosition: function(v) { return CS.Call(3, 255, 24, false, this, v); },
        get_isMatchingTarget: function() { return CS.Call(2, 255, 25, false, this); },
        set_isMatchingTarget: function(v) { return CS.Call(3, 255, 25, false, this, v); },
        get_speed: function() { return CS.Call(2, 255, 26, false, this); },
        set_speed: function(v) { return CS.Call(3, 255, 26, false, this, v); },
        get_targetPosition: function() { return CS.Call(2, 255, 27, false, this); },
        set_targetPosition: function(v) { return CS.Call(3, 255, 27, false, this, v); },
        get_targetRotation: function() { return CS.Call(2, 255, 28, false, this); },
        set_targetRotation: function(v) { return CS.Call(3, 255, 28, false, this, v); },
        get_cullingMode: function() { return CS.Call(2, 255, 29, false, this); },
        set_cullingMode: function(v) { return CS.Call(3, 255, 29, false, this, v); },
        get_playbackTime: function() { return CS.Call(2, 255, 30, false, this); },
        set_playbackTime: function(v) { return CS.Call(3, 255, 30, false, this, v); },
        get_recorderStartTime: function() { return CS.Call(2, 255, 31, false, this); },
        set_recorderStartTime: function(v) { return CS.Call(3, 255, 31, false, this, v); },
        get_recorderStopTime: function() { return CS.Call(2, 255, 32, false, this); },
        set_recorderStopTime: function(v) { return CS.Call(3, 255, 32, false, this, v); },
        get_recorderMode: function() { return CS.Call(2, 255, 33, false, this); },
        set_recorderMode: function(v) { return CS.Call(3, 255, 33, false, this, v); },
        get_runtimeAnimatorController: function() { return CS.Call(2, 255, 34, false, this); },
        set_runtimeAnimatorController: function(v) { return CS.Call(3, 255, 34, false, this, v); },
        get_avatar: function() { return CS.Call(2, 255, 35, false, this); },
        set_avatar: function(v) { return CS.Call(3, 255, 35, false, this, v); },
        get_layersAffectMassCenter: function() { return CS.Call(2, 255, 36, false, this); },
        set_layersAffectMassCenter: function(v) { return CS.Call(3, 255, 36, false, this, v); },
        get_leftFeetBottomHeight: function() { return CS.Call(2, 255, 37, false, this); },
        set_leftFeetBottomHeight: function(v) { return CS.Call(3, 255, 37, false, this, v); },
        get_rightFeetBottomHeight: function() { return CS.Call(2, 255, 38, false, this); },
        set_rightFeetBottomHeight: function(v) { return CS.Call(3, 255, 38, false, this, v); },
        get_logWarnings: function() { return CS.Call(2, 255, 39, false, this); },
        set_logWarnings: function(v) { return CS.Call(3, 255, 39, false, this, v); },
        get_fireEvents: function() { return CS.Call(2, 255, 40, false, this); },
        set_fireEvents: function(v) { return CS.Call(3, 255, 40, false, this, v); },
        ApplyBuiltinRootMotion: function() { 
            return CS.Call(4, 255, 0, false, this); //Ret: Void
        },
        CrossFade$$Int32$$Single$$Int32$$Single: function(a0/*Int32*/, a1/*Single*/, a2/*Int32*/, a3/*Single*/) { 
            return CS.Call(4, 255, 1, false, this, a0, a1, a2, a3); //Ret: Void
        },
        CrossFade$$String$$Single$$Int32$$Single: function(a0/*String*/, a1/*Single*/, a2/*Int32*/, a3/*Single*/) { 
            return CS.Call(4, 255, 2, false, this, a0, a1, a2, a3); //Ret: Void
        },
        CrossFade$$String$$Single$$Int32: function(a0/*String*/, a1/*Single*/, a2/*Int32*/) { 
            return CS.Call(4, 255, 3, false, this, a0, a1, a2); //Ret: Void
        },
        CrossFade$$Int32$$Single$$Int32: function(a0/*Int32*/, a1/*Single*/, a2/*Int32*/) { 
            return CS.Call(4, 255, 4, false, this, a0, a1, a2); //Ret: Void
        },
        CrossFade$$String$$Single: function(a0/*String*/, a1/*Single*/) { 
            return CS.Call(4, 255, 5, false, this, a0, a1); //Ret: Void
        },
        CrossFade$$Int32$$Single: function(a0/*Int32*/, a1/*Single*/) { 
            return CS.Call(4, 255, 6, false, this, a0, a1); //Ret: Void
        },
        CrossFadeInFixedTime$$Int32$$Single$$Int32$$Single: function(a0/*Int32*/, a1/*Single*/, a2/*Int32*/, a3/*Single*/) { 
            return CS.Call(4, 255, 7, false, this, a0, a1, a2, a3); //Ret: Void
        },
        CrossFadeInFixedTime$$String$$Single$$Int32$$Single: function(a0/*String*/, a1/*Single*/, a2/*Int32*/, a3/*Single*/) { 
            return CS.Call(4, 255, 8, false, this, a0, a1, a2, a3); //Ret: Void
        },
        CrossFadeInFixedTime$$String$$Single$$Int32: function(a0/*String*/, a1/*Single*/, a2/*Int32*/) { 
            return CS.Call(4, 255, 9, false, this, a0, a1, a2); //Ret: Void
        },
        CrossFadeInFixedTime$$Int32$$Single$$Int32: function(a0/*Int32*/, a1/*Single*/, a2/*Int32*/) { 
            return CS.Call(4, 255, 10, false, this, a0, a1, a2); //Ret: Void
        },
        CrossFadeInFixedTime$$String$$Single: function(a0/*String*/, a1/*Single*/) { 
            return CS.Call(4, 255, 11, false, this, a0, a1); //Ret: Void
        },
        CrossFadeInFixedTime$$Int32$$Single: function(a0/*Int32*/, a1/*Single*/) { 
            return CS.Call(4, 255, 12, false, this, a0, a1); //Ret: Void
        },
        GetAnimatorTransitionInfo: function(a0/*Int32*/) { 
            return CS.Call(4, 255, 13, false, this, a0); //Ret: AnimatorTransitionInfo
        },
        GetBehaviour$1: function(t0) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 255, 14, false, this, native_t0); //Ret: T
        },
        GetBehaviours$1: function(t0) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 255, 15, false, this, native_t0); //Ret: T[]
        },
        GetBoneTransform: function(a0/*HumanBodyBones*/) { 
            return CS.Call(4, 255, 16, false, this, a0); //Ret: Transform
        },
        GetBool$$Int32: function(a0/*Int32*/) { 
            return CS.Call(4, 255, 17, false, this, a0); //Ret: Boolean
        },
        GetBool$$String: function(a0/*String*/) { 
            return CS.Call(4, 255, 18, false, this, a0); //Ret: Boolean
        },
        GetCurrentAnimatorClipInfo: function(a0/*Int32*/) { 
            return CS.Call(4, 255, 19, false, this, a0); //Ret: AnimatorClipInfo[]
        },
        GetCurrentAnimatorStateInfo: function(a0/*Int32*/) { 
            return CS.Call(4, 255, 20, false, this, a0); //Ret: AnimatorStateInfo
        },
        GetFloat$$Int32: function(a0/*Int32*/) { 
            return CS.Call(4, 255, 21, false, this, a0); //Ret: Single
        },
        GetFloat$$String: function(a0/*String*/) { 
            return CS.Call(4, 255, 22, false, this, a0); //Ret: Single
        },
        GetIKHintPosition: function(a0/*AvatarIKHint*/) { 
            return CS.Call(4, 255, 23, false, this, a0); //Ret: Vector3
        },
        GetIKHintPositionWeight: function(a0/*AvatarIKHint*/) { 
            return CS.Call(4, 255, 24, false, this, a0); //Ret: Single
        },
        GetIKPosition: function(a0/*AvatarIKGoal*/) { 
            return CS.Call(4, 255, 25, false, this, a0); //Ret: Vector3
        },
        GetIKPositionWeight: function(a0/*AvatarIKGoal*/) { 
            return CS.Call(4, 255, 26, false, this, a0); //Ret: Single
        },
        GetIKRotation: function(a0/*AvatarIKGoal*/) { 
            return CS.Call(4, 255, 27, false, this, a0); //Ret: Quaternion
        },
        GetIKRotationWeight: function(a0/*AvatarIKGoal*/) { 
            return CS.Call(4, 255, 28, false, this, a0); //Ret: Single
        },
        GetInteger$$Int32: function(a0/*Int32*/) { 
            return CS.Call(4, 255, 29, false, this, a0); //Ret: Int32
        },
        GetInteger$$String: function(a0/*String*/) { 
            return CS.Call(4, 255, 30, false, this, a0); //Ret: Int32
        },
        GetLayerIndex: function(a0/*String*/) { 
            return CS.Call(4, 255, 31, false, this, a0); //Ret: Int32
        },
        GetLayerName: function(a0/*Int32*/) { 
            return CS.Call(4, 255, 32, false, this, a0); //Ret: String
        },
        GetLayerWeight: function(a0/*Int32*/) { 
            return CS.Call(4, 255, 33, false, this, a0); //Ret: Single
        },
        GetNextAnimatorClipInfo: function(a0/*Int32*/) { 
            return CS.Call(4, 255, 34, false, this, a0); //Ret: AnimatorClipInfo[]
        },
        GetNextAnimatorStateInfo: function(a0/*Int32*/) { 
            return CS.Call(4, 255, 35, false, this, a0); //Ret: AnimatorStateInfo
        },
        GetParameter: function(a0/*Int32*/) { 
            return CS.Call(4, 255, 36, false, this, a0); //Ret: AnimatorControllerParameter
        },
        HasState: function(a0/*Int32*/, a1/*Int32*/) { 
            return CS.Call(4, 255, 37, false, this, a0, a1); //Ret: Boolean
        },
        InterruptMatchTarget$$Boolean: function(a0/*Boolean*/) { 
            return CS.Call(4, 255, 38, false, this, a0); //Ret: Void
        },
        InterruptMatchTarget: function() { 
            return CS.Call(4, 255, 39, false, this); //Ret: Void
        },
        IsInTransition: function(a0/*Int32*/) { 
            return CS.Call(4, 255, 40, false, this, a0); //Ret: Boolean
        },
        IsParameterControlledByCurve$$String: function(a0/*String*/) { 
            return CS.Call(4, 255, 41, false, this, a0); //Ret: Boolean
        },
        IsParameterControlledByCurve$$Int32: function(a0/*Int32*/) { 
            return CS.Call(4, 255, 42, false, this, a0); //Ret: Boolean
        },
        MatchTarget$$Vector3$$Quaternion$$AvatarTarget$$MatchTargetWeightMask$$Single$$Single: function(a0/*Vector3*/, a1/*Quaternion*/, a2/*AvatarTarget*/, a3/*MatchTargetWeightMask*/, a4/*Single*/, a5/*Single*/) { 
            return CS.Call(4, 255, 43, false, this, a0, a1, a2, a3, a4, a5); //Ret: Void
        },
        MatchTarget$$Vector3$$Quaternion$$AvatarTarget$$MatchTargetWeightMask$$Single: function(a0/*Vector3*/, a1/*Quaternion*/, a2/*AvatarTarget*/, a3/*MatchTargetWeightMask*/, a4/*Single*/) { 
            return CS.Call(4, 255, 44, false, this, a0, a1, a2, a3, a4); //Ret: Void
        },
        Play$$String$$Int32$$Single: function(a0/*String*/, a1/*Int32*/, a2/*Single*/) { 
            return CS.Call(4, 255, 45, false, this, a0, a1, a2); //Ret: Void
        },
        Play$$Int32$$Int32$$Single: function(a0/*Int32*/, a1/*Int32*/, a2/*Single*/) { 
            return CS.Call(4, 255, 46, false, this, a0, a1, a2); //Ret: Void
        },
        Play$$String$$Int32: function(a0/*String*/, a1/*Int32*/) { 
            return CS.Call(4, 255, 47, false, this, a0, a1); //Ret: Void
        },
        Play$$Int32$$Int32: function(a0/*Int32*/, a1/*Int32*/) { 
            return CS.Call(4, 255, 48, false, this, a0, a1); //Ret: Void
        },
        Play$$String: function(a0/*String*/) { 
            return CS.Call(4, 255, 49, false, this, a0); //Ret: Void
        },
        Play$$Int32: function(a0/*Int32*/) { 
            return CS.Call(4, 255, 50, false, this, a0); //Ret: Void
        },
        PlayInFixedTime$$String$$Int32$$Single: function(a0/*String*/, a1/*Int32*/, a2/*Single*/) { 
            return CS.Call(4, 255, 51, false, this, a0, a1, a2); //Ret: Void
        },
        PlayInFixedTime$$Int32$$Int32$$Single: function(a0/*Int32*/, a1/*Int32*/, a2/*Single*/) { 
            return CS.Call(4, 255, 52, false, this, a0, a1, a2); //Ret: Void
        },
        PlayInFixedTime$$String$$Int32: function(a0/*String*/, a1/*Int32*/) { 
            return CS.Call(4, 255, 53, false, this, a0, a1); //Ret: Void
        },
        PlayInFixedTime$$Int32$$Int32: function(a0/*Int32*/, a1/*Int32*/) { 
            return CS.Call(4, 255, 54, false, this, a0, a1); //Ret: Void
        },
        PlayInFixedTime$$String: function(a0/*String*/) { 
            return CS.Call(4, 255, 55, false, this, a0); //Ret: Void
        },
        PlayInFixedTime$$Int32: function(a0/*Int32*/) { 
            return CS.Call(4, 255, 56, false, this, a0); //Ret: Void
        },
        Rebind: function() { 
            return CS.Call(4, 255, 57, false, this); //Ret: Void
        },
        ResetTrigger$$String: function(a0/*String*/) { 
            return CS.Call(4, 255, 58, false, this, a0); //Ret: Void
        },
        ResetTrigger$$Int32: function(a0/*Int32*/) { 
            return CS.Call(4, 255, 59, false, this, a0); //Ret: Void
        },
        SetBoneLocalRotation: function(a0/*HumanBodyBones*/, a1/*Quaternion*/) { 
            return CS.Call(4, 255, 60, false, this, a0, a1); //Ret: Void
        },
        SetBool$$String$$Boolean: function(a0/*String*/, a1/*Boolean*/) { 
            return CS.Call(4, 255, 61, false, this, a0, a1); //Ret: Void
        },
        SetBool$$Int32$$Boolean: function(a0/*Int32*/, a1/*Boolean*/) { 
            return CS.Call(4, 255, 62, false, this, a0, a1); //Ret: Void
        },
        SetFloat$$String$$Single$$Single$$Single: function(a0/*String*/, a1/*Single*/, a2/*Single*/, a3/*Single*/) { 
            return CS.Call(4, 255, 63, false, this, a0, a1, a2, a3); //Ret: Void
        },
        SetFloat$$Int32$$Single$$Single$$Single: function(a0/*Int32*/, a1/*Single*/, a2/*Single*/, a3/*Single*/) { 
            return CS.Call(4, 255, 64, false, this, a0, a1, a2, a3); //Ret: Void
        },
        SetFloat$$String$$Single: function(a0/*String*/, a1/*Single*/) { 
            return CS.Call(4, 255, 65, false, this, a0, a1); //Ret: Void
        },
        SetFloat$$Int32$$Single: function(a0/*Int32*/, a1/*Single*/) { 
            return CS.Call(4, 255, 66, false, this, a0, a1); //Ret: Void
        },
        SetIKHintPosition: function(a0/*AvatarIKHint*/, a1/*Vector3*/) { 
            return CS.Call(4, 255, 67, false, this, a0, a1); //Ret: Void
        },
        SetIKHintPositionWeight: function(a0/*AvatarIKHint*/, a1/*Single*/) { 
            return CS.Call(4, 255, 68, false, this, a0, a1); //Ret: Void
        },
        SetIKPosition: function(a0/*AvatarIKGoal*/, a1/*Vector3*/) { 
            return CS.Call(4, 255, 69, false, this, a0, a1); //Ret: Void
        },
        SetIKPositionWeight: function(a0/*AvatarIKGoal*/, a1/*Single*/) { 
            return CS.Call(4, 255, 70, false, this, a0, a1); //Ret: Void
        },
        SetIKRotation: function(a0/*AvatarIKGoal*/, a1/*Quaternion*/) { 
            return CS.Call(4, 255, 71, false, this, a0, a1); //Ret: Void
        },
        SetIKRotationWeight: function(a0/*AvatarIKGoal*/, a1/*Single*/) { 
            return CS.Call(4, 255, 72, false, this, a0, a1); //Ret: Void
        },
        SetInteger$$String$$Int32: function(a0/*String*/, a1/*Int32*/) { 
            return CS.Call(4, 255, 73, false, this, a0, a1); //Ret: Void
        },
        SetInteger$$Int32$$Int32: function(a0/*Int32*/, a1/*Int32*/) { 
            return CS.Call(4, 255, 74, false, this, a0, a1); //Ret: Void
        },
        SetLayerWeight: function(a0/*Int32*/, a1/*Single*/) { 
            return CS.Call(4, 255, 75, false, this, a0, a1); //Ret: Void
        },
        SetLookAtPosition: function(a0/*Vector3*/) { 
            return CS.Call(4, 255, 76, false, this, a0); //Ret: Void
        },
        SetLookAtWeight$$Single$$Single$$Single$$Single$$Single: function(a0/*Single*/, a1/*Single*/, a2/*Single*/, a3/*Single*/, a4/*Single*/) { 
            return CS.Call(4, 255, 77, false, this, a0, a1, a2, a3, a4); //Ret: Void
        },
        SetLookAtWeight$$Single$$Single$$Single$$Single: function(a0/*Single*/, a1/*Single*/, a2/*Single*/, a3/*Single*/) { 
            return CS.Call(4, 255, 78, false, this, a0, a1, a2, a3); //Ret: Void
        },
        SetLookAtWeight$$Single$$Single$$Single: function(a0/*Single*/, a1/*Single*/, a2/*Single*/) { 
            return CS.Call(4, 255, 79, false, this, a0, a1, a2); //Ret: Void
        },
        SetLookAtWeight$$Single$$Single: function(a0/*Single*/, a1/*Single*/) { 
            return CS.Call(4, 255, 80, false, this, a0, a1); //Ret: Void
        },
        SetLookAtWeight$$Single: function(a0/*Single*/) { 
            return CS.Call(4, 255, 81, false, this, a0); //Ret: Void
        },
        SetTarget: function(a0/*AvatarTarget*/, a1/*Single*/) { 
            return CS.Call(4, 255, 82, false, this, a0, a1); //Ret: Void
        },
        SetTrigger$$Int32: function(a0/*Int32*/) { 
            return CS.Call(4, 255, 83, false, this, a0); //Ret: Void
        },
        SetTrigger$$String: function(a0/*String*/) { 
            return CS.Call(4, 255, 84, false, this, a0); //Ret: Void
        },
        StartPlayback: function() { 
            return CS.Call(4, 255, 85, false, this); //Ret: Void
        },
        StartRecording: function(a0/*Int32*/) { 
            return CS.Call(4, 255, 86, false, this, a0); //Ret: Void
        },
        StopPlayback: function() { 
            return CS.Call(4, 255, 87, false, this); //Ret: Void
        },
        StopRecording: function() { 
            return CS.Call(4, 255, 88, false, this); //Ret: Void
        },
        Update: function(a0/*Single*/) { 
            return CS.Call(4, 255, 89, false, this, a0); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Animator);

// UnityEngine.AnimatorControllerParameter
var UnityEngine$AnimatorControllerParameter = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.AnimatorControllerParameter",
    Kind: "Class",
    baseTypeName: "System.Object",
    definition: {
        ctor: function() { CS.Call(5, 256, 0, true, this); },
        get_nameHash: function() { return CS.Call(2, 256, 0, false, this); },
        set_nameHash: function(v) { return CS.Call(3, 256, 0, false, this, v); },
        get_type: function() { return CS.Call(2, 256, 1, false, this); },
        set_type: function(v) { return CS.Call(3, 256, 1, false, this, v); },
        get_defaultFloat: function() { return CS.Call(2, 256, 2, false, this); },
        set_defaultFloat: function(v) { return CS.Call(3, 256, 2, false, this, v); },
        get_defaultInt: function() { return CS.Call(2, 256, 3, false, this); },
        set_defaultInt: function(v) { return CS.Call(3, 256, 3, false, this, v); },
        get_defaultBool: function() { return CS.Call(2, 256, 4, false, this); },
        set_defaultBool: function(v) { return CS.Call(3, 256, 4, false, this, v); },
        Equals: function(a0/*Object*/) { 
            return CS.Call(4, 256, 0, false, this, a0); //Ret: Boolean
        },
        GetHashCode: function() { 
            return CS.Call(4, 256, 1, false, this); //Ret: Int32
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$AnimatorControllerParameter);

// UnityEngine.AnimatorUtility
var UnityEngine$AnimatorUtility = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.AnimatorUtility",
    Kind: "Class",
    baseTypeName: "System.Object",
    staticDefinition: {
        DeoptimizeTransformHierarchy: function(a0/*GameObject*/) { 
            return CS.Call(4, 257, 0, true, a0); //Ret: Void
        },
        OptimizeTransformHierarchy: function(a0/*GameObject*/, a1/*String[]*/) { 
            return CS.Call(4, 257, 1, true, a0, a1); //Ret: Void
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 257, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$AnimatorUtility);

// UnityEngine.SkeletonBone
var UnityEngine$SkeletonBone = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.SkeletonBone",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    fields: {
        name: {
            get: function() { return CS.Call(0, 258, 0, false, this); }, 
            set: function(v) { return CS.Call(1, 258, 0, false, this, v); }
        },
        position: {
            get: function() { return CS.Call(0, 258, 1, false, this); }, 
            set: function(v) { return CS.Call(1, 258, 1, false, this, v); }
        },
        rotation: {
            get: function() { return CS.Call(0, 258, 2, false, this); }, 
            set: function(v) { return CS.Call(1, 258, 2, false, this, v); }
        },
        scale: {
            get: function() { return CS.Call(0, 258, 3, false, this); }, 
            set: function(v) { return CS.Call(1, 258, 3, false, this, v); }
        },
        transformModified: {
            get: function() { return CS.Call(0, 258, 4, false, this); }, 
            set: function(v) { return CS.Call(1, 258, 4, false, this, v); }
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 258, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$SkeletonBone);

// UnityEngine.HumanLimit
var UnityEngine$HumanLimit = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.HumanLimit",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    definition: {
        ctor: function() { CS.Call(5, 259, 0, true, this); },
        get_useDefaultValues: function() { return CS.Call(2, 259, 0, false, this); },
        set_useDefaultValues: function(v) { return CS.Call(3, 259, 0, false, this, v); },
        get_min: function() { return CS.Call(2, 259, 1, false, this); },
        set_min: function(v) { return CS.Call(3, 259, 1, false, this, v); },
        get_max: function() { return CS.Call(2, 259, 2, false, this); },
        set_max: function(v) { return CS.Call(3, 259, 2, false, this, v); },
        get_center: function() { return CS.Call(2, 259, 3, false, this); },
        set_center: function(v) { return CS.Call(3, 259, 3, false, this, v); },
        get_axisLength: function() { return CS.Call(2, 259, 4, false, this); },
        set_axisLength: function(v) { return CS.Call(3, 259, 4, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$HumanLimit);

// UnityEngine.HumanBone
var UnityEngine$HumanBone = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.HumanBone",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    fields: {
        limit: {
            get: function() { return CS.Call(0, 260, 0, false, this); }, 
            set: function(v) { return CS.Call(1, 260, 0, false, this, v); }
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 260, 0, true, this); },
        get_boneName: function() { return CS.Call(2, 260, 0, false, this); },
        set_boneName: function(v) { return CS.Call(3, 260, 0, false, this, v); },
        get_humanName: function() { return CS.Call(2, 260, 1, false, this); },
        set_humanName: function(v) { return CS.Call(3, 260, 1, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$HumanBone);

// UnityEngine.HumanDescription
var UnityEngine$HumanDescription = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.HumanDescription",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    fields: {
        human: {
            get: function() { return CS.Call(0, 261, 0, false, this); }, 
            set: function(v) { return CS.Call(1, 261, 0, false, this, v); }
        },
        skeleton: {
            get: function() { return CS.Call(0, 261, 1, false, this); }, 
            set: function(v) { return CS.Call(1, 261, 1, false, this, v); }
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 261, 0, true, this); },
        get_upperArmTwist: function() { return CS.Call(2, 261, 0, false, this); },
        set_upperArmTwist: function(v) { return CS.Call(3, 261, 0, false, this, v); },
        get_lowerArmTwist: function() { return CS.Call(2, 261, 1, false, this); },
        set_lowerArmTwist: function(v) { return CS.Call(3, 261, 1, false, this, v); },
        get_upperLegTwist: function() { return CS.Call(2, 261, 2, false, this); },
        set_upperLegTwist: function(v) { return CS.Call(3, 261, 2, false, this, v); },
        get_lowerLegTwist: function() { return CS.Call(2, 261, 3, false, this); },
        set_lowerLegTwist: function(v) { return CS.Call(3, 261, 3, false, this, v); },
        get_armStretch: function() { return CS.Call(2, 261, 4, false, this); },
        set_armStretch: function(v) { return CS.Call(3, 261, 4, false, this, v); },
        get_legStretch: function() { return CS.Call(2, 261, 5, false, this); },
        set_legStretch: function(v) { return CS.Call(3, 261, 5, false, this, v); },
        get_feetSpacing: function() { return CS.Call(2, 261, 6, false, this); },
        set_feetSpacing: function(v) { return CS.Call(3, 261, 6, false, this, v); },
        get_hasTranslationDoF: function() { return CS.Call(2, 261, 7, false, this); },
        set_hasTranslationDoF: function(v) { return CS.Call(3, 261, 7, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$HumanDescription);

// UnityEngine.AvatarBuilder
var UnityEngine$AvatarBuilder = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.AvatarBuilder",
    Kind: "Class",
    baseTypeName: "System.Object",
    staticDefinition: {
        BuildGenericAvatar: function(a0/*GameObject*/, a1/*String*/) { 
            return CS.Call(4, 262, 0, true, a0, a1); //Ret: Avatar
        },
        BuildHumanAvatar: function(a0/*GameObject*/, a1/*HumanDescription*/) { 
            return CS.Call(4, 262, 1, true, a0, a1); //Ret: Avatar
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 262, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$AvatarBuilder);

// UnityEngine.RuntimeAnimatorController
var UnityEngine$RuntimeAnimatorController = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.RuntimeAnimatorController",
    Kind: "Class",
    baseTypeName: "UnityEngine.Object",
    definition: {
        ctor: function() { CS.Call(5, 263, 0, true, this); },
        get_animationClips: function() { return CS.Call(2, 263, 0, false, this); },
        set_animationClips: function(v) { return CS.Call(3, 263, 0, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$RuntimeAnimatorController);

// UnityEngine.Avatar
var UnityEngine$Avatar = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Avatar",
    Kind: "Class",
    baseTypeName: "UnityEngine.Object",
    definition: {
        get_isValid: function() { return CS.Call(2, 264, 0, false, this); },
        set_isValid: function(v) { return CS.Call(3, 264, 0, false, this, v); },
        get_isHuman: function() { return CS.Call(2, 264, 1, false, this); },
        set_isHuman: function(v) { return CS.Call(3, 264, 1, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Avatar);

// UnityEngine.HumanTrait
var UnityEngine$HumanTrait = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.HumanTrait",
    Kind: "Class",
    baseTypeName: "System.Object",
    staticDefinition: {
        get_MuscleCount: function() { return CS.Call(2, 265, 0, true); },
        set_MuscleCount: function(v) { return CS.Call(3, 265, 0, true, v); },
        get_MuscleName: function() { return CS.Call(2, 265, 1, true); },
        set_MuscleName: function(v) { return CS.Call(3, 265, 1, true, v); },
        get_BoneCount: function() { return CS.Call(2, 265, 2, true); },
        set_BoneCount: function(v) { return CS.Call(3, 265, 2, true, v); },
        get_BoneName: function() { return CS.Call(2, 265, 3, true); },
        set_BoneName: function(v) { return CS.Call(3, 265, 3, true, v); },
        get_RequiredBoneCount: function() { return CS.Call(2, 265, 4, true); },
        set_RequiredBoneCount: function(v) { return CS.Call(3, 265, 4, true, v); },
        BoneFromMuscle: function(a0/*Int32*/) { 
            return CS.Call(4, 265, 0, true, a0); //Ret: Int32
        },
        GetMuscleDefaultMax: function(a0/*Int32*/) { 
            return CS.Call(4, 265, 1, true, a0); //Ret: Single
        },
        GetMuscleDefaultMin: function(a0/*Int32*/) { 
            return CS.Call(4, 265, 2, true, a0); //Ret: Single
        },
        GetParentBone: function(a0/*Int32*/) { 
            return CS.Call(4, 265, 3, true, a0); //Ret: Int32
        },
        MuscleFromBone: function(a0/*Int32*/, a1/*Int32*/) { 
            return CS.Call(4, 265, 4, true, a0, a1); //Ret: Int32
        },
        RequiredBone: function(a0/*Int32*/) { 
            return CS.Call(4, 265, 5, true, a0); //Ret: Boolean
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 265, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$HumanTrait);

// UnityEngine.HumanPose
var UnityEngine$HumanPose = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.HumanPose",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    fields: {
        bodyPosition: {
            get: function() { return CS.Call(0, 266, 0, false, this); }, 
            set: function(v) { return CS.Call(1, 266, 0, false, this, v); }
        },
        bodyRotation: {
            get: function() { return CS.Call(0, 266, 1, false, this); }, 
            set: function(v) { return CS.Call(1, 266, 1, false, this, v); }
        },
        muscles: {
            get: function() { return CS.Call(0, 266, 2, false, this); }, 
            set: function(v) { return CS.Call(1, 266, 2, false, this, v); }
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 266, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$HumanPose);

// UnityEngine.HumanPoseHandler
var UnityEngine$HumanPoseHandler = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.HumanPoseHandler",
    Kind: "Class",
    baseTypeName: "System.Object",
    interfaceNames: ["System.IDisposable"],
    definition: {
        ctor: function(a0, a1) { CS.Call(5, 267, 0, true, this, a0, a1); },
        Dispose: function() { 
            return CS.Call(4, 267, 0, false, this); //Ret: Void
        },
        GetHumanPose: function(a0/*HumanPose&*/) { 
            return CS.Call(4, 267, 1, false, this, a0); //Ret: Void
        },
        SetHumanPose: function(a0/*HumanPose&*/) { 
            return CS.Call(4, 267, 2, false, this, a0); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$HumanPoseHandler);

// UnityEngine.TextGenerationSettings
var UnityEngine$TextGenerationSettings = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.TextGenerationSettings",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    fields: {
        font: {
            get: function() { return CS.Call(0, 268, 0, false, this); }, 
            set: function(v) { return CS.Call(1, 268, 0, false, this, v); }
        },
        color: {
            get: function() { return CS.Call(0, 268, 1, false, this); }, 
            set: function(v) { return CS.Call(1, 268, 1, false, this, v); }
        },
        fontSize: {
            get: function() { return CS.Call(0, 268, 2, false, this); }, 
            set: function(v) { return CS.Call(1, 268, 2, false, this, v); }
        },
        lineSpacing: {
            get: function() { return CS.Call(0, 268, 3, false, this); }, 
            set: function(v) { return CS.Call(1, 268, 3, false, this, v); }
        },
        richText: {
            get: function() { return CS.Call(0, 268, 4, false, this); }, 
            set: function(v) { return CS.Call(1, 268, 4, false, this, v); }
        },
        scaleFactor: {
            get: function() { return CS.Call(0, 268, 5, false, this); }, 
            set: function(v) { return CS.Call(1, 268, 5, false, this, v); }
        },
        fontStyle: {
            get: function() { return CS.Call(0, 268, 6, false, this); }, 
            set: function(v) { return CS.Call(1, 268, 6, false, this, v); }
        },
        textAnchor: {
            get: function() { return CS.Call(0, 268, 7, false, this); }, 
            set: function(v) { return CS.Call(1, 268, 7, false, this, v); }
        },
        alignByGeometry: {
            get: function() { return CS.Call(0, 268, 8, false, this); }, 
            set: function(v) { return CS.Call(1, 268, 8, false, this, v); }
        },
        resizeTextForBestFit: {
            get: function() { return CS.Call(0, 268, 9, false, this); }, 
            set: function(v) { return CS.Call(1, 268, 9, false, this, v); }
        },
        resizeTextMinSize: {
            get: function() { return CS.Call(0, 268, 10, false, this); }, 
            set: function(v) { return CS.Call(1, 268, 10, false, this, v); }
        },
        resizeTextMaxSize: {
            get: function() { return CS.Call(0, 268, 11, false, this); }, 
            set: function(v) { return CS.Call(1, 268, 11, false, this, v); }
        },
        updateBounds: {
            get: function() { return CS.Call(0, 268, 12, false, this); }, 
            set: function(v) { return CS.Call(1, 268, 12, false, this, v); }
        },
        verticalOverflow: {
            get: function() { return CS.Call(0, 268, 13, false, this); }, 
            set: function(v) { return CS.Call(1, 268, 13, false, this, v); }
        },
        horizontalOverflow: {
            get: function() { return CS.Call(0, 268, 14, false, this); }, 
            set: function(v) { return CS.Call(1, 268, 14, false, this, v); }
        },
        generationExtents: {
            get: function() { return CS.Call(0, 268, 15, false, this); }, 
            set: function(v) { return CS.Call(1, 268, 15, false, this, v); }
        },
        pivot: {
            get: function() { return CS.Call(0, 268, 16, false, this); }, 
            set: function(v) { return CS.Call(1, 268, 16, false, this, v); }
        },
        generateOutOfBounds: {
            get: function() { return CS.Call(0, 268, 17, false, this); }, 
            set: function(v) { return CS.Call(1, 268, 17, false, this, v); }
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 268, 0, true, this); },
        Equals$$TextGenerationSettings: function(a0/*TextGenerationSettings*/) { 
            return CS.Call(4, 268, 0, false, this, a0); //Ret: Boolean
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$TextGenerationSettings);

// UnityEngine.GUIText
var UnityEngine$GUIText = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.GUIText",
    Kind: "Class",
    baseTypeName: "UnityEngine.GUIElement",
    definition: {
        ctor: function() { CS.Call(5, 269, 0, true, this); },
        get_text: function() { return CS.Call(2, 269, 0, false, this); },
        set_text: function(v) { return CS.Call(3, 269, 0, false, this, v); },
        get_material: function() { return CS.Call(2, 269, 1, false, this); },
        set_material: function(v) { return CS.Call(3, 269, 1, false, this, v); },
        get_pixelOffset: function() { return CS.Call(2, 269, 2, false, this); },
        set_pixelOffset: function(v) { return CS.Call(3, 269, 2, false, this, v); },
        get_font: function() { return CS.Call(2, 269, 3, false, this); },
        set_font: function(v) { return CS.Call(3, 269, 3, false, this, v); },
        get_alignment: function() { return CS.Call(2, 269, 4, false, this); },
        set_alignment: function(v) { return CS.Call(3, 269, 4, false, this, v); },
        get_anchor: function() { return CS.Call(2, 269, 5, false, this); },
        set_anchor: function(v) { return CS.Call(3, 269, 5, false, this, v); },
        get_lineSpacing: function() { return CS.Call(2, 269, 6, false, this); },
        set_lineSpacing: function(v) { return CS.Call(3, 269, 6, false, this, v); },
        get_tabSize: function() { return CS.Call(2, 269, 7, false, this); },
        set_tabSize: function(v) { return CS.Call(3, 269, 7, false, this, v); },
        get_fontSize: function() { return CS.Call(2, 269, 8, false, this); },
        set_fontSize: function(v) { return CS.Call(3, 269, 8, false, this, v); },
        get_fontStyle: function() { return CS.Call(2, 269, 9, false, this); },
        set_fontStyle: function(v) { return CS.Call(3, 269, 9, false, this, v); },
        get_richText: function() { return CS.Call(2, 269, 10, false, this); },
        set_richText: function(v) { return CS.Call(3, 269, 10, false, this, v); },
        get_color: function() { return CS.Call(2, 269, 11, false, this); },
        set_color: function(v) { return CS.Call(3, 269, 11, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$GUIText);

// UnityEngine.TextMesh
var UnityEngine$TextMesh = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.TextMesh",
    Kind: "Class",
    baseTypeName: "UnityEngine.Component",
    definition: {
        ctor: function() { CS.Call(5, 270, 0, true, this); },
        get_text: function() { return CS.Call(2, 270, 0, false, this); },
        set_text: function(v) { return CS.Call(3, 270, 0, false, this, v); },
        get_font: function() { return CS.Call(2, 270, 1, false, this); },
        set_font: function(v) { return CS.Call(3, 270, 1, false, this, v); },
        get_fontSize: function() { return CS.Call(2, 270, 2, false, this); },
        set_fontSize: function(v) { return CS.Call(3, 270, 2, false, this, v); },
        get_fontStyle: function() { return CS.Call(2, 270, 3, false, this); },
        set_fontStyle: function(v) { return CS.Call(3, 270, 3, false, this, v); },
        get_offsetZ: function() { return CS.Call(2, 270, 4, false, this); },
        set_offsetZ: function(v) { return CS.Call(3, 270, 4, false, this, v); },
        get_alignment: function() { return CS.Call(2, 270, 5, false, this); },
        set_alignment: function(v) { return CS.Call(3, 270, 5, false, this, v); },
        get_anchor: function() { return CS.Call(2, 270, 6, false, this); },
        set_anchor: function(v) { return CS.Call(3, 270, 6, false, this, v); },
        get_characterSize: function() { return CS.Call(2, 270, 7, false, this); },
        set_characterSize: function(v) { return CS.Call(3, 270, 7, false, this, v); },
        get_lineSpacing: function() { return CS.Call(2, 270, 8, false, this); },
        set_lineSpacing: function(v) { return CS.Call(3, 270, 8, false, this, v); },
        get_tabSize: function() { return CS.Call(2, 270, 9, false, this); },
        set_tabSize: function(v) { return CS.Call(3, 270, 9, false, this, v); },
        get_richText: function() { return CS.Call(2, 270, 10, false, this); },
        set_richText: function(v) { return CS.Call(3, 270, 10, false, this, v); },
        get_color: function() { return CS.Call(2, 270, 11, false, this); },
        set_color: function(v) { return CS.Call(3, 270, 11, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$TextMesh);

// UnityEngine.CharacterInfo
var UnityEngine$CharacterInfo = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.CharacterInfo",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    fields: {
        index: {
            get: function() { return CS.Call(0, 271, 0, false, this); }, 
            set: function(v) { return CS.Call(1, 271, 0, false, this, v); }
        },
        size: {
            get: function() { return CS.Call(0, 271, 1, false, this); }, 
            set: function(v) { return CS.Call(1, 271, 1, false, this, v); }
        },
        style: {
            get: function() { return CS.Call(0, 271, 2, false, this); }, 
            set: function(v) { return CS.Call(1, 271, 2, false, this, v); }
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 271, 0, true, this); },
        get_advance: function() { return CS.Call(2, 271, 0, false, this); },
        set_advance: function(v) { return CS.Call(3, 271, 0, false, this, v); },
        get_glyphWidth: function() { return CS.Call(2, 271, 1, false, this); },
        set_glyphWidth: function(v) { return CS.Call(3, 271, 1, false, this, v); },
        get_glyphHeight: function() { return CS.Call(2, 271, 2, false, this); },
        set_glyphHeight: function(v) { return CS.Call(3, 271, 2, false, this, v); },
        get_bearing: function() { return CS.Call(2, 271, 3, false, this); },
        set_bearing: function(v) { return CS.Call(3, 271, 3, false, this, v); },
        get_minY: function() { return CS.Call(2, 271, 4, false, this); },
        set_minY: function(v) { return CS.Call(3, 271, 4, false, this, v); },
        get_maxY: function() { return CS.Call(2, 271, 5, false, this); },
        set_maxY: function(v) { return CS.Call(3, 271, 5, false, this, v); },
        get_minX: function() { return CS.Call(2, 271, 6, false, this); },
        set_minX: function(v) { return CS.Call(3, 271, 6, false, this, v); },
        get_maxX: function() { return CS.Call(2, 271, 7, false, this); },
        set_maxX: function(v) { return CS.Call(3, 271, 7, false, this, v); },
        get_uvBottomLeft: function() { return CS.Call(2, 271, 8, false, this); },
        set_uvBottomLeft: function(v) { return CS.Call(3, 271, 8, false, this, v); },
        get_uvBottomRight: function() { return CS.Call(2, 271, 9, false, this); },
        set_uvBottomRight: function(v) { return CS.Call(3, 271, 9, false, this, v); },
        get_uvTopRight: function() { return CS.Call(2, 271, 10, false, this); },
        set_uvTopRight: function(v) { return CS.Call(3, 271, 10, false, this, v); },
        get_uvTopLeft: function() { return CS.Call(2, 271, 11, false, this); },
        set_uvTopLeft: function(v) { return CS.Call(3, 271, 11, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$CharacterInfo);

// UnityEngine.Font
var UnityEngine$Font = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Font",
    Kind: "Class",
    baseTypeName: "UnityEngine.Object",
    staticDefinition: {
        add_textureRebuilt: function(a0/*Action`1*/) { 
            return CS.Call(4, 272, 7, true, a0); //Ret: Void
        },
        CreateDynamicFontFromOSFont$$String$Array$$Int32: function(a0/*String[]*/, a1/*Int32*/) { 
            return CS.Call(4, 272, 8, true, a0, a1); //Ret: Font
        },
        CreateDynamicFontFromOSFont$$String$$Int32: function(a0/*String*/, a1/*Int32*/) { 
            return CS.Call(4, 272, 9, true, a0, a1); //Ret: Font
        },
        GetMaxVertsForString: function(a0/*String*/) { 
            return CS.Call(4, 272, 10, true, a0); //Ret: Int32
        },
        GetOSInstalledFontNames: function() { 
            return CS.Call(4, 272, 11, true); //Ret: String[]
        },
        remove_textureRebuilt: function(a0/*Action`1*/) { 
            return CS.Call(4, 272, 12, true, a0); //Ret: Void
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 272, 0, true, this); },
        ctor$$String: function(a0) { CS.Call(5, 272, 1, true, this, a0); },
        get_material: function() { return CS.Call(2, 272, 0, false, this); },
        set_material: function(v) { return CS.Call(3, 272, 0, false, this, v); },
        get_fontNames: function() { return CS.Call(2, 272, 1, false, this); },
        set_fontNames: function(v) { return CS.Call(3, 272, 1, false, this, v); },
        get_characterInfo: function() { return CS.Call(2, 272, 2, false, this); },
        set_characterInfo: function(v) { return CS.Call(3, 272, 2, false, this, v); },
        get_dynamic: function() { return CS.Call(2, 272, 3, false, this); },
        set_dynamic: function(v) { return CS.Call(3, 272, 3, false, this, v); },
        get_ascent: function() { return CS.Call(2, 272, 4, false, this); },
        set_ascent: function(v) { return CS.Call(3, 272, 4, false, this, v); },
        get_lineHeight: function() { return CS.Call(2, 272, 5, false, this); },
        set_lineHeight: function(v) { return CS.Call(3, 272, 5, false, this, v); },
        get_fontSize: function() { return CS.Call(2, 272, 6, false, this); },
        set_fontSize: function(v) { return CS.Call(3, 272, 6, false, this, v); },
        GetCharacterInfo$$Char$$CharacterInfo$$Int32$$FontStyle: function(a0/*Char*/, a1/*CharacterInfo&*/, a2/*Int32*/, a3/*FontStyle*/) { 
            return CS.Call(4, 272, 0, false, this, a0, a1, a2, a3); //Ret: Boolean
        },
        GetCharacterInfo$$Char$$CharacterInfo$$Int32: function(a0/*Char*/, a1/*CharacterInfo&*/, a2/*Int32*/) { 
            return CS.Call(4, 272, 1, false, this, a0, a1, a2); //Ret: Boolean
        },
        GetCharacterInfo$$Char$$CharacterInfo: function(a0/*Char*/, a1/*CharacterInfo&*/) { 
            return CS.Call(4, 272, 2, false, this, a0, a1); //Ret: Boolean
        },
        HasCharacter: function(a0/*Char*/) { 
            return CS.Call(4, 272, 3, false, this, a0); //Ret: Boolean
        },
        RequestCharactersInTexture$$String$$Int32$$FontStyle: function(a0/*String*/, a1/*Int32*/, a2/*FontStyle*/) { 
            return CS.Call(4, 272, 4, false, this, a0, a1, a2); //Ret: Void
        },
        RequestCharactersInTexture$$String$$Int32: function(a0/*String*/, a1/*Int32*/) { 
            return CS.Call(4, 272, 5, false, this, a0, a1); //Ret: Void
        },
        RequestCharactersInTexture$$String: function(a0/*String*/) { 
            return CS.Call(4, 272, 6, false, this, a0); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Font);

// UnityEngine.UICharInfo
var UnityEngine$UICharInfo = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.UICharInfo",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    fields: {
        cursorPos: {
            get: function() { return CS.Call(0, 273, 0, false, this); }, 
            set: function(v) { return CS.Call(1, 273, 0, false, this, v); }
        },
        charWidth: {
            get: function() { return CS.Call(0, 273, 1, false, this); }, 
            set: function(v) { return CS.Call(1, 273, 1, false, this, v); }
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 273, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$UICharInfo);

// UnityEngine.UILineInfo
var UnityEngine$UILineInfo = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.UILineInfo",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    fields: {
        startCharIdx: {
            get: function() { return CS.Call(0, 274, 0, false, this); }, 
            set: function(v) { return CS.Call(1, 274, 0, false, this, v); }
        },
        height: {
            get: function() { return CS.Call(0, 274, 1, false, this); }, 
            set: function(v) { return CS.Call(1, 274, 1, false, this, v); }
        },
        topY: {
            get: function() { return CS.Call(0, 274, 2, false, this); }, 
            set: function(v) { return CS.Call(1, 274, 2, false, this, v); }
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 274, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$UILineInfo);

// UnityEngine.UIVertex
var UnityEngine$UIVertex = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.UIVertex",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    staticFields: {
        simpleVert: {
            get: function() { return CS.Call(0, 275, 6, true); }, 
            set: function(v) { return CS.Call(1, 275, 6, true, v); }
        },
    },
    fields: {
        position: {
            get: function() { return CS.Call(0, 275, 0, false, this); }, 
            set: function(v) { return CS.Call(1, 275, 0, false, this, v); }
        },
        normal: {
            get: function() { return CS.Call(0, 275, 1, false, this); }, 
            set: function(v) { return CS.Call(1, 275, 1, false, this, v); }
        },
        color: {
            get: function() { return CS.Call(0, 275, 2, false, this); }, 
            set: function(v) { return CS.Call(1, 275, 2, false, this, v); }
        },
        uv0: {
            get: function() { return CS.Call(0, 275, 3, false, this); }, 
            set: function(v) { return CS.Call(1, 275, 3, false, this, v); }
        },
        uv1: {
            get: function() { return CS.Call(0, 275, 4, false, this); }, 
            set: function(v) { return CS.Call(1, 275, 4, false, this, v); }
        },
        tangent: {
            get: function() { return CS.Call(0, 275, 5, false, this); }, 
            set: function(v) { return CS.Call(1, 275, 5, false, this, v); }
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 275, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$UIVertex);

// UnityEngine.Event
var UnityEngine$Event = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Event",
    Kind: "Class",
    baseTypeName: "System.Object",
    staticDefinition: {
        get_current: function() { return CS.Call(2, 276, 9, true); },
        set_current: function(v) { return CS.Call(3, 276, 9, true, v); },
        GetEventCount: function() { 
            return CS.Call(4, 276, 5, true); //Ret: Int32
        },
        KeyboardEvent: function(a0/*String*/) { 
            return CS.Call(4, 276, 6, true, a0); //Ret: Event
        },
        PopEvent: function(a0/*Event*/) { 
            return CS.Call(4, 276, 7, true, a0); //Ret: Boolean
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 276, 0, true, this); },
        ctor$$Int32: function(a0) { CS.Call(5, 276, 1, true, this, a0); },
        ctor$$Event: function(a0) { CS.Call(5, 276, 2, true, this, a0); },
        get_mousePosition: function() { return CS.Call(2, 276, 0, false, this); },
        set_mousePosition: function(v) { return CS.Call(3, 276, 0, false, this, v); },
        get_delta: function() { return CS.Call(2, 276, 1, false, this); },
        set_delta: function(v) { return CS.Call(3, 276, 1, false, this, v); },
        get_shift: function() { return CS.Call(2, 276, 2, false, this); },
        set_shift: function(v) { return CS.Call(3, 276, 2, false, this, v); },
        get_control: function() { return CS.Call(2, 276, 3, false, this); },
        set_control: function(v) { return CS.Call(3, 276, 3, false, this, v); },
        get_alt: function() { return CS.Call(2, 276, 4, false, this); },
        set_alt: function(v) { return CS.Call(3, 276, 4, false, this, v); },
        get_command: function() { return CS.Call(2, 276, 5, false, this); },
        set_command: function(v) { return CS.Call(3, 276, 5, false, this, v); },
        get_capsLock: function() { return CS.Call(2, 276, 6, false, this); },
        set_capsLock: function(v) { return CS.Call(3, 276, 6, false, this, v); },
        get_numeric: function() { return CS.Call(2, 276, 7, false, this); },
        set_numeric: function(v) { return CS.Call(3, 276, 7, false, this, v); },
        get_functionKey: function() { return CS.Call(2, 276, 8, false, this); },
        set_functionKey: function(v) { return CS.Call(3, 276, 8, false, this, v); },
        get_isKey: function() { return CS.Call(2, 276, 10, false, this); },
        set_isKey: function(v) { return CS.Call(3, 276, 10, false, this, v); },
        get_isMouse: function() { return CS.Call(2, 276, 11, false, this); },
        set_isMouse: function(v) { return CS.Call(3, 276, 11, false, this, v); },
        get_rawType: function() { return CS.Call(2, 276, 12, false, this); },
        set_rawType: function(v) { return CS.Call(3, 276, 12, false, this, v); },
        get_type: function() { return CS.Call(2, 276, 13, false, this); },
        set_type: function(v) { return CS.Call(3, 276, 13, false, this, v); },
        get_button: function() { return CS.Call(2, 276, 14, false, this); },
        set_button: function(v) { return CS.Call(3, 276, 14, false, this, v); },
        get_modifiers: function() { return CS.Call(2, 276, 15, false, this); },
        set_modifiers: function(v) { return CS.Call(3, 276, 15, false, this, v); },
        get_pressure: function() { return CS.Call(2, 276, 16, false, this); },
        set_pressure: function(v) { return CS.Call(3, 276, 16, false, this, v); },
        get_clickCount: function() { return CS.Call(2, 276, 17, false, this); },
        set_clickCount: function(v) { return CS.Call(3, 276, 17, false, this, v); },
        get_character: function() { return CS.Call(2, 276, 18, false, this); },
        set_character: function(v) { return CS.Call(3, 276, 18, false, this, v); },
        get_commandName: function() { return CS.Call(2, 276, 19, false, this); },
        set_commandName: function(v) { return CS.Call(3, 276, 19, false, this, v); },
        get_keyCode: function() { return CS.Call(2, 276, 20, false, this); },
        set_keyCode: function(v) { return CS.Call(3, 276, 20, false, this, v); },
        get_displayIndex: function() { return CS.Call(2, 276, 21, false, this); },
        set_displayIndex: function(v) { return CS.Call(3, 276, 21, false, this, v); },
        Equals: function(a0/*Object*/) { 
            return CS.Call(4, 276, 0, false, this, a0); //Ret: Boolean
        },
        GetHashCode: function() { 
            return CS.Call(4, 276, 1, false, this); //Ret: Int32
        },
        GetTypeForControl: function(a0/*Int32*/) { 
            return CS.Call(4, 276, 2, false, this, a0); //Ret: EventType
        },
        toString: function() { 
            return CS.Call(4, 276, 3, false, this); //Ret: String
        },
        Use: function() { 
            return CS.Call(4, 276, 4, false, this); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Event);

// UnityEngine.GUI
var UnityEngine$GUI = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.GUI",
    Kind: "Class",
    baseTypeName: "System.Object",
    staticDefinition: {
        get_skin: function() { return CS.Call(2, 277, 0, true); },
        set_skin: function(v) { return CS.Call(3, 277, 0, true, v); },
        get_matrix: function() { return CS.Call(2, 277, 1, true); },
        set_matrix: function(v) { return CS.Call(3, 277, 1, true, v); },
        get_tooltip: function() { return CS.Call(2, 277, 2, true); },
        set_tooltip: function(v) { return CS.Call(3, 277, 2, true, v); },
        get_color: function() { return CS.Call(2, 277, 3, true); },
        set_color: function(v) { return CS.Call(3, 277, 3, true, v); },
        get_backgroundColor: function() { return CS.Call(2, 277, 4, true); },
        set_backgroundColor: function(v) { return CS.Call(3, 277, 4, true, v); },
        get_contentColor: function() { return CS.Call(2, 277, 5, true); },
        set_contentColor: function(v) { return CS.Call(3, 277, 5, true, v); },
        get_changed: function() { return CS.Call(2, 277, 6, true); },
        set_changed: function(v) { return CS.Call(3, 277, 6, true, v); },
        get_enabled: function() { return CS.Call(2, 277, 7, true); },
        set_enabled: function(v) { return CS.Call(3, 277, 7, true, v); },
        get_depth: function() { return CS.Call(2, 277, 8, true); },
        set_depth: function(v) { return CS.Call(3, 277, 8, true, v); },
        BeginClip$$Rect$$Vector2$$Vector2$$Boolean: function(a0/*Rect*/, a1/*Vector2*/, a2/*Vector2*/, a3/*Boolean*/) { 
            return CS.Call(4, 277, 0, true, a0, a1, a2, a3); //Ret: Void
        },
        BeginClip$$Rect: function(a0/*Rect*/) { 
            return CS.Call(4, 277, 1, true, a0); //Ret: Void
        },
        BeginGroup$$Rect$$String$$GUIStyle: function(a0/*Rect*/, a1/*String*/, a2/*GUIStyle*/) { 
            return CS.Call(4, 277, 2, true, a0, a1, a2); //Ret: Void
        },
        BeginGroup$$Rect$$GUIContent$$GUIStyle: function(a0/*Rect*/, a1/*GUIContent*/, a2/*GUIStyle*/) { 
            return CS.Call(4, 277, 3, true, a0, a1, a2); //Ret: Void
        },
        BeginGroup$$Rect$$Texture$$GUIStyle: function(a0/*Rect*/, a1/*Texture*/, a2/*GUIStyle*/) { 
            return CS.Call(4, 277, 4, true, a0, a1, a2); //Ret: Void
        },
        BeginGroup$$Rect$$String: function(a0/*Rect*/, a1/*String*/) { 
            return CS.Call(4, 277, 5, true, a0, a1); //Ret: Void
        },
        BeginGroup$$Rect$$Texture: function(a0/*Rect*/, a1/*Texture*/) { 
            return CS.Call(4, 277, 6, true, a0, a1); //Ret: Void
        },
        BeginGroup$$Rect$$GUIStyle: function(a0/*Rect*/, a1/*GUIStyle*/) { 
            return CS.Call(4, 277, 7, true, a0, a1); //Ret: Void
        },
        BeginGroup$$Rect$$GUIContent: function(a0/*Rect*/, a1/*GUIContent*/) { 
            return CS.Call(4, 277, 8, true, a0, a1); //Ret: Void
        },
        BeginGroup$$Rect: function(a0/*Rect*/) { 
            return CS.Call(4, 277, 9, true, a0); //Ret: Void
        },
        BeginScrollView$$Rect$$Vector2$$Rect$$Boolean$$Boolean$$GUIStyle$$GUIStyle: function(a0/*Rect*/, a1/*Vector2*/, a2/*Rect*/, a3/*Boolean*/, a4/*Boolean*/, a5/*GUIStyle*/, a6/*GUIStyle*/) { 
            return CS.Call(4, 277, 10, true, a0, a1, a2, a3, a4, a5, a6); //Ret: Vector2
        },
        BeginScrollView$$Rect$$Vector2$$Rect$$Boolean$$Boolean: function(a0/*Rect*/, a1/*Vector2*/, a2/*Rect*/, a3/*Boolean*/, a4/*Boolean*/) { 
            return CS.Call(4, 277, 11, true, a0, a1, a2, a3, a4); //Ret: Vector2
        },
        BeginScrollView$$Rect$$Vector2$$Rect$$GUIStyle$$GUIStyle: function(a0/*Rect*/, a1/*Vector2*/, a2/*Rect*/, a3/*GUIStyle*/, a4/*GUIStyle*/) { 
            return CS.Call(4, 277, 12, true, a0, a1, a2, a3, a4); //Ret: Vector2
        },
        BeginScrollView$$Rect$$Vector2$$Rect: function(a0/*Rect*/, a1/*Vector2*/, a2/*Rect*/) { 
            return CS.Call(4, 277, 13, true, a0, a1, a2); //Ret: Vector2
        },
        Box$$Rect$$Texture$$GUIStyle: function(a0/*Rect*/, a1/*Texture*/, a2/*GUIStyle*/) { 
            return CS.Call(4, 277, 14, true, a0, a1, a2); //Ret: Void
        },
        Box$$Rect$$GUIContent$$GUIStyle: function(a0/*Rect*/, a1/*GUIContent*/, a2/*GUIStyle*/) { 
            return CS.Call(4, 277, 15, true, a0, a1, a2); //Ret: Void
        },
        Box$$Rect$$String$$GUIStyle: function(a0/*Rect*/, a1/*String*/, a2/*GUIStyle*/) { 
            return CS.Call(4, 277, 16, true, a0, a1, a2); //Ret: Void
        },
        Box$$Rect$$String: function(a0/*Rect*/, a1/*String*/) { 
            return CS.Call(4, 277, 17, true, a0, a1); //Ret: Void
        },
        Box$$Rect$$Texture: function(a0/*Rect*/, a1/*Texture*/) { 
            return CS.Call(4, 277, 18, true, a0, a1); //Ret: Void
        },
        Box$$Rect$$GUIContent: function(a0/*Rect*/, a1/*GUIContent*/) { 
            return CS.Call(4, 277, 19, true, a0, a1); //Ret: Void
        },
        BringWindowToBack: function(a0/*Int32*/) { 
            return CS.Call(4, 277, 20, true, a0); //Ret: Void
        },
        BringWindowToFront: function(a0/*Int32*/) { 
            return CS.Call(4, 277, 21, true, a0); //Ret: Void
        },
        Button$$Rect$$GUIContent$$GUIStyle: function(a0/*Rect*/, a1/*GUIContent*/, a2/*GUIStyle*/) { 
            return CS.Call(4, 277, 22, true, a0, a1, a2); //Ret: Boolean
        },
        Button$$Rect$$String$$GUIStyle: function(a0/*Rect*/, a1/*String*/, a2/*GUIStyle*/) { 
            return CS.Call(4, 277, 23, true, a0, a1, a2); //Ret: Boolean
        },
        Button$$Rect$$Texture$$GUIStyle: function(a0/*Rect*/, a1/*Texture*/, a2/*GUIStyle*/) { 
            return CS.Call(4, 277, 24, true, a0, a1, a2); //Ret: Boolean
        },
        Button$$Rect$$Texture: function(a0/*Rect*/, a1/*Texture*/) { 
            return CS.Call(4, 277, 25, true, a0, a1); //Ret: Boolean
        },
        Button$$Rect$$String: function(a0/*Rect*/, a1/*String*/) { 
            return CS.Call(4, 277, 26, true, a0, a1); //Ret: Boolean
        },
        Button$$Rect$$GUIContent: function(a0/*Rect*/, a1/*GUIContent*/) { 
            return CS.Call(4, 277, 27, true, a0, a1); //Ret: Boolean
        },
        DragWindow$$Rect: function(a0/*Rect*/) { 
            return CS.Call(4, 277, 28, true, a0); //Ret: Void
        },
        DragWindow: function() { 
            return CS.Call(4, 277, 29, true); //Ret: Void
        },
        DrawTexture$$Rect$$Texture$$ScaleMode$$Boolean$$Single: function(a0/*Rect*/, a1/*Texture*/, a2/*ScaleMode*/, a3/*Boolean*/, a4/*Single*/) { 
            return CS.Call(4, 277, 30, true, a0, a1, a2, a3, a4); //Ret: Void
        },
        DrawTexture$$Rect$$Texture$$ScaleMode$$Boolean: function(a0/*Rect*/, a1/*Texture*/, a2/*ScaleMode*/, a3/*Boolean*/) { 
            return CS.Call(4, 277, 31, true, a0, a1, a2, a3); //Ret: Void
        },
        DrawTexture$$Rect$$Texture$$ScaleMode: function(a0/*Rect*/, a1/*Texture*/, a2/*ScaleMode*/) { 
            return CS.Call(4, 277, 32, true, a0, a1, a2); //Ret: Void
        },
        DrawTexture$$Rect$$Texture: function(a0/*Rect*/, a1/*Texture*/) { 
            return CS.Call(4, 277, 33, true, a0, a1); //Ret: Void
        },
        DrawTextureWithTexCoords$$Rect$$Texture$$Rect$$Boolean: function(a0/*Rect*/, a1/*Texture*/, a2/*Rect*/, a3/*Boolean*/) { 
            return CS.Call(4, 277, 34, true, a0, a1, a2, a3); //Ret: Void
        },
        DrawTextureWithTexCoords$$Rect$$Texture$$Rect: function(a0/*Rect*/, a1/*Texture*/, a2/*Rect*/) { 
            return CS.Call(4, 277, 35, true, a0, a1, a2); //Ret: Void
        },
        EndClip: function() { 
            return CS.Call(4, 277, 36, true); //Ret: Void
        },
        EndGroup: function() { 
            return CS.Call(4, 277, 37, true); //Ret: Void
        },
        EndScrollView$$Boolean: function(a0/*Boolean*/) { 
            return CS.Call(4, 277, 38, true, a0); //Ret: Void
        },
        EndScrollView: function() { 
            return CS.Call(4, 277, 39, true); //Ret: Void
        },
        FocusControl: function(a0/*String*/) { 
            return CS.Call(4, 277, 40, true, a0); //Ret: Void
        },
        FocusWindow: function(a0/*Int32*/) { 
            return CS.Call(4, 277, 41, true, a0); //Ret: Void
        },
        GetNameOfFocusedControl: function() { 
            return CS.Call(4, 277, 42, true); //Ret: String
        },
        HorizontalScrollbar$$Rect$$Single$$Single$$Single$$Single$$GUIStyle: function(a0/*Rect*/, a1/*Single*/, a2/*Single*/, a3/*Single*/, a4/*Single*/, a5/*GUIStyle*/) { 
            return CS.Call(4, 277, 43, true, a0, a1, a2, a3, a4, a5); //Ret: Single
        },
        HorizontalScrollbar$$Rect$$Single$$Single$$Single$$Single: function(a0/*Rect*/, a1/*Single*/, a2/*Single*/, a3/*Single*/, a4/*Single*/) { 
            return CS.Call(4, 277, 44, true, a0, a1, a2, a3, a4); //Ret: Single
        },
        HorizontalSlider$$Rect$$Single$$Single$$Single$$GUIStyle$$GUIStyle: function(a0/*Rect*/, a1/*Single*/, a2/*Single*/, a3/*Single*/, a4/*GUIStyle*/, a5/*GUIStyle*/) { 
            return CS.Call(4, 277, 45, true, a0, a1, a2, a3, a4, a5); //Ret: Single
        },
        HorizontalSlider$$Rect$$Single$$Single$$Single: function(a0/*Rect*/, a1/*Single*/, a2/*Single*/, a3/*Single*/) { 
            return CS.Call(4, 277, 46, true, a0, a1, a2, a3); //Ret: Single
        },
        Label$$Rect$$GUIContent$$GUIStyle: function(a0/*Rect*/, a1/*GUIContent*/, a2/*GUIStyle*/) { 
            return CS.Call(4, 277, 47, true, a0, a1, a2); //Ret: Void
        },
        Label$$Rect$$String$$GUIStyle: function(a0/*Rect*/, a1/*String*/, a2/*GUIStyle*/) { 
            return CS.Call(4, 277, 48, true, a0, a1, a2); //Ret: Void
        },
        Label$$Rect$$Texture$$GUIStyle: function(a0/*Rect*/, a1/*Texture*/, a2/*GUIStyle*/) { 
            return CS.Call(4, 277, 49, true, a0, a1, a2); //Ret: Void
        },
        Label$$Rect$$String: function(a0/*Rect*/, a1/*String*/) { 
            return CS.Call(4, 277, 50, true, a0, a1); //Ret: Void
        },
        Label$$Rect$$GUIContent: function(a0/*Rect*/, a1/*GUIContent*/) { 
            return CS.Call(4, 277, 51, true, a0, a1); //Ret: Void
        },
        Label$$Rect$$Texture: function(a0/*Rect*/, a1/*Texture*/) { 
            return CS.Call(4, 277, 52, true, a0, a1); //Ret: Void
        },
        ModalWindow$$Int32$$Rect$$WindowFunction$$String$$GUIStyle: function(a0/*Int32*/, a1/*Rect*/, a2/*WindowFunction*/, a3/*String*/, a4/*GUIStyle*/) { 
            return CS.Call(4, 277, 53, true, a0, a1, a2, a3, a4); //Ret: Rect
        },
        ModalWindow$$Int32$$Rect$$WindowFunction$$Texture$$GUIStyle: function(a0/*Int32*/, a1/*Rect*/, a2/*WindowFunction*/, a3/*Texture*/, a4/*GUIStyle*/) { 
            return CS.Call(4, 277, 54, true, a0, a1, a2, a3, a4); //Ret: Rect
        },
        ModalWindow$$Int32$$Rect$$WindowFunction$$GUIContent$$GUIStyle: function(a0/*Int32*/, a1/*Rect*/, a2/*WindowFunction*/, a3/*GUIContent*/, a4/*GUIStyle*/) { 
            return CS.Call(4, 277, 55, true, a0, a1, a2, a3, a4); //Ret: Rect
        },
        ModalWindow$$Int32$$Rect$$WindowFunction$$GUIContent: function(a0/*Int32*/, a1/*Rect*/, a2/*WindowFunction*/, a3/*GUIContent*/) { 
            return CS.Call(4, 277, 56, true, a0, a1, a2, a3); //Ret: Rect
        },
        ModalWindow$$Int32$$Rect$$WindowFunction$$String: function(a0/*Int32*/, a1/*Rect*/, a2/*WindowFunction*/, a3/*String*/) { 
            return CS.Call(4, 277, 57, true, a0, a1, a2, a3); //Ret: Rect
        },
        ModalWindow$$Int32$$Rect$$WindowFunction$$Texture: function(a0/*Int32*/, a1/*Rect*/, a2/*WindowFunction*/, a3/*Texture*/) { 
            return CS.Call(4, 277, 58, true, a0, a1, a2, a3); //Ret: Rect
        },
        PasswordField$$Rect$$String$$Char$$Int32$$GUIStyle: function(a0/*Rect*/, a1/*String*/, a2/*Char*/, a3/*Int32*/, a4/*GUIStyle*/) { 
            return CS.Call(4, 277, 59, true, a0, a1, a2, a3, a4); //Ret: String
        },
        PasswordField$$Rect$$String$$Char$$GUIStyle: function(a0/*Rect*/, a1/*String*/, a2/*Char*/, a3/*GUIStyle*/) { 
            return CS.Call(4, 277, 60, true, a0, a1, a2, a3); //Ret: String
        },
        PasswordField$$Rect$$String$$Char$$Int32: function(a0/*Rect*/, a1/*String*/, a2/*Char*/, a3/*Int32*/) { 
            return CS.Call(4, 277, 61, true, a0, a1, a2, a3); //Ret: String
        },
        PasswordField$$Rect$$String$$Char: function(a0/*Rect*/, a1/*String*/, a2/*Char*/) { 
            return CS.Call(4, 277, 62, true, a0, a1, a2); //Ret: String
        },
        RepeatButton$$Rect$$GUIContent$$GUIStyle: function(a0/*Rect*/, a1/*GUIContent*/, a2/*GUIStyle*/) { 
            return CS.Call(4, 277, 63, true, a0, a1, a2); //Ret: Boolean
        },
        RepeatButton$$Rect$$Texture$$GUIStyle: function(a0/*Rect*/, a1/*Texture*/, a2/*GUIStyle*/) { 
            return CS.Call(4, 277, 64, true, a0, a1, a2); //Ret: Boolean
        },
        RepeatButton$$Rect$$String$$GUIStyle: function(a0/*Rect*/, a1/*String*/, a2/*GUIStyle*/) { 
            return CS.Call(4, 277, 65, true, a0, a1, a2); //Ret: Boolean
        },
        RepeatButton$$Rect$$GUIContent: function(a0/*Rect*/, a1/*GUIContent*/) { 
            return CS.Call(4, 277, 66, true, a0, a1); //Ret: Boolean
        },
        RepeatButton$$Rect$$Texture: function(a0/*Rect*/, a1/*Texture*/) { 
            return CS.Call(4, 277, 67, true, a0, a1); //Ret: Boolean
        },
        RepeatButton$$Rect$$String: function(a0/*Rect*/, a1/*String*/) { 
            return CS.Call(4, 277, 68, true, a0, a1); //Ret: Boolean
        },
        ScrollTo: function(a0/*Rect*/) { 
            return CS.Call(4, 277, 69, true, a0); //Ret: Void
        },
        ScrollTowards: function(a0/*Rect*/, a1/*Single*/) { 
            return CS.Call(4, 277, 70, true, a0, a1); //Ret: Boolean
        },
        SelectionGrid$$Rect$$Int32$$GUIContent$Array$$Int32$$GUIStyle: function(a0/*Rect*/, a1/*Int32*/, a2/*GUIContent[]*/, a3/*Int32*/, a4/*GUIStyle*/) { 
            return CS.Call(4, 277, 71, true, a0, a1, a2, a3, a4); //Ret: Int32
        },
        SelectionGrid$$Rect$$Int32$$String$Array$$Int32$$GUIStyle: function(a0/*Rect*/, a1/*Int32*/, a2/*String[]*/, a3/*Int32*/, a4/*GUIStyle*/) { 
            return CS.Call(4, 277, 72, true, a0, a1, a2, a3, a4); //Ret: Int32
        },
        SelectionGrid$$Rect$$Int32$$Texture$Array$$Int32$$GUIStyle: function(a0/*Rect*/, a1/*Int32*/, a2/*Texture[]*/, a3/*Int32*/, a4/*GUIStyle*/) { 
            return CS.Call(4, 277, 73, true, a0, a1, a2, a3, a4); //Ret: Int32
        },
        SelectionGrid$$Rect$$Int32$$GUIContent$Array$$Int32: function(a0/*Rect*/, a1/*Int32*/, a2/*GUIContent[]*/, a3/*Int32*/) { 
            return CS.Call(4, 277, 74, true, a0, a1, a2, a3); //Ret: Int32
        },
        SelectionGrid$$Rect$$Int32$$Texture$Array$$Int32: function(a0/*Rect*/, a1/*Int32*/, a2/*Texture[]*/, a3/*Int32*/) { 
            return CS.Call(4, 277, 75, true, a0, a1, a2, a3); //Ret: Int32
        },
        SelectionGrid$$Rect$$Int32$$String$Array$$Int32: function(a0/*Rect*/, a1/*Int32*/, a2/*String[]*/, a3/*Int32*/) { 
            return CS.Call(4, 277, 76, true, a0, a1, a2, a3); //Ret: Int32
        },
        SetNextControlName: function(a0/*String*/) { 
            return CS.Call(4, 277, 77, true, a0); //Ret: Void
        },
        Slider: function(a0/*Rect*/, a1/*Single*/, a2/*Single*/, a3/*Single*/, a4/*Single*/, a5/*GUIStyle*/, a6/*GUIStyle*/, a7/*Boolean*/, a8/*Int32*/) { 
            return CS.Call(4, 277, 78, true, a0, a1, a2, a3, a4, a5, a6, a7, a8); //Ret: Single
        },
        TextArea$$Rect$$String$$Int32$$GUIStyle: function(a0/*Rect*/, a1/*String*/, a2/*Int32*/, a3/*GUIStyle*/) { 
            return CS.Call(4, 277, 79, true, a0, a1, a2, a3); //Ret: String
        },
        TextArea$$Rect$$String$$GUIStyle: function(a0/*Rect*/, a1/*String*/, a2/*GUIStyle*/) { 
            return CS.Call(4, 277, 80, true, a0, a1, a2); //Ret: String
        },
        TextArea$$Rect$$String$$Int32: function(a0/*Rect*/, a1/*String*/, a2/*Int32*/) { 
            return CS.Call(4, 277, 81, true, a0, a1, a2); //Ret: String
        },
        TextArea$$Rect$$String: function(a0/*Rect*/, a1/*String*/) { 
            return CS.Call(4, 277, 82, true, a0, a1); //Ret: String
        },
        TextField$$Rect$$String$$Int32$$GUIStyle: function(a0/*Rect*/, a1/*String*/, a2/*Int32*/, a3/*GUIStyle*/) { 
            return CS.Call(4, 277, 83, true, a0, a1, a2, a3); //Ret: String
        },
        TextField$$Rect$$String$$GUIStyle: function(a0/*Rect*/, a1/*String*/, a2/*GUIStyle*/) { 
            return CS.Call(4, 277, 84, true, a0, a1, a2); //Ret: String
        },
        TextField$$Rect$$String$$Int32: function(a0/*Rect*/, a1/*String*/, a2/*Int32*/) { 
            return CS.Call(4, 277, 85, true, a0, a1, a2); //Ret: String
        },
        TextField$$Rect$$String: function(a0/*Rect*/, a1/*String*/) { 
            return CS.Call(4, 277, 86, true, a0, a1); //Ret: String
        },
        Toggle$$Rect$$Int32$$Boolean$$GUIContent$$GUIStyle: function(a0/*Rect*/, a1/*Int32*/, a2/*Boolean*/, a3/*GUIContent*/, a4/*GUIStyle*/) { 
            return CS.Call(4, 277, 87, true, a0, a1, a2, a3, a4); //Ret: Boolean
        },
        Toggle$$Rect$$Boolean$$GUIContent$$GUIStyle: function(a0/*Rect*/, a1/*Boolean*/, a2/*GUIContent*/, a3/*GUIStyle*/) { 
            return CS.Call(4, 277, 88, true, a0, a1, a2, a3); //Ret: Boolean
        },
        Toggle$$Rect$$Boolean$$Texture$$GUIStyle: function(a0/*Rect*/, a1/*Boolean*/, a2/*Texture*/, a3/*GUIStyle*/) { 
            return CS.Call(4, 277, 89, true, a0, a1, a2, a3); //Ret: Boolean
        },
        Toggle$$Rect$$Boolean$$String$$GUIStyle: function(a0/*Rect*/, a1/*Boolean*/, a2/*String*/, a3/*GUIStyle*/) { 
            return CS.Call(4, 277, 90, true, a0, a1, a2, a3); //Ret: Boolean
        },
        Toggle$$Rect$$Boolean$$String: function(a0/*Rect*/, a1/*Boolean*/, a2/*String*/) { 
            return CS.Call(4, 277, 91, true, a0, a1, a2); //Ret: Boolean
        },
        Toggle$$Rect$$Boolean$$Texture: function(a0/*Rect*/, a1/*Boolean*/, a2/*Texture*/) { 
            return CS.Call(4, 277, 92, true, a0, a1, a2); //Ret: Boolean
        },
        Toggle$$Rect$$Boolean$$GUIContent: function(a0/*Rect*/, a1/*Boolean*/, a2/*GUIContent*/) { 
            return CS.Call(4, 277, 93, true, a0, a1, a2); //Ret: Boolean
        },
        Toolbar$$Rect$$Int32$$GUIContent$Array$$GUIStyle: function(a0/*Rect*/, a1/*Int32*/, a2/*GUIContent[]*/, a3/*GUIStyle*/) { 
            return CS.Call(4, 277, 94, true, a0, a1, a2, a3); //Ret: Int32
        },
        Toolbar$$Rect$$Int32$$Texture$Array$$GUIStyle: function(a0/*Rect*/, a1/*Int32*/, a2/*Texture[]*/, a3/*GUIStyle*/) { 
            return CS.Call(4, 277, 95, true, a0, a1, a2, a3); //Ret: Int32
        },
        Toolbar$$Rect$$Int32$$String$Array$$GUIStyle: function(a0/*Rect*/, a1/*Int32*/, a2/*String[]*/, a3/*GUIStyle*/) { 
            return CS.Call(4, 277, 96, true, a0, a1, a2, a3); //Ret: Int32
        },
        Toolbar$$Rect$$Int32$$GUIContent$Array: function(a0/*Rect*/, a1/*Int32*/, a2/*GUIContent[]*/) { 
            return CS.Call(4, 277, 97, true, a0, a1, a2); //Ret: Int32
        },
        Toolbar$$Rect$$Int32$$Texture$Array: function(a0/*Rect*/, a1/*Int32*/, a2/*Texture[]*/) { 
            return CS.Call(4, 277, 98, true, a0, a1, a2); //Ret: Int32
        },
        Toolbar$$Rect$$Int32$$String$Array: function(a0/*Rect*/, a1/*Int32*/, a2/*String[]*/) { 
            return CS.Call(4, 277, 99, true, a0, a1, a2); //Ret: Int32
        },
        UnfocusWindow: function() { 
            return CS.Call(4, 277, 100, true); //Ret: Void
        },
        VerticalScrollbar$$Rect$$Single$$Single$$Single$$Single$$GUIStyle: function(a0/*Rect*/, a1/*Single*/, a2/*Single*/, a3/*Single*/, a4/*Single*/, a5/*GUIStyle*/) { 
            return CS.Call(4, 277, 101, true, a0, a1, a2, a3, a4, a5); //Ret: Single
        },
        VerticalScrollbar$$Rect$$Single$$Single$$Single$$Single: function(a0/*Rect*/, a1/*Single*/, a2/*Single*/, a3/*Single*/, a4/*Single*/) { 
            return CS.Call(4, 277, 102, true, a0, a1, a2, a3, a4); //Ret: Single
        },
        VerticalSlider$$Rect$$Single$$Single$$Single$$GUIStyle$$GUIStyle: function(a0/*Rect*/, a1/*Single*/, a2/*Single*/, a3/*Single*/, a4/*GUIStyle*/, a5/*GUIStyle*/) { 
            return CS.Call(4, 277, 103, true, a0, a1, a2, a3, a4, a5); //Ret: Single
        },
        VerticalSlider$$Rect$$Single$$Single$$Single: function(a0/*Rect*/, a1/*Single*/, a2/*Single*/, a3/*Single*/) { 
            return CS.Call(4, 277, 104, true, a0, a1, a2, a3); //Ret: Single
        },
        Window$$Int32$$Rect$$WindowFunction$$Texture$$GUIStyle: function(a0/*Int32*/, a1/*Rect*/, a2/*WindowFunction*/, a3/*Texture*/, a4/*GUIStyle*/) { 
            return CS.Call(4, 277, 105, true, a0, a1, a2, a3, a4); //Ret: Rect
        },
        Window$$Int32$$Rect$$WindowFunction$$String$$GUIStyle: function(a0/*Int32*/, a1/*Rect*/, a2/*WindowFunction*/, a3/*String*/, a4/*GUIStyle*/) { 
            return CS.Call(4, 277, 106, true, a0, a1, a2, a3, a4); //Ret: Rect
        },
        Window$$Int32$$Rect$$WindowFunction$$GUIContent$$GUIStyle: function(a0/*Int32*/, a1/*Rect*/, a2/*WindowFunction*/, a3/*GUIContent*/, a4/*GUIStyle*/) { 
            return CS.Call(4, 277, 107, true, a0, a1, a2, a3, a4); //Ret: Rect
        },
        Window$$Int32$$Rect$$WindowFunction$$String: function(a0/*Int32*/, a1/*Rect*/, a2/*WindowFunction*/, a3/*String*/) { 
            return CS.Call(4, 277, 108, true, a0, a1, a2, a3); //Ret: Rect
        },
        Window$$Int32$$Rect$$WindowFunction$$Texture: function(a0/*Int32*/, a1/*Rect*/, a2/*WindowFunction*/, a3/*Texture*/) { 
            return CS.Call(4, 277, 109, true, a0, a1, a2, a3); //Ret: Rect
        },
        Window$$Int32$$Rect$$WindowFunction$$GUIContent: function(a0/*Int32*/, a1/*Rect*/, a2/*WindowFunction*/, a3/*GUIContent*/) { 
            return CS.Call(4, 277, 110, true, a0, a1, a2, a3); //Ret: Rect
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 277, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$GUI);

// UnityEngine.GUI+Scope
var UnityEngine$GUI$Scope = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.GUI.Scope",
    Kind: "Class",
    baseTypeName: "System.Object",
    interfaceNames: ["System.IDisposable"],
    definition: {
        Dispose: function() { 
            return CS.Call(4, 278, 0, false, this); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$GUI$Scope);

// UnityEngine.GUI+GroupScope
var UnityEngine$GUI$GroupScope = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.GUI.GroupScope",
    Kind: "Class",
    baseTypeName: "UnityEngine.GUI.Scope",
    interfaceNames: ["System.IDisposable"],
    definition: {
        ctor$$Rect: function(a0) { CS.Call(5, 279, 0, true, this, a0); },
        ctor$$Rect$$String: function(a0, a1) { CS.Call(5, 279, 1, true, this, a0, a1); },
        ctor$$Rect$$Texture: function(a0, a1) { CS.Call(5, 279, 2, true, this, a0, a1); },
        ctor$$Rect$$GUIContent: function(a0, a1) { CS.Call(5, 279, 3, true, this, a0, a1); },
        ctor$$Rect$$GUIStyle: function(a0, a1) { CS.Call(5, 279, 4, true, this, a0, a1); },
        ctor$$Rect$$String$$GUIStyle: function(a0, a1, a2) { CS.Call(5, 279, 5, true, this, a0, a1, a2); },
        ctor$$Rect$$Texture$$GUIStyle: function(a0, a1, a2) { CS.Call(5, 279, 6, true, this, a0, a1, a2); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$GUI$GroupScope);

// UnityEngine.GUI+ScrollViewScope
var UnityEngine$GUI$ScrollViewScope = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.GUI.ScrollViewScope",
    Kind: "Class",
    baseTypeName: "UnityEngine.GUI.Scope",
    interfaceNames: ["System.IDisposable"],
    definition: {
        ctor$$Rect$$Vector2$$Rect: function(a0, a1, a2) { CS.Call(5, 280, 0, true, this, a0, a1, a2); },
        ctor$$Rect$$Vector2$$Rect$$Boolean$$Boolean: function(a0, a1, a2, a3, a4) { CS.Call(5, 280, 1, true, this, a0, a1, a2, a3, a4); },
        ctor$$Rect$$Vector2$$Rect$$GUIStyle$$GUIStyle: function(a0, a1, a2, a3, a4) { CS.Call(5, 280, 2, true, this, a0, a1, a2, a3, a4); },
        ctor$$Rect$$Vector2$$Rect$$Boolean$$Boolean$$GUIStyle$$GUIStyle: function(a0, a1, a2, a3, a4, a5, a6) { CS.Call(5, 280, 3, true, this, a0, a1, a2, a3, a4, a5, a6); },
        get_scrollPosition: function() { return CS.Call(2, 280, 0, false, this); },
        set_scrollPosition: function(v) { return CS.Call(3, 280, 0, false, this, v); },
        get_handleScrollWheel: function() { return CS.Call(2, 280, 1, false, this); },
        set_handleScrollWheel: function(v) { return CS.Call(3, 280, 1, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$GUI$ScrollViewScope);

// UnityEngine.GUI+ClipScope
var UnityEngine$GUI$ClipScope = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.GUI.ClipScope",
    Kind: "Class",
    baseTypeName: "UnityEngine.GUI.Scope",
    interfaceNames: ["System.IDisposable"],
    definition: {
        ctor: function(a0) { CS.Call(5, 281, 0, true, this, a0); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$GUI$ClipScope);

// UnityEngine.GUIContent
var UnityEngine$GUIContent = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.GUIContent",
    Kind: "Class",
    baseTypeName: "System.Object",
    staticFields: {
        none: {
            get: function() { return CS.Call(0, 282, 0, true); }, 
            set: function(v) { return CS.Call(1, 282, 0, true, v); }
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 282, 0, true, this); },
        ctor$$String: function(a0) { CS.Call(5, 282, 1, true, this, a0); },
        ctor$$Texture: function(a0) { CS.Call(5, 282, 2, true, this, a0); },
        ctor$$String$$Texture: function(a0, a1) { CS.Call(5, 282, 3, true, this, a0, a1); },
        ctor$$String$$String: function(a0, a1) { CS.Call(5, 282, 4, true, this, a0, a1); },
        ctor$$Texture$$String: function(a0, a1) { CS.Call(5, 282, 5, true, this, a0, a1); },
        ctor$$String$$Texture$$String: function(a0, a1, a2) { CS.Call(5, 282, 6, true, this, a0, a1, a2); },
        ctor$$GUIContent: function(a0) { CS.Call(5, 282, 7, true, this, a0); },
        get_text: function() { return CS.Call(2, 282, 0, false, this); },
        set_text: function(v) { return CS.Call(3, 282, 0, false, this, v); },
        get_image: function() { return CS.Call(2, 282, 1, false, this); },
        set_image: function(v) { return CS.Call(3, 282, 1, false, this, v); },
        get_tooltip: function() { return CS.Call(2, 282, 2, false, this); },
        set_tooltip: function(v) { return CS.Call(3, 282, 2, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$GUIContent);

// UnityEngine.GUILayout
var UnityEngine$GUILayout = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.GUILayout",
    Kind: "Class",
    baseTypeName: "System.Object",
    staticDefinition: {
        BeginArea$$Rect$$String$$GUIStyle: function(a0/*Rect*/, a1/*String*/, a2/*GUIStyle*/) { 
            return CS.Call(4, 283, 0, true, a0, a1, a2); //Ret: Void
        },
        BeginArea$$Rect$$Texture$$GUIStyle: function(a0/*Rect*/, a1/*Texture*/, a2/*GUIStyle*/) { 
            return CS.Call(4, 283, 1, true, a0, a1, a2); //Ret: Void
        },
        BeginArea$$Rect$$GUIContent$$GUIStyle: function(a0/*Rect*/, a1/*GUIContent*/, a2/*GUIStyle*/) { 
            return CS.Call(4, 283, 2, true, a0, a1, a2); //Ret: Void
        },
        BeginArea$$Rect$$GUIStyle: function(a0/*Rect*/, a1/*GUIStyle*/) { 
            return CS.Call(4, 283, 3, true, a0, a1); //Ret: Void
        },
        BeginArea$$Rect$$GUIContent: function(a0/*Rect*/, a1/*GUIContent*/) { 
            return CS.Call(4, 283, 4, true, a0, a1); //Ret: Void
        },
        BeginArea$$Rect$$Texture: function(a0/*Rect*/, a1/*Texture*/) { 
            return CS.Call(4, 283, 5, true, a0, a1); //Ret: Void
        },
        BeginArea$$Rect$$String: function(a0/*Rect*/, a1/*String*/) { 
            return CS.Call(4, 283, 6, true, a0, a1); //Ret: Void
        },
        BeginArea$$Rect: function(a0/*Rect*/) { 
            return CS.Call(4, 283, 7, true, a0); //Ret: Void
        },
        BeginHorizontal$$GUIContent$$GUIStyle$$GUILayoutOption$Array: function(a0/*GUIContent*/, a1/*GUIStyle*/, a2/*GUILayoutOption[]*/) { 
            return CS.Call(4, 283, 8, true, a0, a1, jsb_formatParamsArray(2, a2, arguments)); //Ret: Void
        },
        BeginHorizontal$$Texture$$GUIStyle$$GUILayoutOption$Array: function(a0/*Texture*/, a1/*GUIStyle*/, a2/*GUILayoutOption[]*/) { 
            return CS.Call(4, 283, 9, true, a0, a1, jsb_formatParamsArray(2, a2, arguments)); //Ret: Void
        },
        BeginHorizontal$$String$$GUIStyle$$GUILayoutOption$Array: function(a0/*String*/, a1/*GUIStyle*/, a2/*GUILayoutOption[]*/) { 
            return CS.Call(4, 283, 10, true, a0, a1, jsb_formatParamsArray(2, a2, arguments)); //Ret: Void
        },
        BeginHorizontal$$GUIStyle$$GUILayoutOption$Array: function(a0/*GUIStyle*/, a1/*GUILayoutOption[]*/) { 
            return CS.Call(4, 283, 11, true, a0, jsb_formatParamsArray(1, a1, arguments)); //Ret: Void
        },
        BeginHorizontal$$GUILayoutOption$Array: function(a0/*GUILayoutOption[]*/) { 
            return CS.Call(4, 283, 12, true, jsb_formatParamsArray(0, a0, arguments)); //Ret: Void
        },
        BeginScrollView$$Vector2$$Boolean$$Boolean$$GUIStyle$$GUIStyle$$GUIStyle$$GUILayoutOption$Array: function(a0/*Vector2*/, a1/*Boolean*/, a2/*Boolean*/, a3/*GUIStyle*/, a4/*GUIStyle*/, a5/*GUIStyle*/, a6/*GUILayoutOption[]*/) { 
            return CS.Call(4, 283, 13, true, a0, a1, a2, a3, a4, a5, jsb_formatParamsArray(6, a6, arguments)); //Ret: Vector2
        },
        BeginScrollView$$Vector2$$Boolean$$Boolean$$GUIStyle$$GUIStyle$$GUILayoutOption$Array: function(a0/*Vector2*/, a1/*Boolean*/, a2/*Boolean*/, a3/*GUIStyle*/, a4/*GUIStyle*/, a5/*GUILayoutOption[]*/) { 
            return CS.Call(4, 283, 14, true, a0, a1, a2, a3, a4, jsb_formatParamsArray(5, a5, arguments)); //Ret: Vector2
        },
        BeginScrollView$$Vector2$$Boolean$$Boolean$$GUILayoutOption$Array: function(a0/*Vector2*/, a1/*Boolean*/, a2/*Boolean*/, a3/*GUILayoutOption[]*/) { 
            return CS.Call(4, 283, 15, true, a0, a1, a2, jsb_formatParamsArray(3, a3, arguments)); //Ret: Vector2
        },
        BeginScrollView$$Vector2$$GUIStyle$$GUIStyle$$GUILayoutOption$Array: function(a0/*Vector2*/, a1/*GUIStyle*/, a2/*GUIStyle*/, a3/*GUILayoutOption[]*/) { 
            return CS.Call(4, 283, 16, true, a0, a1, a2, jsb_formatParamsArray(3, a3, arguments)); //Ret: Vector2
        },
        BeginScrollView$$Vector2$$GUIStyle$$GUILayoutOption$Array: function(a0/*Vector2*/, a1/*GUIStyle*/, a2/*GUILayoutOption[]*/) { 
            return CS.Call(4, 283, 17, true, a0, a1, jsb_formatParamsArray(2, a2, arguments)); //Ret: Vector2
        },
        BeginScrollView$$Vector2$$GUILayoutOption$Array: function(a0/*Vector2*/, a1/*GUILayoutOption[]*/) { 
            return CS.Call(4, 283, 18, true, a0, jsb_formatParamsArray(1, a1, arguments)); //Ret: Vector2
        },
        BeginScrollView$$Vector2$$GUIStyle: function(a0/*Vector2*/, a1/*GUIStyle*/) { 
            return CS.Call(4, 283, 19, true, a0, a1); //Ret: Vector2
        },
        BeginVertical$$String$$GUIStyle$$GUILayoutOption$Array: function(a0/*String*/, a1/*GUIStyle*/, a2/*GUILayoutOption[]*/) { 
            return CS.Call(4, 283, 20, true, a0, a1, jsb_formatParamsArray(2, a2, arguments)); //Ret: Void
        },
        BeginVertical$$GUIContent$$GUIStyle$$GUILayoutOption$Array: function(a0/*GUIContent*/, a1/*GUIStyle*/, a2/*GUILayoutOption[]*/) { 
            return CS.Call(4, 283, 21, true, a0, a1, jsb_formatParamsArray(2, a2, arguments)); //Ret: Void
        },
        BeginVertical$$Texture$$GUIStyle$$GUILayoutOption$Array: function(a0/*Texture*/, a1/*GUIStyle*/, a2/*GUILayoutOption[]*/) { 
            return CS.Call(4, 283, 22, true, a0, a1, jsb_formatParamsArray(2, a2, arguments)); //Ret: Void
        },
        BeginVertical$$GUIStyle$$GUILayoutOption$Array: function(a0/*GUIStyle*/, a1/*GUILayoutOption[]*/) { 
            return CS.Call(4, 283, 23, true, a0, jsb_formatParamsArray(1, a1, arguments)); //Ret: Void
        },
        BeginVertical$$GUILayoutOption$Array: function(a0/*GUILayoutOption[]*/) { 
            return CS.Call(4, 283, 24, true, jsb_formatParamsArray(0, a0, arguments)); //Ret: Void
        },
        Box$$GUIContent$$GUIStyle$$GUILayoutOption$Array: function(a0/*GUIContent*/, a1/*GUIStyle*/, a2/*GUILayoutOption[]*/) { 
            return CS.Call(4, 283, 25, true, a0, a1, jsb_formatParamsArray(2, a2, arguments)); //Ret: Void
        },
        Box$$String$$GUIStyle$$GUILayoutOption$Array: function(a0/*String*/, a1/*GUIStyle*/, a2/*GUILayoutOption[]*/) { 
            return CS.Call(4, 283, 26, true, a0, a1, jsb_formatParamsArray(2, a2, arguments)); //Ret: Void
        },
        Box$$Texture$$GUIStyle$$GUILayoutOption$Array: function(a0/*Texture*/, a1/*GUIStyle*/, a2/*GUILayoutOption[]*/) { 
            return CS.Call(4, 283, 27, true, a0, a1, jsb_formatParamsArray(2, a2, arguments)); //Ret: Void
        },
        Box$$String$$GUILayoutOption$Array: function(a0/*String*/, a1/*GUILayoutOption[]*/) { 
            return CS.Call(4, 283, 28, true, a0, jsb_formatParamsArray(1, a1, arguments)); //Ret: Void
        },
        Box$$GUIContent$$GUILayoutOption$Array: function(a0/*GUIContent*/, a1/*GUILayoutOption[]*/) { 
            return CS.Call(4, 283, 29, true, a0, jsb_formatParamsArray(1, a1, arguments)); //Ret: Void
        },
        Box$$Texture$$GUILayoutOption$Array: function(a0/*Texture*/, a1/*GUILayoutOption[]*/) { 
            return CS.Call(4, 283, 30, true, a0, jsb_formatParamsArray(1, a1, arguments)); //Ret: Void
        },
        Button$$String$$GUIStyle$$GUILayoutOption$Array: function(a0/*String*/, a1/*GUIStyle*/, a2/*GUILayoutOption[]*/) { 
            return CS.Call(4, 283, 31, true, a0, a1, jsb_formatParamsArray(2, a2, arguments)); //Ret: Boolean
        },
        Button$$Texture$$GUIStyle$$GUILayoutOption$Array: function(a0/*Texture*/, a1/*GUIStyle*/, a2/*GUILayoutOption[]*/) { 
            return CS.Call(4, 283, 32, true, a0, a1, jsb_formatParamsArray(2, a2, arguments)); //Ret: Boolean
        },
        Button$$GUIContent$$GUIStyle$$GUILayoutOption$Array: function(a0/*GUIContent*/, a1/*GUIStyle*/, a2/*GUILayoutOption[]*/) { 
            return CS.Call(4, 283, 33, true, a0, a1, jsb_formatParamsArray(2, a2, arguments)); //Ret: Boolean
        },
        Button$$String$$GUILayoutOption$Array: function(a0/*String*/, a1/*GUILayoutOption[]*/) { 
            return CS.Call(4, 283, 34, true, a0, jsb_formatParamsArray(1, a1, arguments)); //Ret: Boolean
        },
        Button$$Texture$$GUILayoutOption$Array: function(a0/*Texture*/, a1/*GUILayoutOption[]*/) { 
            return CS.Call(4, 283, 35, true, a0, jsb_formatParamsArray(1, a1, arguments)); //Ret: Boolean
        },
        Button$$GUIContent$$GUILayoutOption$Array: function(a0/*GUIContent*/, a1/*GUILayoutOption[]*/) { 
            return CS.Call(4, 283, 36, true, a0, jsb_formatParamsArray(1, a1, arguments)); //Ret: Boolean
        },
        EndArea: function() { 
            return CS.Call(4, 283, 37, true); //Ret: Void
        },
        EndHorizontal: function() { 
            return CS.Call(4, 283, 38, true); //Ret: Void
        },
        EndScrollView: function() { 
            return CS.Call(4, 283, 39, true); //Ret: Void
        },
        EndVertical: function() { 
            return CS.Call(4, 283, 40, true); //Ret: Void
        },
        ExpandHeight: function(a0/*Boolean*/) { 
            return CS.Call(4, 283, 41, true, a0); //Ret: GUILayoutOption
        },
        ExpandWidth: function(a0/*Boolean*/) { 
            return CS.Call(4, 283, 42, true, a0); //Ret: GUILayoutOption
        },
        FlexibleSpace: function() { 
            return CS.Call(4, 283, 43, true); //Ret: Void
        },
        Height: function(a0/*Single*/) { 
            return CS.Call(4, 283, 44, true, a0); //Ret: GUILayoutOption
        },
        HorizontalScrollbar$$Single$$Single$$Single$$Single$$GUIStyle$$GUILayoutOption$Array: function(a0/*Single*/, a1/*Single*/, a2/*Single*/, a3/*Single*/, a4/*GUIStyle*/, a5/*GUILayoutOption[]*/) { 
            return CS.Call(4, 283, 45, true, a0, a1, a2, a3, a4, jsb_formatParamsArray(5, a5, arguments)); //Ret: Single
        },
        HorizontalScrollbar$$Single$$Single$$Single$$Single$$GUILayoutOption$Array: function(a0/*Single*/, a1/*Single*/, a2/*Single*/, a3/*Single*/, a4/*GUILayoutOption[]*/) { 
            return CS.Call(4, 283, 46, true, a0, a1, a2, a3, jsb_formatParamsArray(4, a4, arguments)); //Ret: Single
        },
        HorizontalSlider$$Single$$Single$$Single$$GUIStyle$$GUIStyle$$GUILayoutOption$Array: function(a0/*Single*/, a1/*Single*/, a2/*Single*/, a3/*GUIStyle*/, a4/*GUIStyle*/, a5/*GUILayoutOption[]*/) { 
            return CS.Call(4, 283, 47, true, a0, a1, a2, a3, a4, jsb_formatParamsArray(5, a5, arguments)); //Ret: Single
        },
        HorizontalSlider$$Single$$Single$$Single$$GUILayoutOption$Array: function(a0/*Single*/, a1/*Single*/, a2/*Single*/, a3/*GUILayoutOption[]*/) { 
            return CS.Call(4, 283, 48, true, a0, a1, a2, jsb_formatParamsArray(3, a3, arguments)); //Ret: Single
        },
        Label$$Texture$$GUIStyle$$GUILayoutOption$Array: function(a0/*Texture*/, a1/*GUIStyle*/, a2/*GUILayoutOption[]*/) { 
            return CS.Call(4, 283, 49, true, a0, a1, jsb_formatParamsArray(2, a2, arguments)); //Ret: Void
        },
        Label$$String$$GUIStyle$$GUILayoutOption$Array: function(a0/*String*/, a1/*GUIStyle*/, a2/*GUILayoutOption[]*/) { 
            return CS.Call(4, 283, 50, true, a0, a1, jsb_formatParamsArray(2, a2, arguments)); //Ret: Void
        },
        Label$$GUIContent$$GUIStyle$$GUILayoutOption$Array: function(a0/*GUIContent*/, a1/*GUIStyle*/, a2/*GUILayoutOption[]*/) { 
            return CS.Call(4, 283, 51, true, a0, a1, jsb_formatParamsArray(2, a2, arguments)); //Ret: Void
        },
        Label$$String$$GUILayoutOption$Array: function(a0/*String*/, a1/*GUILayoutOption[]*/) { 
            return CS.Call(4, 283, 52, true, a0, jsb_formatParamsArray(1, a1, arguments)); //Ret: Void
        },
        Label$$GUIContent$$GUILayoutOption$Array: function(a0/*GUIContent*/, a1/*GUILayoutOption[]*/) { 
            return CS.Call(4, 283, 53, true, a0, jsb_formatParamsArray(1, a1, arguments)); //Ret: Void
        },
        Label$$Texture$$GUILayoutOption$Array: function(a0/*Texture*/, a1/*GUILayoutOption[]*/) { 
            return CS.Call(4, 283, 54, true, a0, jsb_formatParamsArray(1, a1, arguments)); //Ret: Void
        },
        MaxHeight: function(a0/*Single*/) { 
            return CS.Call(4, 283, 55, true, a0); //Ret: GUILayoutOption
        },
        MaxWidth: function(a0/*Single*/) { 
            return CS.Call(4, 283, 56, true, a0); //Ret: GUILayoutOption
        },
        MinHeight: function(a0/*Single*/) { 
            return CS.Call(4, 283, 57, true, a0); //Ret: GUILayoutOption
        },
        MinWidth: function(a0/*Single*/) { 
            return CS.Call(4, 283, 58, true, a0); //Ret: GUILayoutOption
        },
        PasswordField$$String$$Char$$Int32$$GUIStyle$$GUILayoutOption$Array: function(a0/*String*/, a1/*Char*/, a2/*Int32*/, a3/*GUIStyle*/, a4/*GUILayoutOption[]*/) { 
            return CS.Call(4, 283, 59, true, a0, a1, a2, a3, jsb_formatParamsArray(4, a4, arguments)); //Ret: String
        },
        PasswordField$$String$$Char$$Int32$$GUILayoutOption$Array: function(a0/*String*/, a1/*Char*/, a2/*Int32*/, a3/*GUILayoutOption[]*/) { 
            return CS.Call(4, 283, 60, true, a0, a1, a2, jsb_formatParamsArray(3, a3, arguments)); //Ret: String
        },
        PasswordField$$String$$Char$$GUIStyle$$GUILayoutOption$Array: function(a0/*String*/, a1/*Char*/, a2/*GUIStyle*/, a3/*GUILayoutOption[]*/) { 
            return CS.Call(4, 283, 61, true, a0, a1, a2, jsb_formatParamsArray(3, a3, arguments)); //Ret: String
        },
        PasswordField$$String$$Char$$GUILayoutOption$Array: function(a0/*String*/, a1/*Char*/, a2/*GUILayoutOption[]*/) { 
            return CS.Call(4, 283, 62, true, a0, a1, jsb_formatParamsArray(2, a2, arguments)); //Ret: String
        },
        RepeatButton$$Texture$$GUIStyle$$GUILayoutOption$Array: function(a0/*Texture*/, a1/*GUIStyle*/, a2/*GUILayoutOption[]*/) { 
            return CS.Call(4, 283, 63, true, a0, a1, jsb_formatParamsArray(2, a2, arguments)); //Ret: Boolean
        },
        RepeatButton$$String$$GUIStyle$$GUILayoutOption$Array: function(a0/*String*/, a1/*GUIStyle*/, a2/*GUILayoutOption[]*/) { 
            return CS.Call(4, 283, 64, true, a0, a1, jsb_formatParamsArray(2, a2, arguments)); //Ret: Boolean
        },
        RepeatButton$$GUIContent$$GUIStyle$$GUILayoutOption$Array: function(a0/*GUIContent*/, a1/*GUIStyle*/, a2/*GUILayoutOption[]*/) { 
            return CS.Call(4, 283, 65, true, a0, a1, jsb_formatParamsArray(2, a2, arguments)); //Ret: Boolean
        },
        RepeatButton$$Texture$$GUILayoutOption$Array: function(a0/*Texture*/, a1/*GUILayoutOption[]*/) { 
            return CS.Call(4, 283, 66, true, a0, jsb_formatParamsArray(1, a1, arguments)); //Ret: Boolean
        },
        RepeatButton$$String$$GUILayoutOption$Array: function(a0/*String*/, a1/*GUILayoutOption[]*/) { 
            return CS.Call(4, 283, 67, true, a0, jsb_formatParamsArray(1, a1, arguments)); //Ret: Boolean
        },
        RepeatButton$$GUIContent$$GUILayoutOption$Array: function(a0/*GUIContent*/, a1/*GUILayoutOption[]*/) { 
            return CS.Call(4, 283, 68, true, a0, jsb_formatParamsArray(1, a1, arguments)); //Ret: Boolean
        },
        SelectionGrid$$Int32$$String$Array$$Int32$$GUIStyle$$GUILayoutOption$Array: function(a0/*Int32*/, a1/*String[]*/, a2/*Int32*/, a3/*GUIStyle*/, a4/*GUILayoutOption[]*/) { 
            return CS.Call(4, 283, 69, true, a0, a1, a2, a3, jsb_formatParamsArray(4, a4, arguments)); //Ret: Int32
        },
        SelectionGrid$$Int32$$Texture$Array$$Int32$$GUIStyle$$GUILayoutOption$Array: function(a0/*Int32*/, a1/*Texture[]*/, a2/*Int32*/, a3/*GUIStyle*/, a4/*GUILayoutOption[]*/) { 
            return CS.Call(4, 283, 70, true, a0, a1, a2, a3, jsb_formatParamsArray(4, a4, arguments)); //Ret: Int32
        },
        SelectionGrid$$Int32$$GUIContent$Array$$Int32$$GUIStyle$$GUILayoutOption$Array: function(a0/*Int32*/, a1/*GUIContent[]*/, a2/*Int32*/, a3/*GUIStyle*/, a4/*GUILayoutOption[]*/) { 
            return CS.Call(4, 283, 71, true, a0, a1, a2, a3, jsb_formatParamsArray(4, a4, arguments)); //Ret: Int32
        },
        SelectionGrid$$Int32$$String$Array$$Int32$$GUILayoutOption$Array: function(a0/*Int32*/, a1/*String[]*/, a2/*Int32*/, a3/*GUILayoutOption[]*/) { 
            return CS.Call(4, 283, 72, true, a0, a1, a2, jsb_formatParamsArray(3, a3, arguments)); //Ret: Int32
        },
        SelectionGrid$$Int32$$Texture$Array$$Int32$$GUILayoutOption$Array: function(a0/*Int32*/, a1/*Texture[]*/, a2/*Int32*/, a3/*GUILayoutOption[]*/) { 
            return CS.Call(4, 283, 73, true, a0, a1, a2, jsb_formatParamsArray(3, a3, arguments)); //Ret: Int32
        },
        SelectionGrid$$Int32$$GUIContent$Array$$Int32$$GUILayoutOption$Array: function(a0/*Int32*/, a1/*GUIContent[]*/, a2/*Int32*/, a3/*GUILayoutOption[]*/) { 
            return CS.Call(4, 283, 74, true, a0, a1, a2, jsb_formatParamsArray(3, a3, arguments)); //Ret: Int32
        },
        Space: function(a0/*Single*/) { 
            return CS.Call(4, 283, 75, true, a0); //Ret: Void
        },
        TextArea$$String$$Int32$$GUIStyle$$GUILayoutOption$Array: function(a0/*String*/, a1/*Int32*/, a2/*GUIStyle*/, a3/*GUILayoutOption[]*/) { 
            return CS.Call(4, 283, 76, true, a0, a1, a2, jsb_formatParamsArray(3, a3, arguments)); //Ret: String
        },
        TextArea$$String$$Int32$$GUILayoutOption$Array: function(a0/*String*/, a1/*Int32*/, a2/*GUILayoutOption[]*/) { 
            return CS.Call(4, 283, 77, true, a0, a1, jsb_formatParamsArray(2, a2, arguments)); //Ret: String
        },
        TextArea$$String$$GUIStyle$$GUILayoutOption$Array: function(a0/*String*/, a1/*GUIStyle*/, a2/*GUILayoutOption[]*/) { 
            return CS.Call(4, 283, 78, true, a0, a1, jsb_formatParamsArray(2, a2, arguments)); //Ret: String
        },
        TextArea$$String$$GUILayoutOption$Array: function(a0/*String*/, a1/*GUILayoutOption[]*/) { 
            return CS.Call(4, 283, 79, true, a0, jsb_formatParamsArray(1, a1, arguments)); //Ret: String
        },
        TextField$$String$$Int32$$GUIStyle$$GUILayoutOption$Array: function(a0/*String*/, a1/*Int32*/, a2/*GUIStyle*/, a3/*GUILayoutOption[]*/) { 
            return CS.Call(4, 283, 80, true, a0, a1, a2, jsb_formatParamsArray(3, a3, arguments)); //Ret: String
        },
        TextField$$String$$GUIStyle$$GUILayoutOption$Array: function(a0/*String*/, a1/*GUIStyle*/, a2/*GUILayoutOption[]*/) { 
            return CS.Call(4, 283, 81, true, a0, a1, jsb_formatParamsArray(2, a2, arguments)); //Ret: String
        },
        TextField$$String$$Int32$$GUILayoutOption$Array: function(a0/*String*/, a1/*Int32*/, a2/*GUILayoutOption[]*/) { 
            return CS.Call(4, 283, 82, true, a0, a1, jsb_formatParamsArray(2, a2, arguments)); //Ret: String
        },
        TextField$$String$$GUILayoutOption$Array: function(a0/*String*/, a1/*GUILayoutOption[]*/) { 
            return CS.Call(4, 283, 83, true, a0, jsb_formatParamsArray(1, a1, arguments)); //Ret: String
        },
        Toggle$$Boolean$$String$$GUIStyle$$GUILayoutOption$Array: function(a0/*Boolean*/, a1/*String*/, a2/*GUIStyle*/, a3/*GUILayoutOption[]*/) { 
            return CS.Call(4, 283, 84, true, a0, a1, a2, jsb_formatParamsArray(3, a3, arguments)); //Ret: Boolean
        },
        Toggle$$Boolean$$Texture$$GUIStyle$$GUILayoutOption$Array: function(a0/*Boolean*/, a1/*Texture*/, a2/*GUIStyle*/, a3/*GUILayoutOption[]*/) { 
            return CS.Call(4, 283, 85, true, a0, a1, a2, jsb_formatParamsArray(3, a3, arguments)); //Ret: Boolean
        },
        Toggle$$Boolean$$GUIContent$$GUIStyle$$GUILayoutOption$Array: function(a0/*Boolean*/, a1/*GUIContent*/, a2/*GUIStyle*/, a3/*GUILayoutOption[]*/) { 
            return CS.Call(4, 283, 86, true, a0, a1, a2, jsb_formatParamsArray(3, a3, arguments)); //Ret: Boolean
        },
        Toggle$$Boolean$$String$$GUILayoutOption$Array: function(a0/*Boolean*/, a1/*String*/, a2/*GUILayoutOption[]*/) { 
            return CS.Call(4, 283, 87, true, a0, a1, jsb_formatParamsArray(2, a2, arguments)); //Ret: Boolean
        },
        Toggle$$Boolean$$Texture$$GUILayoutOption$Array: function(a0/*Boolean*/, a1/*Texture*/, a2/*GUILayoutOption[]*/) { 
            return CS.Call(4, 283, 88, true, a0, a1, jsb_formatParamsArray(2, a2, arguments)); //Ret: Boolean
        },
        Toggle$$Boolean$$GUIContent$$GUILayoutOption$Array: function(a0/*Boolean*/, a1/*GUIContent*/, a2/*GUILayoutOption[]*/) { 
            return CS.Call(4, 283, 89, true, a0, a1, jsb_formatParamsArray(2, a2, arguments)); //Ret: Boolean
        },
        Toolbar$$Int32$$String$Array$$GUIStyle$$GUILayoutOption$Array: function(a0/*Int32*/, a1/*String[]*/, a2/*GUIStyle*/, a3/*GUILayoutOption[]*/) { 
            return CS.Call(4, 283, 90, true, a0, a1, a2, jsb_formatParamsArray(3, a3, arguments)); //Ret: Int32
        },
        Toolbar$$Int32$$Texture$Array$$GUIStyle$$GUILayoutOption$Array: function(a0/*Int32*/, a1/*Texture[]*/, a2/*GUIStyle*/, a3/*GUILayoutOption[]*/) { 
            return CS.Call(4, 283, 91, true, a0, a1, a2, jsb_formatParamsArray(3, a3, arguments)); //Ret: Int32
        },
        Toolbar$$Int32$$GUIContent$Array$$GUIStyle$$GUILayoutOption$Array: function(a0/*Int32*/, a1/*GUIContent[]*/, a2/*GUIStyle*/, a3/*GUILayoutOption[]*/) { 
            return CS.Call(4, 283, 92, true, a0, a1, a2, jsb_formatParamsArray(3, a3, arguments)); //Ret: Int32
        },
        Toolbar$$Int32$$Texture$Array$$GUILayoutOption$Array: function(a0/*Int32*/, a1/*Texture[]*/, a2/*GUILayoutOption[]*/) { 
            return CS.Call(4, 283, 93, true, a0, a1, jsb_formatParamsArray(2, a2, arguments)); //Ret: Int32
        },
        Toolbar$$Int32$$String$Array$$GUILayoutOption$Array: function(a0/*Int32*/, a1/*String[]*/, a2/*GUILayoutOption[]*/) { 
            return CS.Call(4, 283, 94, true, a0, a1, jsb_formatParamsArray(2, a2, arguments)); //Ret: Int32
        },
        Toolbar$$Int32$$GUIContent$Array$$GUILayoutOption$Array: function(a0/*Int32*/, a1/*GUIContent[]*/, a2/*GUILayoutOption[]*/) { 
            return CS.Call(4, 283, 95, true, a0, a1, jsb_formatParamsArray(2, a2, arguments)); //Ret: Int32
        },
        VerticalScrollbar$$Single$$Single$$Single$$Single$$GUIStyle$$GUILayoutOption$Array: function(a0/*Single*/, a1/*Single*/, a2/*Single*/, a3/*Single*/, a4/*GUIStyle*/, a5/*GUILayoutOption[]*/) { 
            return CS.Call(4, 283, 96, true, a0, a1, a2, a3, a4, jsb_formatParamsArray(5, a5, arguments)); //Ret: Single
        },
        VerticalScrollbar$$Single$$Single$$Single$$Single$$GUILayoutOption$Array: function(a0/*Single*/, a1/*Single*/, a2/*Single*/, a3/*Single*/, a4/*GUILayoutOption[]*/) { 
            return CS.Call(4, 283, 97, true, a0, a1, a2, a3, jsb_formatParamsArray(4, a4, arguments)); //Ret: Single
        },
        VerticalSlider$$Single$$Single$$Single$$GUIStyle$$GUIStyle$$GUILayoutOption$Array: function(a0/*Single*/, a1/*Single*/, a2/*Single*/, a3/*GUIStyle*/, a4/*GUIStyle*/, a5/*GUILayoutOption[]*/) { 
            return CS.Call(4, 283, 98, true, a0, a1, a2, a3, a4, jsb_formatParamsArray(5, a5, arguments)); //Ret: Single
        },
        VerticalSlider$$Single$$Single$$Single$$GUILayoutOption$Array: function(a0/*Single*/, a1/*Single*/, a2/*Single*/, a3/*GUILayoutOption[]*/) { 
            return CS.Call(4, 283, 99, true, a0, a1, a2, jsb_formatParamsArray(3, a3, arguments)); //Ret: Single
        },
        Width: function(a0/*Single*/) { 
            return CS.Call(4, 283, 100, true, a0); //Ret: GUILayoutOption
        },
        Window$$Int32$$Rect$$WindowFunction$$String$$GUIStyle$$GUILayoutOption$Array: function(a0/*Int32*/, a1/*Rect*/, a2/*WindowFunction*/, a3/*String*/, a4/*GUIStyle*/, a5/*GUILayoutOption[]*/) { 
            return CS.Call(4, 283, 101, true, a0, a1, a2, a3, a4, jsb_formatParamsArray(5, a5, arguments)); //Ret: Rect
        },
        Window$$Int32$$Rect$$WindowFunction$$Texture$$GUIStyle$$GUILayoutOption$Array: function(a0/*Int32*/, a1/*Rect*/, a2/*WindowFunction*/, a3/*Texture*/, a4/*GUIStyle*/, a5/*GUILayoutOption[]*/) { 
            return CS.Call(4, 283, 102, true, a0, a1, a2, a3, a4, jsb_formatParamsArray(5, a5, arguments)); //Ret: Rect
        },
        Window$$Int32$$Rect$$WindowFunction$$GUIContent$$GUIStyle$$GUILayoutOption$Array: function(a0/*Int32*/, a1/*Rect*/, a2/*WindowFunction*/, a3/*GUIContent*/, a4/*GUIStyle*/, a5/*GUILayoutOption[]*/) { 
            return CS.Call(4, 283, 103, true, a0, a1, a2, a3, a4, jsb_formatParamsArray(5, a5, arguments)); //Ret: Rect
        },
        Window$$Int32$$Rect$$WindowFunction$$String$$GUILayoutOption$Array: function(a0/*Int32*/, a1/*Rect*/, a2/*WindowFunction*/, a3/*String*/, a4/*GUILayoutOption[]*/) { 
            return CS.Call(4, 283, 104, true, a0, a1, a2, a3, jsb_formatParamsArray(4, a4, arguments)); //Ret: Rect
        },
        Window$$Int32$$Rect$$WindowFunction$$Texture$$GUILayoutOption$Array: function(a0/*Int32*/, a1/*Rect*/, a2/*WindowFunction*/, a3/*Texture*/, a4/*GUILayoutOption[]*/) { 
            return CS.Call(4, 283, 105, true, a0, a1, a2, a3, jsb_formatParamsArray(4, a4, arguments)); //Ret: Rect
        },
        Window$$Int32$$Rect$$WindowFunction$$GUIContent$$GUILayoutOption$Array: function(a0/*Int32*/, a1/*Rect*/, a2/*WindowFunction*/, a3/*GUIContent*/, a4/*GUILayoutOption[]*/) { 
            return CS.Call(4, 283, 106, true, a0, a1, a2, a3, jsb_formatParamsArray(4, a4, arguments)); //Ret: Rect
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 283, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$GUILayout);

// UnityEngine.GUILayout+HorizontalScope
var UnityEngine$GUILayout$HorizontalScope = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.GUILayout.HorizontalScope",
    Kind: "Class",
    baseTypeName: "UnityEngine.GUI.Scope",
    interfaceNames: ["System.IDisposable"],
    definition: {
        ctor$$GUILayoutOption$Array: function(a0) { CS.Call(5, 284, 0, true, this, a0); },
        ctor$$GUIStyle$$GUILayoutOption$Array: function(a0, a1) { CS.Call(5, 284, 1, true, this, a0, a1); },
        ctor$$String$$GUIStyle$$GUILayoutOption$Array: function(a0, a1, a2) { CS.Call(5, 284, 2, true, this, a0, a1, a2); },
        ctor$$Texture$$GUIStyle$$GUILayoutOption$Array: function(a0, a1, a2) { CS.Call(5, 284, 3, true, this, a0, a1, a2); },
        ctor$$GUIContent$$GUIStyle$$GUILayoutOption$Array: function(a0, a1, a2) { CS.Call(5, 284, 4, true, this, a0, a1, a2); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$GUILayout$HorizontalScope);

// UnityEngine.GUILayout+VerticalScope
var UnityEngine$GUILayout$VerticalScope = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.GUILayout.VerticalScope",
    Kind: "Class",
    baseTypeName: "UnityEngine.GUI.Scope",
    interfaceNames: ["System.IDisposable"],
    definition: {
        ctor$$GUILayoutOption$Array: function(a0) { CS.Call(5, 285, 0, true, this, a0); },
        ctor$$GUIStyle$$GUILayoutOption$Array: function(a0, a1) { CS.Call(5, 285, 1, true, this, a0, a1); },
        ctor$$String$$GUIStyle$$GUILayoutOption$Array: function(a0, a1, a2) { CS.Call(5, 285, 2, true, this, a0, a1, a2); },
        ctor$$Texture$$GUIStyle$$GUILayoutOption$Array: function(a0, a1, a2) { CS.Call(5, 285, 3, true, this, a0, a1, a2); },
        ctor$$GUIContent$$GUIStyle$$GUILayoutOption$Array: function(a0, a1, a2) { CS.Call(5, 285, 4, true, this, a0, a1, a2); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$GUILayout$VerticalScope);

// UnityEngine.GUILayout+AreaScope
var UnityEngine$GUILayout$AreaScope = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.GUILayout.AreaScope",
    Kind: "Class",
    baseTypeName: "UnityEngine.GUI.Scope",
    interfaceNames: ["System.IDisposable"],
    definition: {
        ctor$$Rect: function(a0) { CS.Call(5, 286, 0, true, this, a0); },
        ctor$$Rect$$String: function(a0, a1) { CS.Call(5, 286, 1, true, this, a0, a1); },
        ctor$$Rect$$Texture: function(a0, a1) { CS.Call(5, 286, 2, true, this, a0, a1); },
        ctor$$Rect$$GUIContent: function(a0, a1) { CS.Call(5, 286, 3, true, this, a0, a1); },
        ctor$$Rect$$String$$GUIStyle: function(a0, a1, a2) { CS.Call(5, 286, 4, true, this, a0, a1, a2); },
        ctor$$Rect$$Texture$$GUIStyle: function(a0, a1, a2) { CS.Call(5, 286, 5, true, this, a0, a1, a2); },
        ctor$$Rect$$GUIContent$$GUIStyle: function(a0, a1, a2) { CS.Call(5, 286, 6, true, this, a0, a1, a2); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$GUILayout$AreaScope);

// UnityEngine.GUILayout+ScrollViewScope
var UnityEngine$GUILayout$ScrollViewScope = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.GUILayout.ScrollViewScope",
    Kind: "Class",
    baseTypeName: "UnityEngine.GUI.Scope",
    interfaceNames: ["System.IDisposable"],
    definition: {
        ctor$$Vector2$$GUILayoutOption$Array: function(a0, a1) { CS.Call(5, 287, 0, true, this, a0, a1); },
        ctor$$Vector2$$Boolean$$Boolean$$GUILayoutOption$Array: function(a0, a1, a2, a3) { CS.Call(5, 287, 1, true, this, a0, a1, a2, a3); },
        ctor$$Vector2$$GUIStyle$$GUIStyle$$GUILayoutOption$Array: function(a0, a1, a2, a3) { CS.Call(5, 287, 2, true, this, a0, a1, a2, a3); },
        ctor$$Vector2$$GUIStyle$$GUILayoutOption$Array: function(a0, a1, a2) { CS.Call(5, 287, 3, true, this, a0, a1, a2); },
        ctor$$Vector2$$Boolean$$Boolean$$GUIStyle$$GUIStyle$$GUILayoutOption$Array: function(a0, a1, a2, a3, a4, a5) { CS.Call(5, 287, 4, true, this, a0, a1, a2, a3, a4, a5); },
        ctor$$Vector2$$Boolean$$Boolean$$GUIStyle$$GUIStyle$$GUIStyle$$GUILayoutOption$Array: function(a0, a1, a2, a3, a4, a5, a6) { CS.Call(5, 287, 5, true, this, a0, a1, a2, a3, a4, a5, a6); },
        get_scrollPosition: function() { return CS.Call(2, 287, 0, false, this); },
        set_scrollPosition: function(v) { return CS.Call(3, 287, 0, false, this, v); },
        get_handleScrollWheel: function() { return CS.Call(2, 287, 1, false, this); },
        set_handleScrollWheel: function(v) { return CS.Call(3, 287, 1, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$GUILayout$ScrollViewScope);

// UnityEngine.GUILayoutUtility
var UnityEngine$GUILayoutUtility = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.GUILayoutUtility",
    Kind: "Class",
    baseTypeName: "System.Object",
    staticDefinition: {
        BeginGroup: function(a0/*String*/) { 
            return CS.Call(4, 288, 0, true, a0); //Ret: Void
        },
        EndGroup: function(a0/*String*/) { 
            return CS.Call(4, 288, 1, true, a0); //Ret: Void
        },
        GetAspectRect$$Single$$GUIStyle$$GUILayoutOption$Array: function(a0/*Single*/, a1/*GUIStyle*/, a2/*GUILayoutOption[]*/) { 
            return CS.Call(4, 288, 2, true, a0, a1, jsb_formatParamsArray(2, a2, arguments)); //Ret: Rect
        },
        GetAspectRect$$Single$$GUIStyle: function(a0/*Single*/, a1/*GUIStyle*/) { 
            return CS.Call(4, 288, 3, true, a0, a1); //Ret: Rect
        },
        GetAspectRect$$Single$$GUILayoutOption$Array: function(a0/*Single*/, a1/*GUILayoutOption[]*/) { 
            return CS.Call(4, 288, 4, true, a0, jsb_formatParamsArray(1, a1, arguments)); //Ret: Rect
        },
        GetAspectRect$$Single: function(a0/*Single*/) { 
            return CS.Call(4, 288, 5, true, a0); //Ret: Rect
        },
        GetLastRect: function() { 
            return CS.Call(4, 288, 6, true); //Ret: Rect
        },
        GetRect$$Single$$Single$$Single$$Single$$GUIStyle$$GUILayoutOption$Array: function(a0/*Single*/, a1/*Single*/, a2/*Single*/, a3/*Single*/, a4/*GUIStyle*/, a5/*GUILayoutOption[]*/) { 
            return CS.Call(4, 288, 7, true, a0, a1, a2, a3, a4, jsb_formatParamsArray(5, a5, arguments)); //Ret: Rect
        },
        GetRect$$Single$$Single$$Single$$Single$$GUIStyle: function(a0/*Single*/, a1/*Single*/, a2/*Single*/, a3/*Single*/, a4/*GUIStyle*/) { 
            return CS.Call(4, 288, 8, true, a0, a1, a2, a3, a4); //Ret: Rect
        },
        GetRect$$Single$$Single$$Single$$Single$$GUILayoutOption$Array: function(a0/*Single*/, a1/*Single*/, a2/*Single*/, a3/*Single*/, a4/*GUILayoutOption[]*/) { 
            return CS.Call(4, 288, 9, true, a0, a1, a2, a3, jsb_formatParamsArray(4, a4, arguments)); //Ret: Rect
        },
        GetRect$$Single$$Single$$GUIStyle$$GUILayoutOption$Array: function(a0/*Single*/, a1/*Single*/, a2/*GUIStyle*/, a3/*GUILayoutOption[]*/) { 
            return CS.Call(4, 288, 10, true, a0, a1, a2, jsb_formatParamsArray(3, a3, arguments)); //Ret: Rect
        },
        GetRect$$Single$$Single$$Single$$Single: function(a0/*Single*/, a1/*Single*/, a2/*Single*/, a3/*Single*/) { 
            return CS.Call(4, 288, 11, true, a0, a1, a2, a3); //Ret: Rect
        },
        GetRect$$GUIContent$$GUIStyle$$GUILayoutOption$Array: function(a0/*GUIContent*/, a1/*GUIStyle*/, a2/*GUILayoutOption[]*/) { 
            return CS.Call(4, 288, 12, true, a0, a1, jsb_formatParamsArray(2, a2, arguments)); //Ret: Rect
        },
        GetRect$$Single$$Single$$GUIStyle: function(a0/*Single*/, a1/*Single*/, a2/*GUIStyle*/) { 
            return CS.Call(4, 288, 13, true, a0, a1, a2); //Ret: Rect
        },
        GetRect$$Single$$Single$$GUILayoutOption$Array: function(a0/*Single*/, a1/*Single*/, a2/*GUILayoutOption[]*/) { 
            return CS.Call(4, 288, 14, true, a0, a1, jsb_formatParamsArray(2, a2, arguments)); //Ret: Rect
        },
        GetRect$$GUIContent$$GUIStyle: function(a0/*GUIContent*/, a1/*GUIStyle*/) { 
            return CS.Call(4, 288, 15, true, a0, a1); //Ret: Rect
        },
        GetRect$$Single$$Single: function(a0/*Single*/, a1/*Single*/) { 
            return CS.Call(4, 288, 16, true, a0, a1); //Ret: Rect
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 288, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$GUILayoutUtility);

// UnityEngine.GUILayoutOption
var UnityEngine$GUILayoutOption = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.GUILayoutOption",
    Kind: "Class",
    baseTypeName: "System.Object",
};
jsb_ReplaceOrPushJsType(UnityEngine$GUILayoutOption);

// UnityEngine.GUISettings
var UnityEngine$GUISettings = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.GUISettings",
    Kind: "Class",
    baseTypeName: "System.Object",
    definition: {
        ctor: function() { CS.Call(5, 290, 0, true, this); },
        get_doubleClickSelectsWord: function() { return CS.Call(2, 290, 0, false, this); },
        set_doubleClickSelectsWord: function(v) { return CS.Call(3, 290, 0, false, this, v); },
        get_tripleClickSelectsLine: function() { return CS.Call(2, 290, 1, false, this); },
        set_tripleClickSelectsLine: function(v) { return CS.Call(3, 290, 1, false, this, v); },
        get_cursorColor: function() { return CS.Call(2, 290, 2, false, this); },
        set_cursorColor: function(v) { return CS.Call(3, 290, 2, false, this, v); },
        get_cursorFlashSpeed: function() { return CS.Call(2, 290, 3, false, this); },
        set_cursorFlashSpeed: function(v) { return CS.Call(3, 290, 3, false, this, v); },
        get_selectionColor: function() { return CS.Call(2, 290, 4, false, this); },
        set_selectionColor: function(v) { return CS.Call(3, 290, 4, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$GUISettings);

// UnityEngine.GUISkin
var UnityEngine$GUISkin = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.GUISkin",
    Kind: "Class",
    baseTypeName: "UnityEngine.ScriptableObject",
    definition: {
        ctor: function() { CS.Call(5, 291, 0, true, this); },
        get_font: function() { return CS.Call(2, 291, 0, false, this); },
        set_font: function(v) { return CS.Call(3, 291, 0, false, this, v); },
        get_box: function() { return CS.Call(2, 291, 1, false, this); },
        set_box: function(v) { return CS.Call(3, 291, 1, false, this, v); },
        get_label: function() { return CS.Call(2, 291, 2, false, this); },
        set_label: function(v) { return CS.Call(3, 291, 2, false, this, v); },
        get_textField: function() { return CS.Call(2, 291, 3, false, this); },
        set_textField: function(v) { return CS.Call(3, 291, 3, false, this, v); },
        get_textArea: function() { return CS.Call(2, 291, 4, false, this); },
        set_textArea: function(v) { return CS.Call(3, 291, 4, false, this, v); },
        get_button: function() { return CS.Call(2, 291, 5, false, this); },
        set_button: function(v) { return CS.Call(3, 291, 5, false, this, v); },
        get_toggle: function() { return CS.Call(2, 291, 6, false, this); },
        set_toggle: function(v) { return CS.Call(3, 291, 6, false, this, v); },
        get_window: function() { return CS.Call(2, 291, 7, false, this); },
        set_window: function(v) { return CS.Call(3, 291, 7, false, this, v); },
        get_horizontalSlider: function() { return CS.Call(2, 291, 8, false, this); },
        set_horizontalSlider: function(v) { return CS.Call(3, 291, 8, false, this, v); },
        get_horizontalSliderThumb: function() { return CS.Call(2, 291, 9, false, this); },
        set_horizontalSliderThumb: function(v) { return CS.Call(3, 291, 9, false, this, v); },
        get_verticalSlider: function() { return CS.Call(2, 291, 10, false, this); },
        set_verticalSlider: function(v) { return CS.Call(3, 291, 10, false, this, v); },
        get_verticalSliderThumb: function() { return CS.Call(2, 291, 11, false, this); },
        set_verticalSliderThumb: function(v) { return CS.Call(3, 291, 11, false, this, v); },
        get_horizontalScrollbar: function() { return CS.Call(2, 291, 12, false, this); },
        set_horizontalScrollbar: function(v) { return CS.Call(3, 291, 12, false, this, v); },
        get_horizontalScrollbarThumb: function() { return CS.Call(2, 291, 13, false, this); },
        set_horizontalScrollbarThumb: function(v) { return CS.Call(3, 291, 13, false, this, v); },
        get_horizontalScrollbarLeftButton: function() { return CS.Call(2, 291, 14, false, this); },
        set_horizontalScrollbarLeftButton: function(v) { return CS.Call(3, 291, 14, false, this, v); },
        get_horizontalScrollbarRightButton: function() { return CS.Call(2, 291, 15, false, this); },
        set_horizontalScrollbarRightButton: function(v) { return CS.Call(3, 291, 15, false, this, v); },
        get_verticalScrollbar: function() { return CS.Call(2, 291, 16, false, this); },
        set_verticalScrollbar: function(v) { return CS.Call(3, 291, 16, false, this, v); },
        get_verticalScrollbarThumb: function() { return CS.Call(2, 291, 17, false, this); },
        set_verticalScrollbarThumb: function(v) { return CS.Call(3, 291, 17, false, this, v); },
        get_verticalScrollbarUpButton: function() { return CS.Call(2, 291, 18, false, this); },
        set_verticalScrollbarUpButton: function(v) { return CS.Call(3, 291, 18, false, this, v); },
        get_verticalScrollbarDownButton: function() { return CS.Call(2, 291, 19, false, this); },
        set_verticalScrollbarDownButton: function(v) { return CS.Call(3, 291, 19, false, this, v); },
        get_scrollView: function() { return CS.Call(2, 291, 20, false, this); },
        set_scrollView: function(v) { return CS.Call(3, 291, 20, false, this, v); },
        get_customStyles: function() { return CS.Call(2, 291, 21, false, this); },
        set_customStyles: function(v) { return CS.Call(3, 291, 21, false, this, v); },
        get_settings: function() { return CS.Call(2, 291, 22, false, this); },
        set_settings: function(v) { return CS.Call(3, 291, 22, false, this, v); },
        FindStyle: function(a0/*String*/) { 
            return CS.Call(4, 291, 0, false, this, a0); //Ret: GUIStyle
        },
        GetEnumerator: function() { 
            return CS.Call(4, 291, 1, false, this); //Ret: IEnumerator
        },
        GetStyle: function(a0/*String*/) { 
            return CS.Call(4, 291, 2, false, this, a0); //Ret: GUIStyle
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$GUISkin);

// UnityEngine.GUIStyle
var UnityEngine$GUIStyle = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.GUIStyle",
    Kind: "Class",
    baseTypeName: "System.Object",
    staticDefinition: {
        get_none: function() { return CS.Call(2, 292, 14, true); },
        set_none: function(v) { return CS.Call(3, 292, 14, true, v); },
        op_Implicit: function(a0/*String*/) { 
            return CS.Call(4, 292, 15, true, a0); //Ret: GUIStyle
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 292, 0, true, this); },
        ctor$$GUIStyle: function(a0) { CS.Call(5, 292, 1, true, this, a0); },
        get_normal: function() { return CS.Call(2, 292, 0, false, this); },
        set_normal: function(v) { return CS.Call(3, 292, 0, false, this, v); },
        get_hover: function() { return CS.Call(2, 292, 1, false, this); },
        set_hover: function(v) { return CS.Call(3, 292, 1, false, this, v); },
        get_active: function() { return CS.Call(2, 292, 2, false, this); },
        set_active: function(v) { return CS.Call(3, 292, 2, false, this, v); },
        get_onNormal: function() { return CS.Call(2, 292, 3, false, this); },
        set_onNormal: function(v) { return CS.Call(3, 292, 3, false, this, v); },
        get_onHover: function() { return CS.Call(2, 292, 4, false, this); },
        set_onHover: function(v) { return CS.Call(3, 292, 4, false, this, v); },
        get_onActive: function() { return CS.Call(2, 292, 5, false, this); },
        set_onActive: function(v) { return CS.Call(3, 292, 5, false, this, v); },
        get_focused: function() { return CS.Call(2, 292, 6, false, this); },
        set_focused: function(v) { return CS.Call(3, 292, 6, false, this, v); },
        get_onFocused: function() { return CS.Call(2, 292, 7, false, this); },
        set_onFocused: function(v) { return CS.Call(3, 292, 7, false, this, v); },
        get_border: function() { return CS.Call(2, 292, 8, false, this); },
        set_border: function(v) { return CS.Call(3, 292, 8, false, this, v); },
        get_margin: function() { return CS.Call(2, 292, 9, false, this); },
        set_margin: function(v) { return CS.Call(3, 292, 9, false, this, v); },
        get_padding: function() { return CS.Call(2, 292, 10, false, this); },
        set_padding: function(v) { return CS.Call(3, 292, 10, false, this, v); },
        get_overflow: function() { return CS.Call(2, 292, 11, false, this); },
        set_overflow: function(v) { return CS.Call(3, 292, 11, false, this, v); },
        get_font: function() { return CS.Call(2, 292, 12, false, this); },
        set_font: function(v) { return CS.Call(3, 292, 12, false, this, v); },
        get_lineHeight: function() { return CS.Call(2, 292, 13, false, this); },
        set_lineHeight: function(v) { return CS.Call(3, 292, 13, false, this, v); },
        get_isHeightDependantOnWidth: function() { return CS.Call(2, 292, 15, false, this); },
        set_isHeightDependantOnWidth: function(v) { return CS.Call(3, 292, 15, false, this, v); },
        get_name: function() { return CS.Call(2, 292, 16, false, this); },
        set_name: function(v) { return CS.Call(3, 292, 16, false, this, v); },
        get_imagePosition: function() { return CS.Call(2, 292, 17, false, this); },
        set_imagePosition: function(v) { return CS.Call(3, 292, 17, false, this, v); },
        get_alignment: function() { return CS.Call(2, 292, 18, false, this); },
        set_alignment: function(v) { return CS.Call(3, 292, 18, false, this, v); },
        get_wordWrap: function() { return CS.Call(2, 292, 19, false, this); },
        set_wordWrap: function(v) { return CS.Call(3, 292, 19, false, this, v); },
        get_clipping: function() { return CS.Call(2, 292, 20, false, this); },
        set_clipping: function(v) { return CS.Call(3, 292, 20, false, this, v); },
        get_contentOffset: function() { return CS.Call(2, 292, 21, false, this); },
        set_contentOffset: function(v) { return CS.Call(3, 292, 21, false, this, v); },
        get_fixedWidth: function() { return CS.Call(2, 292, 22, false, this); },
        set_fixedWidth: function(v) { return CS.Call(3, 292, 22, false, this, v); },
        get_fixedHeight: function() { return CS.Call(2, 292, 23, false, this); },
        set_fixedHeight: function(v) { return CS.Call(3, 292, 23, false, this, v); },
        get_stretchWidth: function() { return CS.Call(2, 292, 24, false, this); },
        set_stretchWidth: function(v) { return CS.Call(3, 292, 24, false, this, v); },
        get_stretchHeight: function() { return CS.Call(2, 292, 25, false, this); },
        set_stretchHeight: function(v) { return CS.Call(3, 292, 25, false, this, v); },
        get_fontSize: function() { return CS.Call(2, 292, 26, false, this); },
        set_fontSize: function(v) { return CS.Call(3, 292, 26, false, this, v); },
        get_fontStyle: function() { return CS.Call(2, 292, 27, false, this); },
        set_fontStyle: function(v) { return CS.Call(3, 292, 27, false, this, v); },
        get_richText: function() { return CS.Call(2, 292, 28, false, this); },
        set_richText: function(v) { return CS.Call(3, 292, 28, false, this, v); },
        CalcHeight: function(a0/*GUIContent*/, a1/*Single*/) { 
            return CS.Call(4, 292, 0, false, this, a0, a1); //Ret: Single
        },
        CalcMinMaxWidth: function(a0/*GUIContent*/, a1/*Single&*/, a2/*Single&*/) { 
            return CS.Call(4, 292, 1, false, this, a0, a1, a2); //Ret: Void
        },
        CalcScreenSize: function(a0/*Vector2*/) { 
            return CS.Call(4, 292, 2, false, this, a0); //Ret: Vector2
        },
        CalcSize: function(a0/*GUIContent*/) { 
            return CS.Call(4, 292, 3, false, this, a0); //Ret: Vector2
        },
        Draw$$Rect$$String$$Boolean$$Boolean$$Boolean$$Boolean: function(a0/*Rect*/, a1/*String*/, a2/*Boolean*/, a3/*Boolean*/, a4/*Boolean*/, a5/*Boolean*/) { 
            return CS.Call(4, 292, 4, false, this, a0, a1, a2, a3, a4, a5); //Ret: Void
        },
        Draw$$Rect$$Texture$$Boolean$$Boolean$$Boolean$$Boolean: function(a0/*Rect*/, a1/*Texture*/, a2/*Boolean*/, a3/*Boolean*/, a4/*Boolean*/, a5/*Boolean*/) { 
            return CS.Call(4, 292, 5, false, this, a0, a1, a2, a3, a4, a5); //Ret: Void
        },
        Draw$$Rect$$GUIContent$$Boolean$$Boolean$$Boolean$$Boolean: function(a0/*Rect*/, a1/*GUIContent*/, a2/*Boolean*/, a3/*Boolean*/, a4/*Boolean*/, a5/*Boolean*/) { 
            return CS.Call(4, 292, 6, false, this, a0, a1, a2, a3, a4, a5); //Ret: Void
        },
        Draw$$Rect$$Boolean$$Boolean$$Boolean$$Boolean: function(a0/*Rect*/, a1/*Boolean*/, a2/*Boolean*/, a3/*Boolean*/, a4/*Boolean*/) { 
            return CS.Call(4, 292, 7, false, this, a0, a1, a2, a3, a4); //Ret: Void
        },
        Draw$$Rect$$GUIContent$$Int32$$Boolean: function(a0/*Rect*/, a1/*GUIContent*/, a2/*Int32*/, a3/*Boolean*/) { 
            return CS.Call(4, 292, 8, false, this, a0, a1, a2, a3); //Ret: Void
        },
        Draw$$Rect$$GUIContent$$Int32: function(a0/*Rect*/, a1/*GUIContent*/, a2/*Int32*/) { 
            return CS.Call(4, 292, 9, false, this, a0, a1, a2); //Ret: Void
        },
        DrawCursor: function(a0/*Rect*/, a1/*GUIContent*/, a2/*Int32*/, a3/*Int32*/) { 
            return CS.Call(4, 292, 10, false, this, a0, a1, a2, a3); //Ret: Void
        },
        DrawWithTextSelection: function(a0/*Rect*/, a1/*GUIContent*/, a2/*Int32*/, a3/*Int32*/, a4/*Int32*/) { 
            return CS.Call(4, 292, 11, false, this, a0, a1, a2, a3, a4); //Ret: Void
        },
        GetCursorPixelPosition: function(a0/*Rect*/, a1/*GUIContent*/, a2/*Int32*/) { 
            return CS.Call(4, 292, 12, false, this, a0, a1, a2); //Ret: Vector2
        },
        GetCursorStringIndex: function(a0/*Rect*/, a1/*GUIContent*/, a2/*Vector2*/) { 
            return CS.Call(4, 292, 13, false, this, a0, a1, a2); //Ret: Int32
        },
        toString: function() { 
            return CS.Call(4, 292, 14, false, this); //Ret: String
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$GUIStyle);

// UnityEngine.ExitGUIException
var UnityEngine$ExitGUIException = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.ExitGUIException",
    Kind: "Class",
    baseTypeName: "System.Exception",
    interfaceNames: ["System.Runtime.Serialization.ISerializable", "System.Runtime.InteropServices._Exception"],
    definition: {
        ctor: function() { CS.Call(5, 293, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$ExitGUIException);

// UnityEngine.GUIUtility
var UnityEngine$GUIUtility = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.GUIUtility",
    Kind: "Class",
    baseTypeName: "System.Object",
    staticDefinition: {
        get_hotControl: function() { return CS.Call(2, 294, 0, true); },
        set_hotControl: function(v) { return CS.Call(3, 294, 0, true, v); },
        get_keyboardControl: function() { return CS.Call(2, 294, 1, true); },
        set_keyboardControl: function(v) { return CS.Call(3, 294, 1, true, v); },
        get_systemCopyBuffer: function() { return CS.Call(2, 294, 2, true); },
        set_systemCopyBuffer: function(v) { return CS.Call(3, 294, 2, true, v); },
        get_hasModalWindow: function() { return CS.Call(2, 294, 3, true); },
        set_hasModalWindow: function(v) { return CS.Call(3, 294, 3, true, v); },
        ExitGUI: function() { 
            return CS.Call(4, 294, 0, true); //Ret: Void
        },
        GetControlID$$Int32$$FocusType$$Rect: function(a0/*Int32*/, a1/*FocusType*/, a2/*Rect*/) { 
            return CS.Call(4, 294, 1, true, a0, a1, a2); //Ret: Int32
        },
        GetControlID$$GUIContent$$FocusType$$Rect: function(a0/*GUIContent*/, a1/*FocusType*/, a2/*Rect*/) { 
            return CS.Call(4, 294, 2, true, a0, a1, a2); //Ret: Int32
        },
        GetControlID$$Int32$$FocusType: function(a0/*Int32*/, a1/*FocusType*/) { 
            return CS.Call(4, 294, 3, true, a0, a1); //Ret: Int32
        },
        GetControlID$$GUIContent$$FocusType: function(a0/*GUIContent*/, a1/*FocusType*/) { 
            return CS.Call(4, 294, 4, true, a0, a1); //Ret: Int32
        },
        GetControlID$$FocusType$$Rect: function(a0/*FocusType*/, a1/*Rect*/) { 
            return CS.Call(4, 294, 5, true, a0, a1); //Ret: Int32
        },
        GetControlID$$FocusType: function(a0/*FocusType*/) { 
            return CS.Call(4, 294, 6, true, a0); //Ret: Int32
        },
        GetStateObject: function(a0/*Type*/, a1/*Int32*/) { 
            return CS.Call(4, 294, 7, true, a0.get_FullName(), a1); //Ret: Object
        },
        GUIToScreenPoint: function(a0/*Vector2*/) { 
            return CS.Call(4, 294, 8, true, a0); //Ret: Vector2
        },
        QueryStateObject: function(a0/*Type*/, a1/*Int32*/) { 
            return CS.Call(4, 294, 9, true, a0.get_FullName(), a1); //Ret: Object
        },
        RotateAroundPivot: function(a0/*Single*/, a1/*Vector2*/) { 
            return CS.Call(4, 294, 10, true, a0, a1); //Ret: Void
        },
        ScaleAroundPivot: function(a0/*Vector2*/, a1/*Vector2*/) { 
            return CS.Call(4, 294, 11, true, a0, a1); //Ret: Void
        },
        ScreenToGUIPoint: function(a0/*Vector2*/) { 
            return CS.Call(4, 294, 12, true, a0); //Ret: Vector2
        },
        ScreenToGUIRect: function(a0/*Rect*/) { 
            return CS.Call(4, 294, 13, true, a0); //Ret: Rect
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 294, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$GUIUtility);

// UnityEngine.JsonUtility
var UnityEngine$JsonUtility = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.JsonUtility",
    Kind: "Class",
    baseTypeName: "System.Object",
    staticDefinition: {
        FromJson$$String$$Type: function(a0/*String*/, a1/*Type*/) { 
            return CS.Call(4, 295, 0, true, a0, a1.get_FullName()); //Ret: Object
        },
        FromJson$1$$String: function(t0, a0/*String*/) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 295, 1, true, native_t0, a0); //Ret: T
        },
        FromJsonOverwrite: function(a0/*String*/, a1/*Object*/) { 
            return CS.Call(4, 295, 2, true, a0, a1); //Ret: Void
        },
        ToJson$$Object$$Boolean: function(a0/*Object*/, a1/*Boolean*/) { 
            return CS.Call(4, 295, 3, true, a0, a1); //Ret: String
        },
        ToJson$$Object: function(a0/*Object*/) { 
            return CS.Call(4, 295, 4, true, a0); //Ret: String
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$JsonUtility);

// UnityEngine.Color
var UnityEngine$Color = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Color",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    fields: {
        r: {
            get: function() { return CS.Call(0, 296, 0, false, this); }, 
            set: function(v) { return CS.Call(1, 296, 0, false, this, v); }
        },
        g: {
            get: function() { return CS.Call(0, 296, 1, false, this); }, 
            set: function(v) { return CS.Call(1, 296, 1, false, this, v); }
        },
        b: {
            get: function() { return CS.Call(0, 296, 2, false, this); }, 
            set: function(v) { return CS.Call(1, 296, 2, false, this, v); }
        },
        a: {
            get: function() { return CS.Call(0, 296, 3, false, this); }, 
            set: function(v) { return CS.Call(1, 296, 3, false, this, v); }
        },
    },
    staticDefinition: {
        get_red: function() { return CS.Call(2, 296, 0, true); },
        set_red: function(v) { return CS.Call(3, 296, 0, true, v); },
        get_green: function() { return CS.Call(2, 296, 1, true); },
        set_green: function(v) { return CS.Call(3, 296, 1, true, v); },
        get_blue: function() { return CS.Call(2, 296, 2, true); },
        set_blue: function(v) { return CS.Call(3, 296, 2, true, v); },
        get_white: function() { return CS.Call(2, 296, 3, true); },
        set_white: function(v) { return CS.Call(3, 296, 3, true, v); },
        get_black: function() { return CS.Call(2, 296, 4, true); },
        set_black: function(v) { return CS.Call(3, 296, 4, true, v); },
        get_yellow: function() { return CS.Call(2, 296, 5, true); },
        set_yellow: function(v) { return CS.Call(3, 296, 5, true, v); },
        get_cyan: function() { return CS.Call(2, 296, 6, true); },
        set_cyan: function(v) { return CS.Call(3, 296, 6, true, v); },
        get_magenta: function() { return CS.Call(2, 296, 7, true); },
        set_magenta: function(v) { return CS.Call(3, 296, 7, true, v); },
        get_gray: function() { return CS.Call(2, 296, 8, true); },
        set_gray: function(v) { return CS.Call(3, 296, 8, true, v); },
        get_grey: function() { return CS.Call(2, 296, 9, true); },
        set_grey: function(v) { return CS.Call(3, 296, 9, true, v); },
        get_clear: function() { return CS.Call(2, 296, 10, true); },
        set_clear: function(v) { return CS.Call(3, 296, 10, true, v); },
        HSVToRGB$$Single$$Single$$Single$$Boolean: function(a0/*Single*/, a1/*Single*/, a2/*Single*/, a3/*Boolean*/) { 
            return CS.Call(4, 296, 4, true, a0, a1, a2, a3); //Ret: Color
        },
        HSVToRGB$$Single$$Single$$Single: function(a0/*Single*/, a1/*Single*/, a2/*Single*/) { 
            return CS.Call(4, 296, 5, true, a0, a1, a2); //Ret: Color
        },
        Lerp: function(a0/*Color*/, a1/*Color*/, a2/*Single*/) { 
            return CS.Call(4, 296, 6, true, a0, a1, a2); //Ret: Color
        },
        LerpUnclamped: function(a0/*Color*/, a1/*Color*/, a2/*Single*/) { 
            return CS.Call(4, 296, 7, true, a0, a1, a2); //Ret: Color
        },
        op_Addition: function(a0/*Color*/, a1/*Color*/) { 
            return CS.Call(4, 296, 8, true, a0, a1); //Ret: Color
        },
        op_Division: function(a0/*Color*/, a1/*Single*/) { 
            return CS.Call(4, 296, 9, true, a0, a1); //Ret: Color
        },
        op_Equality: function(a0/*Color*/, a1/*Color*/) { 
            return CS.Call(4, 296, 10, true, a0, a1); //Ret: Boolean
        },
        op_Implicit$$Vector4: function(a0/*Vector4*/) { 
            return CS.Call(4, 296, 11, true, a0); //Ret: Color
        },
        op_Implicit$$Color: function(a0/*Color*/) { 
            return CS.Call(4, 296, 12, true, a0); //Ret: Vector4
        },
        op_Inequality: function(a0/*Color*/, a1/*Color*/) { 
            return CS.Call(4, 296, 13, true, a0, a1); //Ret: Boolean
        },
        op_Multiply$$Color$$Color: function(a0/*Color*/, a1/*Color*/) { 
            return CS.Call(4, 296, 14, true, a0, a1); //Ret: Color
        },
        op_Multiply$$Color$$Single: function(a0/*Color*/, a1/*Single*/) { 
            return CS.Call(4, 296, 15, true, a0, a1); //Ret: Color
        },
        op_Multiply$$Single$$Color: function(a0/*Single*/, a1/*Color*/) { 
            return CS.Call(4, 296, 16, true, a0, a1); //Ret: Color
        },
        op_Subtraction: function(a0/*Color*/, a1/*Color*/) { 
            return CS.Call(4, 296, 17, true, a0, a1); //Ret: Color
        },
        RGBToHSV: function(a0/*Color*/, a1/*Single&*/, a2/*Single&*/, a3/*Single&*/) { 
            return CS.Call(4, 296, 18, true, a0, a1, a2, a3); //Ret: Void
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 296, 0, true, this); },
        ctor$$Single$$Single$$Single$$Single: function(a0, a1, a2, a3) { CS.Call(5, 296, 1, true, this, a0, a1, a2, a3); },
        ctor$$Single$$Single$$Single: function(a0, a1, a2) { CS.Call(5, 296, 2, true, this, a0, a1, a2); },
        get_grayscale: function() { return CS.Call(2, 296, 11, false, this); },
        set_grayscale: function(v) { return CS.Call(3, 296, 11, false, this, v); },
        get_linear: function() { return CS.Call(2, 296, 12, false, this); },
        set_linear: function(v) { return CS.Call(3, 296, 12, false, this, v); },
        get_gamma: function() { return CS.Call(2, 296, 13, false, this); },
        set_gamma: function(v) { return CS.Call(3, 296, 13, false, this, v); },
        get_maxColorComponent: function() { return CS.Call(2, 296, 14, false, this); },
        set_maxColorComponent: function(v) { return CS.Call(3, 296, 14, false, this, v); },
        get_Item$$Int32: function(ind0) { return CS.Call(2, 296, 15, false, this, ind0); },
        set_Item$$Int32: function(ind0, v) { return CS.Call(3, 296, 15, false, this, ind0, v); },
        Equals: function(a0/*Object*/) { 
            return CS.Call(4, 296, 0, false, this, a0); //Ret: Boolean
        },
        GetHashCode: function() { 
            return CS.Call(4, 296, 1, false, this); //Ret: Int32
        },
        toString$$String: function(a0/*String*/) { 
            return CS.Call(4, 296, 2, false, this, a0); //Ret: String
        },
        toString: function() { 
            return CS.Call(4, 296, 3, false, this); //Ret: String
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Color);

// UnityEngine.Resolution
var UnityEngine$Resolution = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Resolution",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    definition: {
        ctor: function() { CS.Call(5, 297, 0, true, this); },
        get_width: function() { return CS.Call(2, 297, 0, false, this); },
        set_width: function(v) { return CS.Call(3, 297, 0, false, this, v); },
        get_height: function() { return CS.Call(2, 297, 1, false, this); },
        set_height: function(v) { return CS.Call(3, 297, 1, false, this, v); },
        get_refreshRate: function() { return CS.Call(2, 297, 2, false, this); },
        set_refreshRate: function(v) { return CS.Call(3, 297, 2, false, this, v); },
        toString: function() { 
            return CS.Call(4, 297, 0, false, this); //Ret: String
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Resolution);

// UnityEngine.RenderBuffer
var UnityEngine$RenderBuffer = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.RenderBuffer",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    definition: {
        ctor: function() { CS.Call(5, 298, 0, true, this); },
        GetNativeRenderBufferPtr: function() { 
            return CS.Call(4, 298, 0, false, this); //Ret: IntPtr
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$RenderBuffer);

// UnityEngine.RenderTargetSetup
var UnityEngine$RenderTargetSetup = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.RenderTargetSetup",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    fields: {
        color: {
            get: function() { return CS.Call(0, 299, 0, false, this); }, 
            set: function(v) { return CS.Call(1, 299, 0, false, this, v); }
        },
        depth: {
            get: function() { return CS.Call(0, 299, 1, false, this); }, 
            set: function(v) { return CS.Call(1, 299, 1, false, this, v); }
        },
        mipLevel: {
            get: function() { return CS.Call(0, 299, 2, false, this); }, 
            set: function(v) { return CS.Call(1, 299, 2, false, this, v); }
        },
        cubemapFace: {
            get: function() { return CS.Call(0, 299, 3, false, this); }, 
            set: function(v) { return CS.Call(1, 299, 3, false, this, v); }
        },
        depthSlice: {
            get: function() { return CS.Call(0, 299, 4, false, this); }, 
            set: function(v) { return CS.Call(1, 299, 4, false, this, v); }
        },
        colorLoad: {
            get: function() { return CS.Call(0, 299, 5, false, this); }, 
            set: function(v) { return CS.Call(1, 299, 5, false, this, v); }
        },
        colorStore: {
            get: function() { return CS.Call(0, 299, 6, false, this); }, 
            set: function(v) { return CS.Call(1, 299, 6, false, this, v); }
        },
        depthLoad: {
            get: function() { return CS.Call(0, 299, 7, false, this); }, 
            set: function(v) { return CS.Call(1, 299, 7, false, this, v); }
        },
        depthStore: {
            get: function() { return CS.Call(0, 299, 8, false, this); }, 
            set: function(v) { return CS.Call(1, 299, 8, false, this, v); }
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 299, 0, true, this); },
        ctor$$RenderBuffer$Array$$RenderBuffer$$Int32$$CubemapFace$$RenderBufferLoadAction$Array$$RenderBufferStoreAction$Array$$RenderBufferLoadAction$$RenderBufferStoreAction: function(a0, a1, a2, a3, a4, a5, a6, a7) { CS.Call(5, 299, 1, true, this, a0, a1, a2, a3, a4, a5, a6, a7); },
        ctor$$RenderBuffer$$RenderBuffer: function(a0, a1) { CS.Call(5, 299, 2, true, this, a0, a1); },
        ctor$$RenderBuffer$$RenderBuffer$$Int32: function(a0, a1, a2) { CS.Call(5, 299, 3, true, this, a0, a1, a2); },
        ctor$$RenderBuffer$$RenderBuffer$$Int32$$CubemapFace: function(a0, a1, a2, a3) { CS.Call(5, 299, 4, true, this, a0, a1, a2, a3); },
        ctor$$RenderBuffer$$RenderBuffer$$Int32$$CubemapFace$$Int32: function(a0, a1, a2, a3, a4) { CS.Call(5, 299, 5, true, this, a0, a1, a2, a3, a4); },
        ctor$$RenderBuffer$Array$$RenderBuffer: function(a0, a1) { CS.Call(5, 299, 6, true, this, a0, a1); },
        ctor$$RenderBuffer$Array$$RenderBuffer$$Int32: function(a0, a1, a2) { CS.Call(5, 299, 7, true, this, a0, a1, a2); },
        ctor$$RenderBuffer$Array$$RenderBuffer$$Int32$$CubemapFace: function(a0, a1, a2, a3) { CS.Call(5, 299, 8, true, this, a0, a1, a2, a3); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$RenderTargetSetup);

// UnityEngine.StackTraceUtility
var UnityEngine$StackTraceUtility = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.StackTraceUtility",
    Kind: "Class",
    baseTypeName: "System.Object",
    staticDefinition: {
        ExtractStackTrace: function() { 
            return CS.Call(4, 300, 0, true); //Ret: String
        },
        ExtractStringFromException: function(a0/*Object*/) { 
            return CS.Call(4, 300, 1, true, a0); //Ret: String
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 300, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$StackTraceUtility);

// UnityEngine.UnityException
var UnityEngine$UnityException = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.UnityException",
    Kind: "Class",
    baseTypeName: "System.SystemException",
    interfaceNames: ["System.Runtime.Serialization.ISerializable", "System.Runtime.InteropServices._Exception"],
    definition: {
        ctor: function() { CS.Call(5, 301, 0, true, this); },
        ctor$$String: function(a0) { CS.Call(5, 301, 1, true, this, a0); },
        ctor$$String$$Exception: function(a0, a1) { CS.Call(5, 301, 2, true, this, a0, a1); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$UnityException);

// UnityEngine.MissingComponentException
var UnityEngine$MissingComponentException = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.MissingComponentException",
    Kind: "Class",
    baseTypeName: "System.SystemException",
    interfaceNames: ["System.Runtime.Serialization.ISerializable", "System.Runtime.InteropServices._Exception"],
    definition: {
        ctor: function() { CS.Call(5, 302, 0, true, this); },
        ctor$$String: function(a0) { CS.Call(5, 302, 1, true, this, a0); },
        ctor$$String$$Exception: function(a0, a1) { CS.Call(5, 302, 2, true, this, a0, a1); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$MissingComponentException);

// UnityEngine.UnassignedReferenceException
var UnityEngine$UnassignedReferenceException = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.UnassignedReferenceException",
    Kind: "Class",
    baseTypeName: "System.SystemException",
    interfaceNames: ["System.Runtime.Serialization.ISerializable", "System.Runtime.InteropServices._Exception"],
    definition: {
        ctor: function() { CS.Call(5, 303, 0, true, this); },
        ctor$$String: function(a0) { CS.Call(5, 303, 1, true, this, a0); },
        ctor$$String$$Exception: function(a0, a1) { CS.Call(5, 303, 2, true, this, a0, a1); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$UnassignedReferenceException);

// UnityEngine.MissingReferenceException
var UnityEngine$MissingReferenceException = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.MissingReferenceException",
    Kind: "Class",
    baseTypeName: "System.SystemException",
    interfaceNames: ["System.Runtime.Serialization.ISerializable", "System.Runtime.InteropServices._Exception"],
    definition: {
        ctor: function() { CS.Call(5, 304, 0, true, this); },
        ctor$$String: function(a0) { CS.Call(5, 304, 1, true, this, a0); },
        ctor$$String$$Exception: function(a0, a1) { CS.Call(5, 304, 2, true, this, a0, a1); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$MissingReferenceException);

// UnityEngine.StateMachineBehaviour
var UnityEngine$StateMachineBehaviour = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.StateMachineBehaviour",
    Kind: "Class",
    baseTypeName: "UnityEngine.ScriptableObject",
    definition: {
        OnStateEnter$$Animator$$AnimatorStateInfo$$Int32$$AnimatorControllerPlayable: function(a0/*Animator*/, a1/*AnimatorStateInfo*/, a2/*Int32*/, a3/*AnimatorControllerPlayable*/) { 
            return CS.Call(4, 305, 0, false, this, a0, a1, a2, a3); //Ret: Void
        },
        OnStateEnter$$Animator$$AnimatorStateInfo$$Int32: function(a0/*Animator*/, a1/*AnimatorStateInfo*/, a2/*Int32*/) { 
            return CS.Call(4, 305, 1, false, this, a0, a1, a2); //Ret: Void
        },
        OnStateExit$$Animator$$AnimatorStateInfo$$Int32$$AnimatorControllerPlayable: function(a0/*Animator*/, a1/*AnimatorStateInfo*/, a2/*Int32*/, a3/*AnimatorControllerPlayable*/) { 
            return CS.Call(4, 305, 2, false, this, a0, a1, a2, a3); //Ret: Void
        },
        OnStateExit$$Animator$$AnimatorStateInfo$$Int32: function(a0/*Animator*/, a1/*AnimatorStateInfo*/, a2/*Int32*/) { 
            return CS.Call(4, 305, 3, false, this, a0, a1, a2); //Ret: Void
        },
        OnStateIK$$Animator$$AnimatorStateInfo$$Int32$$AnimatorControllerPlayable: function(a0/*Animator*/, a1/*AnimatorStateInfo*/, a2/*Int32*/, a3/*AnimatorControllerPlayable*/) { 
            return CS.Call(4, 305, 4, false, this, a0, a1, a2, a3); //Ret: Void
        },
        OnStateIK$$Animator$$AnimatorStateInfo$$Int32: function(a0/*Animator*/, a1/*AnimatorStateInfo*/, a2/*Int32*/) { 
            return CS.Call(4, 305, 5, false, this, a0, a1, a2); //Ret: Void
        },
        OnStateMachineEnter$$Animator$$Int32$$AnimatorControllerPlayable: function(a0/*Animator*/, a1/*Int32*/, a2/*AnimatorControllerPlayable*/) { 
            return CS.Call(4, 305, 6, false, this, a0, a1, a2); //Ret: Void
        },
        OnStateMachineEnter$$Animator$$Int32: function(a0/*Animator*/, a1/*Int32*/) { 
            return CS.Call(4, 305, 7, false, this, a0, a1); //Ret: Void
        },
        OnStateMachineExit$$Animator$$Int32$$AnimatorControllerPlayable: function(a0/*Animator*/, a1/*Int32*/, a2/*AnimatorControllerPlayable*/) { 
            return CS.Call(4, 305, 8, false, this, a0, a1, a2); //Ret: Void
        },
        OnStateMachineExit$$Animator$$Int32: function(a0/*Animator*/, a1/*Int32*/) { 
            return CS.Call(4, 305, 9, false, this, a0, a1); //Ret: Void
        },
        OnStateMove$$Animator$$AnimatorStateInfo$$Int32$$AnimatorControllerPlayable: function(a0/*Animator*/, a1/*AnimatorStateInfo*/, a2/*Int32*/, a3/*AnimatorControllerPlayable*/) { 
            return CS.Call(4, 305, 10, false, this, a0, a1, a2, a3); //Ret: Void
        },
        OnStateMove$$Animator$$AnimatorStateInfo$$Int32: function(a0/*Animator*/, a1/*AnimatorStateInfo*/, a2/*Int32*/) { 
            return CS.Call(4, 305, 11, false, this, a0, a1, a2); //Ret: Void
        },
        OnStateUpdate$$Animator$$AnimatorStateInfo$$Int32$$AnimatorControllerPlayable: function(a0/*Animator*/, a1/*AnimatorStateInfo*/, a2/*Int32*/, a3/*AnimatorControllerPlayable*/) { 
            return CS.Call(4, 305, 12, false, this, a0, a1, a2, a3); //Ret: Void
        },
        OnStateUpdate$$Animator$$AnimatorStateInfo$$Int32: function(a0/*Animator*/, a1/*AnimatorStateInfo*/, a2/*Int32*/) { 
            return CS.Call(4, 305, 13, false, this, a0, a1, a2); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$StateMachineBehaviour);

// UnityEngine.TrackedReference
var UnityEngine$TrackedReference = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.TrackedReference",
    Kind: "Class",
    baseTypeName: "System.Object",
    staticDefinition: {
        op_Equality: function(a0/*TrackedReference*/, a1/*TrackedReference*/) { 
            return CS.Call(4, 306, 2, true, a0, a1); //Ret: Boolean
        },
        op_Implicit: function(a0/*TrackedReference*/) { 
            return CS.Call(4, 306, 3, true, a0); //Ret: Boolean
        },
        op_Inequality: function(a0/*TrackedReference*/, a1/*TrackedReference*/) { 
            return CS.Call(4, 306, 4, true, a0, a1); //Ret: Boolean
        },
    },
    definition: {
        Equals: function(a0/*Object*/) { 
            return CS.Call(4, 306, 0, false, this, a0); //Ret: Boolean
        },
        GetHashCode: function() { 
            return CS.Call(4, 306, 1, false, this); //Ret: Int32
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$TrackedReference);

// UnityEngine.WaitForSecondsRealtime
var UnityEngine$WaitForSecondsRealtime = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.WaitForSecondsRealtime",
    Kind: "Class",
    baseTypeName: "UnityEngine.CustomYieldInstruction",
    interfaceNames: ["System.Collections.IEnumerator"],
    definition: {
        ctor: function(a0) { CS.Call(5, 307, 0, true, this, a0); },
        get_keepWaiting: function() { return CS.Call(2, 307, 0, false, this); },
        set_keepWaiting: function(v) { return CS.Call(3, 307, 0, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$WaitForSecondsRealtime);

// UnityEngine.Logger
var UnityEngine$Logger = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Logger",
    Kind: "Class",
    baseTypeName: "System.Object",
    interfaceNames: ["UnityEngine.ILogger", "UnityEngine.ILogHandler"],
    definition: {
        ctor: function(a0) { CS.Call(5, 308, 0, true, this, a0); },
        get_logHandler: function() { return CS.Call(2, 308, 0, false, this); },
        set_logHandler: function(v) { return CS.Call(3, 308, 0, false, this, v); },
        get_logEnabled: function() { return CS.Call(2, 308, 1, false, this); },
        set_logEnabled: function(v) { return CS.Call(3, 308, 1, false, this, v); },
        get_filterLogType: function() { return CS.Call(2, 308, 2, false, this); },
        set_filterLogType: function(v) { return CS.Call(3, 308, 2, false, this, v); },
        IsLogTypeAllowed: function(a0/*LogType*/) { 
            return CS.Call(4, 308, 0, false, this, a0); //Ret: Boolean
        },
        Log$$LogType$$String$$Object$$Object: function(a0/*LogType*/, a1/*String*/, a2/*Object*/, a3/*Object*/) { 
            return CS.Call(4, 308, 1, false, this, a0, a1, a2, a3); //Ret: Void
        },
        Log$$String$$Object$$Object: function(a0/*String*/, a1/*Object*/, a2/*Object*/) { 
            return CS.Call(4, 308, 2, false, this, a0, a1, a2); //Ret: Void
        },
        Log$$LogType$$String$$Object: function(a0/*LogType*/, a1/*String*/, a2/*Object*/) { 
            return CS.Call(4, 308, 3, false, this, a0, a1, a2); //Ret: Void
        },
        Log$$LogType$$Object$$Object: function(a0/*LogType*/, a1/*Object*/, a2/*Object*/) { 
            return CS.Call(4, 308, 4, false, this, a0, a1, a2); //Ret: Void
        },
        Log$$LogType$$Object: function(a0/*LogType*/, a1/*Object*/) { 
            return CS.Call(4, 308, 5, false, this, a0, a1); //Ret: Void
        },
        Log$$String$$Object: function(a0/*String*/, a1/*Object*/) { 
            return CS.Call(4, 308, 6, false, this, a0, a1); //Ret: Void
        },
        Log$$Object: function(a0/*Object*/) { 
            return CS.Call(4, 308, 7, false, this, a0); //Ret: Void
        },
        LogError$$String$$Object$$Object: function(a0/*String*/, a1/*Object*/, a2/*Object*/) { 
            return CS.Call(4, 308, 8, false, this, a0, a1, a2); //Ret: Void
        },
        LogError$$String$$Object: function(a0/*String*/, a1/*Object*/) { 
            return CS.Call(4, 308, 9, false, this, a0, a1); //Ret: Void
        },
        LogException$$Exception$$Object: function(a0/*Exception*/, a1/*Object*/) { 
            return CS.Call(4, 308, 10, false, this, a0, a1); //Ret: Void
        },
        LogException$$Exception: function(a0/*Exception*/) { 
            return CS.Call(4, 308, 11, false, this, a0); //Ret: Void
        },
        LogFormat$$LogType$$Object$$String$$Object$Array: function(a0/*LogType*/, a1/*Object*/, a2/*String*/, a3/*Object[]*/) { 
            return CS.Call(4, 308, 12, false, this, a0, a1, a2, jsb_formatParamsArray(3, a3, arguments)); //Ret: Void
        },
        LogFormat$$LogType$$String$$Object$Array: function(a0/*LogType*/, a1/*String*/, a2/*Object[]*/) { 
            return CS.Call(4, 308, 13, false, this, a0, a1, jsb_formatParamsArray(2, a2, arguments)); //Ret: Void
        },
        LogWarning$$String$$Object$$Object: function(a0/*String*/, a1/*Object*/, a2/*Object*/) { 
            return CS.Call(4, 308, 14, false, this, a0, a1, a2); //Ret: Void
        },
        LogWarning$$String$$Object: function(a0/*String*/, a1/*Object*/) { 
            return CS.Call(4, 308, 15, false, this, a0, a1); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Logger);

// DG.Tweening.Color2
var DG$Tweening$Color2 = 
{
    assemblyName: "DOTween, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "DG.Tweening.Color2",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    fields: {
        ca: {
            get: function() { return CS.Call(0, 309, 0, false, this); }, 
            set: function(v) { return CS.Call(1, 309, 0, false, this, v); }
        },
        cb: {
            get: function() { return CS.Call(0, 309, 1, false, this); }, 
            set: function(v) { return CS.Call(1, 309, 1, false, this, v); }
        },
    },
    staticDefinition: {
        op_Addition: function(a0/*Color2*/, a1/*Color2*/) { 
            return CS.Call(4, 309, 0, true, a0, a1); //Ret: Color2
        },
        op_Multiply: function(a0/*Color2*/, a1/*Single*/) { 
            return CS.Call(4, 309, 1, true, a0, a1); //Ret: Color2
        },
        op_Subtraction: function(a0/*Color2*/, a1/*Color2*/) { 
            return CS.Call(4, 309, 2, true, a0, a1); //Ret: Color2
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 309, 0, true, this); },
        ctor$$Color$$Color: function(a0, a1) { CS.Call(5, 309, 1, true, this, a0, a1); },
    },
};
jsb_ReplaceOrPushJsType(DG$Tweening$Color2);

// DG.Tweening.DOTween
var DG$Tweening$DOTween = 
{
    assemblyName: "DOTween, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "DG.Tweening.DOTween",
    Kind: "Class",
    baseTypeName: "System.Object",
    staticFields: {
        Version: {
            get: function() { return CS.Call(0, 310, 0, true); }, 
            set: function(v) { return CS.Call(1, 310, 0, true, v); }
        },
        useSafeMode: {
            get: function() { return CS.Call(0, 310, 1, true); }, 
            set: function(v) { return CS.Call(1, 310, 1, true, v); }
        },
        showUnityEditorReport: {
            get: function() { return CS.Call(0, 310, 2, true); }, 
            set: function(v) { return CS.Call(1, 310, 2, true, v); }
        },
        timeScale: {
            get: function() { return CS.Call(0, 310, 3, true); }, 
            set: function(v) { return CS.Call(1, 310, 3, true, v); }
        },
        useSmoothDeltaTime: {
            get: function() { return CS.Call(0, 310, 4, true); }, 
            set: function(v) { return CS.Call(1, 310, 4, true, v); }
        },
        drawGizmos: {
            get: function() { return CS.Call(0, 310, 5, true); }, 
            set: function(v) { return CS.Call(1, 310, 5, true, v); }
        },
        defaultUpdateType: {
            get: function() { return CS.Call(0, 310, 6, true); }, 
            set: function(v) { return CS.Call(1, 310, 6, true, v); }
        },
        defaultTimeScaleIndependent: {
            get: function() { return CS.Call(0, 310, 7, true); }, 
            set: function(v) { return CS.Call(1, 310, 7, true, v); }
        },
        defaultAutoPlay: {
            get: function() { return CS.Call(0, 310, 8, true); }, 
            set: function(v) { return CS.Call(1, 310, 8, true, v); }
        },
        defaultAutoKill: {
            get: function() { return CS.Call(0, 310, 9, true); }, 
            set: function(v) { return CS.Call(1, 310, 9, true, v); }
        },
        defaultLoopType: {
            get: function() { return CS.Call(0, 310, 10, true); }, 
            set: function(v) { return CS.Call(1, 310, 10, true, v); }
        },
        defaultRecyclable: {
            get: function() { return CS.Call(0, 310, 11, true); }, 
            set: function(v) { return CS.Call(1, 310, 11, true, v); }
        },
        defaultEaseType: {
            get: function() { return CS.Call(0, 310, 12, true); }, 
            set: function(v) { return CS.Call(1, 310, 12, true, v); }
        },
        defaultEaseOvershootOrAmplitude: {
            get: function() { return CS.Call(0, 310, 13, true); }, 
            set: function(v) { return CS.Call(1, 310, 13, true, v); }
        },
        defaultEasePeriod: {
            get: function() { return CS.Call(0, 310, 14, true); }, 
            set: function(v) { return CS.Call(1, 310, 14, true, v); }
        },
    },
    staticDefinition: {
        get_logBehaviour: function() { return CS.Call(2, 310, 0, true); },
        set_logBehaviour: function(v) { return CS.Call(3, 310, 0, true, v); },
        Clear: function(a0/*Boolean*/) { 
            return CS.Call(4, 310, 0, true, a0); //Ret: Void
        },
        ClearCachedTweens: function() { 
            return CS.Call(4, 310, 1, true); //Ret: Void
        },
        Complete: function(a0/*Object*/, a1/*Boolean*/) { 
            return CS.Call(4, 310, 2, true, a0, a1); //Ret: Int32
        },
        CompleteAll: function(a0/*Boolean*/) { 
            return CS.Call(4, 310, 3, true, a0); //Ret: Int32
        },
        Flip: function(a0/*Object*/) { 
            return CS.Call(4, 310, 4, true, a0); //Ret: Int32
        },
        FlipAll: function() { 
            return CS.Call(4, 310, 5, true); //Ret: Int32
        },
        Goto: function(a0/*Object*/, a1/*Single*/, a2/*Boolean*/) { 
            return CS.Call(4, 310, 6, true, a0, a1, a2); //Ret: Int32
        },
        GotoAll: function(a0/*Single*/, a1/*Boolean*/) { 
            return CS.Call(4, 310, 7, true, a0, a1); //Ret: Int32
        },
        Init: function(a0/*Nullable`1*/, a1/*Nullable`1*/, a2/*Nullable`1*/) { 
            return CS.Call(4, 310, 8, true, a0, a1, a2); //Ret: IDOTweenInit
        },
        IsTweening: function(a0/*Object*/) { 
            return CS.Call(4, 310, 9, true, a0); //Ret: Boolean
        },
        Kill: function(a0/*Object*/, a1/*Boolean*/) { 
            return CS.Call(4, 310, 10, true, a0, a1); //Ret: Int32
        },
        KillAll$$Boolean$$Object$Array: function(a0/*Boolean*/, a1/*Object[]*/) { 
            return CS.Call(4, 310, 11, true, a0, jsb_formatParamsArray(1, a1, arguments)); //Ret: Int32
        },
        KillAll$$Boolean: function(a0/*Boolean*/) { 
            return CS.Call(4, 310, 12, true, a0); //Ret: Int32
        },
        Pause: function(a0/*Object*/) { 
            return CS.Call(4, 310, 13, true, a0); //Ret: Int32
        },
        PauseAll: function() { 
            return CS.Call(4, 310, 14, true); //Ret: Int32
        },
        PausedTweens: function() { 
            return CS.Call(4, 310, 15, true); //Ret: List`1
        },
        Play$$Object$$Object: function(a0/*Object*/, a1/*Object*/) { 
            return CS.Call(4, 310, 16, true, a0, a1); //Ret: Int32
        },
        Play$$Object: function(a0/*Object*/) { 
            return CS.Call(4, 310, 17, true, a0); //Ret: Int32
        },
        PlayAll: function() { 
            return CS.Call(4, 310, 18, true); //Ret: Int32
        },
        PlayBackwards$$Object$$Object: function(a0/*Object*/, a1/*Object*/) { 
            return CS.Call(4, 310, 19, true, a0, a1); //Ret: Int32
        },
        PlayBackwards$$Object: function(a0/*Object*/) { 
            return CS.Call(4, 310, 20, true, a0); //Ret: Int32
        },
        PlayBackwardsAll: function() { 
            return CS.Call(4, 310, 21, true); //Ret: Int32
        },
        PlayForward$$Object$$Object: function(a0/*Object*/, a1/*Object*/) { 
            return CS.Call(4, 310, 22, true, a0, a1); //Ret: Int32
        },
        PlayForward$$Object: function(a0/*Object*/) { 
            return CS.Call(4, 310, 23, true, a0); //Ret: Int32
        },
        PlayForwardAll: function() { 
            return CS.Call(4, 310, 24, true); //Ret: Int32
        },
        PlayingTweens: function() { 
            return CS.Call(4, 310, 25, true); //Ret: List`1
        },
        Punch: function(a0/*DOGetter`1*/, a1/*DOSetter`1*/, a2/*Vector3*/, a3/*Single*/, a4/*Int32*/, a5/*Single*/) { 
            return CS.Call(4, 310, 26, true, a0, a1, a2, a3, a4, a5); //Ret: TweenerCore`3
        },
        Restart$$Object$$Object$$Boolean: function(a0/*Object*/, a1/*Object*/, a2/*Boolean*/) { 
            return CS.Call(4, 310, 27, true, a0, a1, a2); //Ret: Int32
        },
        Restart$$Object$$Boolean: function(a0/*Object*/, a1/*Boolean*/) { 
            return CS.Call(4, 310, 28, true, a0, a1); //Ret: Int32
        },
        RestartAll: function(a0/*Boolean*/) { 
            return CS.Call(4, 310, 29, true, a0); //Ret: Int32
        },
        Rewind: function(a0/*Object*/, a1/*Boolean*/) { 
            return CS.Call(4, 310, 30, true, a0, a1); //Ret: Int32
        },
        RewindAll: function(a0/*Boolean*/) { 
            return CS.Call(4, 310, 31, true, a0); //Ret: Int32
        },
        Sequence: function() { 
            return CS.Call(4, 310, 32, true); //Ret: Sequence
        },
        SetTweensCapacity: function(a0/*Int32*/, a1/*Int32*/) { 
            return CS.Call(4, 310, 33, true, a0, a1); //Ret: Void
        },
        Shake$$DOGetter$1$Vector3$$DOSetter$1$Vector3$$Single$$Vector3$$Int32$$Single$$Boolean: function(a0/*DOGetter`1*/, a1/*DOSetter`1*/, a2/*Single*/, a3/*Vector3*/, a4/*Int32*/, a5/*Single*/, a6/*Boolean*/) { 
            return CS.Call(4, 310, 34, true, a0, a1, a2, a3, a4, a5, a6); //Ret: TweenerCore`3
        },
        Shake$$DOGetter$1$Vector3$$DOSetter$1$Vector3$$Single$$Single$$Int32$$Single$$Boolean$$Boolean: function(a0/*DOGetter`1*/, a1/*DOSetter`1*/, a2/*Single*/, a3/*Single*/, a4/*Int32*/, a5/*Single*/, a6/*Boolean*/, a7/*Boolean*/) { 
            return CS.Call(4, 310, 35, true, a0, a1, a2, a3, a4, a5, a6, a7); //Ret: TweenerCore`3
        },
        SmoothRewind: function(a0/*Object*/) { 
            return CS.Call(4, 310, 36, true, a0); //Ret: Int32
        },
        SmoothRewindAll: function() { 
            return CS.Call(4, 310, 37, true); //Ret: Int32
        },
        To$3$$ABSTweenPlugin$3$$DOGetter$1$$DOSetter$1$$T2$$Single: function(t0, t1, t2, a0/*ABSTweenPlugin`3*/, a1/*DOGetter`1*/, a2/*DOSetter`1*/, a3/*T2*/, a4/*Single*/) { 
            var native_t0 = t0.getNativeType();
            var native_t1 = t1.getNativeType();
            var native_t2 = t2.getNativeType();
            return CS.Call(4, 310, 38, true, native_t0, native_t1, native_t2, a0, a1, a2, a3, a4); //Ret: TweenerCore`3
        },
        To$$DOGetter$1$Int32$$DOSetter$1$Int32$$Int32$$Single: function(a0/*DOGetter`1*/, a1/*DOSetter`1*/, a2/*Int32*/, a3/*Single*/) { 
            return CS.Call(4, 310, 39, true, a0, a1, a2, a3); //Ret: Tweener
        },
        To$$DOSetter$1$Single$$Single$$Single$$Single: function(a0/*DOSetter`1*/, a1/*Single*/, a2/*Single*/, a3/*Single*/) { 
            return CS.Call(4, 310, 40, true, a0, a1, a2, a3); //Ret: Tweener
        },
        To$$DOGetter$1$Double$$DOSetter$1$Double$$Double$$Single: function(a0/*DOGetter`1*/, a1/*DOSetter`1*/, a2/*Double*/, a3/*Single*/) { 
            return CS.Call(4, 310, 41, true, a0, a1, a2, a3); //Ret: TweenerCore`3
        },
        To$$DOGetter$1$Vector2$$DOSetter$1$Vector2$$Vector2$$Single: function(a0/*DOGetter`1*/, a1/*DOSetter`1*/, a2/*Vector2*/, a3/*Single*/) { 
            return CS.Call(4, 310, 42, true, a0, a1, a2, a3); //Ret: TweenerCore`3
        },
        To$$DOGetter$1$RectOffset$$DOSetter$1$RectOffset$$RectOffset$$Single: function(a0/*DOGetter`1*/, a1/*DOSetter`1*/, a2/*RectOffset*/, a3/*Single*/) { 
            return CS.Call(4, 310, 43, true, a0, a1, a2, a3); //Ret: Tweener
        },
        To$$DOGetter$1$Quaternion$$DOSetter$1$Quaternion$$Vector3$$Single: function(a0/*DOGetter`1*/, a1/*DOSetter`1*/, a2/*Vector3*/, a3/*Single*/) { 
            return CS.Call(4, 310, 44, true, a0, a1, a2, a3); //Ret: TweenerCore`3
        },
        To$$DOGetter$1$Color$$DOSetter$1$Color$$Color$$Single: function(a0/*DOGetter`1*/, a1/*DOSetter`1*/, a2/*Color*/, a3/*Single*/) { 
            return CS.Call(4, 310, 45, true, a0, a1, a2, a3); //Ret: TweenerCore`3
        },
        To$$DOGetter$1$Rect$$DOSetter$1$Rect$$Rect$$Single: function(a0/*DOGetter`1*/, a1/*DOSetter`1*/, a2/*Rect*/, a3/*Single*/) { 
            return CS.Call(4, 310, 46, true, a0, a1, a2, a3); //Ret: TweenerCore`3
        },
        To$$DOGetter$1$UInt32$$DOSetter$1$UInt32$$UInt32$$Single: function(a0/*DOGetter`1*/, a1/*DOSetter`1*/, a2/*UInt32*/, a3/*Single*/) { 
            return CS.Call(4, 310, 47, true, a0, a1, a2, a3); //Ret: Tweener
        },
        To$$DOGetter$1$Int64$$DOSetter$1$Int64$$Int64$$Single: function(a0/*DOGetter`1*/, a1/*DOSetter`1*/, a2/*Int64*/, a3/*Single*/) { 
            return CS.Call(4, 310, 48, true, a0, a1, a2, a3); //Ret: Tweener
        },
        To$$DOGetter$1$Vector3$$DOSetter$1$Vector3$$Vector3$$Single: function(a0/*DOGetter`1*/, a1/*DOSetter`1*/, a2/*Vector3*/, a3/*Single*/) { 
            return CS.Call(4, 310, 49, true, a0, a1, a2, a3); //Ret: TweenerCore`3
        },
        To$$DOGetter$1$Vector4$$DOSetter$1$Vector4$$Vector4$$Single: function(a0/*DOGetter`1*/, a1/*DOSetter`1*/, a2/*Vector4*/, a3/*Single*/) { 
            return CS.Call(4, 310, 50, true, a0, a1, a2, a3); //Ret: TweenerCore`3
        },
        To$$DOGetter$1$UInt64$$DOSetter$1$UInt64$$UInt64$$Single: function(a0/*DOGetter`1*/, a1/*DOSetter`1*/, a2/*UInt64*/, a3/*Single*/) { 
            return CS.Call(4, 310, 51, true, a0, a1, a2, a3); //Ret: Tweener
        },
        To$$DOGetter$1$String$$DOSetter$1$String$$String$$Single: function(a0/*DOGetter`1*/, a1/*DOSetter`1*/, a2/*String*/, a3/*Single*/) { 
            return CS.Call(4, 310, 52, true, a0, a1, a2, a3); //Ret: TweenerCore`3
        },
        To$$DOGetter$1$Single$$DOSetter$1$Single$$Single$$Single: function(a0/*DOGetter`1*/, a1/*DOSetter`1*/, a2/*Single*/, a3/*Single*/) { 
            return CS.Call(4, 310, 53, true, a0, a1, a2, a3); //Ret: TweenerCore`3
        },
        ToAlpha: function(a0/*DOGetter`1*/, a1/*DOSetter`1*/, a2/*Single*/, a3/*Single*/) { 
            return CS.Call(4, 310, 54, true, a0, a1, a2, a3); //Ret: Tweener
        },
        ToArray: function(a0/*DOGetter`1*/, a1/*DOSetter`1*/, a2/*Vector3[]*/, a3/*Single[]*/) { 
            return CS.Call(4, 310, 55, true, a0, a1, a2, a3); //Ret: TweenerCore`3
        },
        ToAxis: function(a0/*DOGetter`1*/, a1/*DOSetter`1*/, a2/*Single*/, a3/*Single*/, a4/*AxisConstraint*/) { 
            return CS.Call(4, 310, 56, true, a0, a1, a2, a3, a4); //Ret: TweenerCore`3
        },
        TogglePause: function(a0/*Object*/) { 
            return CS.Call(4, 310, 57, true, a0); //Ret: Int32
        },
        TogglePauseAll: function() { 
            return CS.Call(4, 310, 58, true); //Ret: Int32
        },
        TotalPlayingTweens: function() { 
            return CS.Call(4, 310, 59, true); //Ret: Int32
        },
        TweensById: function(a0/*Object*/, a1/*Boolean*/) { 
            return CS.Call(4, 310, 60, true, a0, a1); //Ret: List`1
        },
        TweensByTarget: function(a0/*Object*/, a1/*Boolean*/) { 
            return CS.Call(4, 310, 61, true, a0, a1); //Ret: List`1
        },
        Validate: function() { 
            return CS.Call(4, 310, 62, true); //Ret: Int32
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 310, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(DG$Tweening$DOTween);

// DG.Tweening.DOVirtual
var DG$Tweening$DOVirtual = 
{
    assemblyName: "DOTween, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "DG.Tweening.DOVirtual",
    Kind: "Class",
    baseTypeName: "System.Object",
    staticDefinition: {
        DelayedCall: function(a0/*Single*/, a1/*TweenCallback*/, a2/*Boolean*/) { 
            return CS.Call(4, 311, 0, true, a0, a1, a2); //Ret: Tween
        },
        EasedValue$$Single$$Single$$Single$$Ease$$Single$$Single: function(a0/*Single*/, a1/*Single*/, a2/*Single*/, a3/*Ease*/, a4/*Single*/, a5/*Single*/) { 
            return CS.Call(4, 311, 1, true, a0, a1, a2, a3, a4, a5); //Ret: Single
        },
        EasedValue$$Single$$Single$$Single$$Ease$$Single: function(a0/*Single*/, a1/*Single*/, a2/*Single*/, a3/*Ease*/, a4/*Single*/) { 
            return CS.Call(4, 311, 2, true, a0, a1, a2, a3, a4); //Ret: Single
        },
        EasedValue$$Single$$Single$$Single$$AnimationCurve: function(a0/*Single*/, a1/*Single*/, a2/*Single*/, a3/*AnimationCurve*/) { 
            return CS.Call(4, 311, 3, true, a0, a1, a2, a3); //Ret: Single
        },
        EasedValue$$Single$$Single$$Single$$Ease: function(a0/*Single*/, a1/*Single*/, a2/*Single*/, a3/*Ease*/) { 
            return CS.Call(4, 311, 4, true, a0, a1, a2, a3); //Ret: Single
        },
        Float: function(a0/*Single*/, a1/*Single*/, a2/*Single*/, a3/*TweenCallback`1*/) { 
            return CS.Call(4, 311, 5, true, a0, a1, a2, a3); //Ret: Tweener
        },
    },
};
jsb_ReplaceOrPushJsType(DG$Tweening$DOVirtual);

// DG.Tweening.EaseFactory
var DG$Tweening$EaseFactory = 
{
    assemblyName: "DOTween, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "DG.Tweening.EaseFactory",
    Kind: "Class",
    baseTypeName: "System.Object",
    staticDefinition: {
        StopMotion$$Int32$$EaseFunction: function(a0/*Int32*/, a1/*EaseFunction*/) { 
            return CS.Call(4, 312, 0, true, a0, a1); //Ret: EaseFunction
        },
        StopMotion$$Int32$$AnimationCurve: function(a0/*Int32*/, a1/*AnimationCurve*/) { 
            return CS.Call(4, 312, 1, true, a0, a1); //Ret: EaseFunction
        },
        StopMotion$$Int32$$Nullable$1$Ease: function(a0/*Int32*/, a1/*Nullable`1*/) { 
            return CS.Call(4, 312, 2, true, a0, a1); //Ret: EaseFunction
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 312, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(DG$Tweening$EaseFactory);

// DG.Tweening.TweenExtensions
var DG$Tweening$TweenExtensions = 
{
    assemblyName: "DOTween, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "DG.Tweening.TweenExtensions",
    Kind: "Class",
    baseTypeName: "System.Object",
    staticDefinition: {
        Complete$$Tween$$Boolean: function(a0/*Tween*/, a1/*Boolean*/) { 
            return CS.Call(4, 313, 0, true, a0, a1); //Ret: Void
        },
        Complete$$Tween: function(a0/*Tween*/) { 
            return CS.Call(4, 313, 1, true, a0); //Ret: Void
        },
        CompletedLoops: function(a0/*Tween*/) { 
            return CS.Call(4, 313, 2, true, a0); //Ret: Int32
        },
        Delay: function(a0/*Tween*/) { 
            return CS.Call(4, 313, 3, true, a0); //Ret: Single
        },
        Duration: function(a0/*Tween*/, a1/*Boolean*/) { 
            return CS.Call(4, 313, 4, true, a0, a1); //Ret: Single
        },
        Elapsed: function(a0/*Tween*/, a1/*Boolean*/) { 
            return CS.Call(4, 313, 5, true, a0, a1); //Ret: Single
        },
        ElapsedDirectionalPercentage: function(a0/*Tween*/) { 
            return CS.Call(4, 313, 6, true, a0); //Ret: Single
        },
        ElapsedPercentage: function(a0/*Tween*/, a1/*Boolean*/) { 
            return CS.Call(4, 313, 7, true, a0, a1); //Ret: Single
        },
        Flip: function(a0/*Tween*/) { 
            return CS.Call(4, 313, 8, true, a0); //Ret: Void
        },
        ForceInit: function(a0/*Tween*/) { 
            return CS.Call(4, 313, 9, true, a0); //Ret: Void
        },
        Goto: function(a0/*Tween*/, a1/*Single*/, a2/*Boolean*/) { 
            return CS.Call(4, 313, 10, true, a0, a1, a2); //Ret: Void
        },
        GotoWaypoint: function(a0/*Tween*/, a1/*Int32*/, a2/*Boolean*/) { 
            return CS.Call(4, 313, 11, true, a0, a1, a2); //Ret: Void
        },
        IsActive: function(a0/*Tween*/) { 
            return CS.Call(4, 313, 12, true, a0); //Ret: Boolean
        },
        IsBackwards: function(a0/*Tween*/) { 
            return CS.Call(4, 313, 13, true, a0); //Ret: Boolean
        },
        IsComplete: function(a0/*Tween*/) { 
            return CS.Call(4, 313, 14, true, a0); //Ret: Boolean
        },
        IsInitialized: function(a0/*Tween*/) { 
            return CS.Call(4, 313, 15, true, a0); //Ret: Boolean
        },
        IsPlaying: function(a0/*Tween*/) { 
            return CS.Call(4, 313, 16, true, a0); //Ret: Boolean
        },
        Kill: function(a0/*Tween*/, a1/*Boolean*/) { 
            return CS.Call(4, 313, 17, true, a0, a1); //Ret: Void
        },
        Loops: function(a0/*Tween*/) { 
            return CS.Call(4, 313, 18, true, a0); //Ret: Int32
        },
        PathGetDrawPoints: function(a0/*Tween*/, a1/*Int32*/) { 
            return CS.Call(4, 313, 19, true, a0, a1); //Ret: Vector3[]
        },
        PathGetPoint: function(a0/*Tween*/, a1/*Single*/) { 
            return CS.Call(4, 313, 20, true, a0, a1); //Ret: Vector3
        },
        PathLength: function(a0/*Tween*/) { 
            return CS.Call(4, 313, 21, true, a0); //Ret: Single
        },
        Pause$1: function(t0, a0/*T*/) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 313, 22, true, native_t0, a0); //Ret: T
        },
        Play$1: function(t0, a0/*T*/) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 313, 23, true, native_t0, a0); //Ret: T
        },
        PlayBackwards: function(a0/*Tween*/) { 
            return CS.Call(4, 313, 24, true, a0); //Ret: Void
        },
        PlayForward: function(a0/*Tween*/) { 
            return CS.Call(4, 313, 25, true, a0); //Ret: Void
        },
        Restart: function(a0/*Tween*/, a1/*Boolean*/) { 
            return CS.Call(4, 313, 26, true, a0, a1); //Ret: Void
        },
        Rewind: function(a0/*Tween*/, a1/*Boolean*/) { 
            return CS.Call(4, 313, 27, true, a0, a1); //Ret: Void
        },
        SmoothRewind: function(a0/*Tween*/) { 
            return CS.Call(4, 313, 28, true, a0); //Ret: Void
        },
        TogglePause: function(a0/*Tween*/) { 
            return CS.Call(4, 313, 29, true, a0); //Ret: Void
        },
        WaitForCompletion: function(a0/*Tween*/) { 
            return CS.Call(4, 313, 30, true, a0); //Ret: YieldInstruction
        },
        WaitForElapsedLoops: function(a0/*Tween*/, a1/*Int32*/) { 
            return CS.Call(4, 313, 31, true, a0, a1); //Ret: YieldInstruction
        },
        WaitForKill: function(a0/*Tween*/) { 
            return CS.Call(4, 313, 32, true, a0); //Ret: YieldInstruction
        },
        WaitForPosition: function(a0/*Tween*/, a1/*Single*/) { 
            return CS.Call(4, 313, 33, true, a0, a1); //Ret: YieldInstruction
        },
        WaitForRewind: function(a0/*Tween*/) { 
            return CS.Call(4, 313, 34, true, a0); //Ret: YieldInstruction
        },
        WaitForStart: function(a0/*Tween*/) { 
            return CS.Call(4, 313, 35, true, a0); //Ret: Coroutine
        },
    },
};
jsb_ReplaceOrPushJsType(DG$Tweening$TweenExtensions);

// DG.Tweening.Sequence
var DG$Tweening$Sequence = 
{
    assemblyName: "DOTween, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "DG.Tweening.Sequence",
    Kind: "Class",
    baseTypeName: "DG.Tweening.Tween",
};
jsb_ReplaceOrPushJsType(DG$Tweening$Sequence);

// DG.Tweening.ShortcutExtensions
var DG$Tweening$ShortcutExtensions = 
{
    assemblyName: "DOTween, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "DG.Tweening.ShortcutExtensions",
    Kind: "Class",
    baseTypeName: "System.Object",
    staticDefinition: {
        DOAspect: function(a0/*Camera*/, a1/*Single*/, a2/*Single*/) { 
            return CS.Call(4, 315, 0, true, a0, a1, a2); //Ret: Tweener
        },
        DOBlendableColor$$Material$$Color$$String$$Single: function(a0/*Material*/, a1/*Color*/, a2/*String*/, a3/*Single*/) { 
            return CS.Call(4, 315, 1, true, a0, a1, a2, a3); //Ret: Tweener
        },
        DOBlendableColor$$Light$$Color$$Single: function(a0/*Light*/, a1/*Color*/, a2/*Single*/) { 
            return CS.Call(4, 315, 2, true, a0, a1, a2); //Ret: Tweener
        },
        DOBlendableColor$$Material$$Color$$Single: function(a0/*Material*/, a1/*Color*/, a2/*Single*/) { 
            return CS.Call(4, 315, 3, true, a0, a1, a2); //Ret: Tweener
        },
        DOBlendableLocalMoveBy: function(a0/*Transform*/, a1/*Vector3*/, a2/*Single*/, a3/*Boolean*/) { 
            return CS.Call(4, 315, 4, true, a0, a1, a2, a3); //Ret: Tweener
        },
        DOBlendableLocalRotateBy: function(a0/*Transform*/, a1/*Vector3*/, a2/*Single*/, a3/*RotateMode*/) { 
            return CS.Call(4, 315, 5, true, a0, a1, a2, a3); //Ret: Tweener
        },
        DOBlendableMoveBy: function(a0/*Transform*/, a1/*Vector3*/, a2/*Single*/, a3/*Boolean*/) { 
            return CS.Call(4, 315, 6, true, a0, a1, a2, a3); //Ret: Tweener
        },
        DOBlendableRotateBy: function(a0/*Transform*/, a1/*Vector3*/, a2/*Single*/, a3/*RotateMode*/) { 
            return CS.Call(4, 315, 7, true, a0, a1, a2, a3); //Ret: Tweener
        },
        DOBlendableScaleBy: function(a0/*Transform*/, a1/*Vector3*/, a2/*Single*/) { 
            return CS.Call(4, 315, 8, true, a0, a1, a2); //Ret: Tweener
        },
        DOColor$$Material$$Color$$String$$Single: function(a0/*Material*/, a1/*Color*/, a2/*String*/, a3/*Single*/) { 
            return CS.Call(4, 315, 9, true, a0, a1, a2, a3); //Ret: Tweener
        },
        DOColor$$LineRenderer$$Color2$$Color2$$Single: function(a0/*LineRenderer*/, a1/*Color2*/, a2/*Color2*/, a3/*Single*/) { 
            return CS.Call(4, 315, 10, true, a0, a1, a2, a3); //Ret: Tweener
        },
        DOColor$$Material$$Color$$Single: function(a0/*Material*/, a1/*Color*/, a2/*Single*/) { 
            return CS.Call(4, 315, 11, true, a0, a1, a2); //Ret: Tweener
        },
        DOColor$$Light$$Color$$Single: function(a0/*Light*/, a1/*Color*/, a2/*Single*/) { 
            return CS.Call(4, 315, 12, true, a0, a1, a2); //Ret: Tweener
        },
        DOColor$$Camera$$Color$$Single: function(a0/*Camera*/, a1/*Color*/, a2/*Single*/) { 
            return CS.Call(4, 315, 13, true, a0, a1, a2); //Ret: Tweener
        },
        DOComplete$$Component$$Boolean: function(a0/*Component*/, a1/*Boolean*/) { 
            return CS.Call(4, 315, 14, true, a0, a1); //Ret: Int32
        },
        DOComplete$$Material$$Boolean: function(a0/*Material*/, a1/*Boolean*/) { 
            return CS.Call(4, 315, 15, true, a0, a1); //Ret: Int32
        },
        DOFade$$Material$$Single$$String$$Single: function(a0/*Material*/, a1/*Single*/, a2/*String*/, a3/*Single*/) { 
            return CS.Call(4, 315, 16, true, a0, a1, a2, a3); //Ret: Tweener
        },
        DOFade$$Material$$Single$$Single: function(a0/*Material*/, a1/*Single*/, a2/*Single*/) { 
            return CS.Call(4, 315, 17, true, a0, a1, a2); //Ret: Tweener
        },
        DOFade$$AudioSource$$Single$$Single: function(a0/*AudioSource*/, a1/*Single*/, a2/*Single*/) { 
            return CS.Call(4, 315, 18, true, a0, a1, a2); //Ret: Tweener
        },
        DOFarClipPlane: function(a0/*Camera*/, a1/*Single*/, a2/*Single*/) { 
            return CS.Call(4, 315, 19, true, a0, a1, a2); //Ret: Tweener
        },
        DOFieldOfView: function(a0/*Camera*/, a1/*Single*/, a2/*Single*/) { 
            return CS.Call(4, 315, 20, true, a0, a1, a2); //Ret: Tweener
        },
        DOFlip$$Component: function(a0/*Component*/) { 
            return CS.Call(4, 315, 21, true, a0); //Ret: Int32
        },
        DOFlip$$Material: function(a0/*Material*/) { 
            return CS.Call(4, 315, 22, true, a0); //Ret: Int32
        },
        DOFloat: function(a0/*Material*/, a1/*Single*/, a2/*String*/, a3/*Single*/) { 
            return CS.Call(4, 315, 23, true, a0, a1, a2, a3); //Ret: Tweener
        },
        DOGoto$$Component$$Single$$Boolean: function(a0/*Component*/, a1/*Single*/, a2/*Boolean*/) { 
            return CS.Call(4, 315, 24, true, a0, a1, a2); //Ret: Int32
        },
        DOGoto$$Material$$Single$$Boolean: function(a0/*Material*/, a1/*Single*/, a2/*Boolean*/) { 
            return CS.Call(4, 315, 25, true, a0, a1, a2); //Ret: Int32
        },
        DOIntensity: function(a0/*Light*/, a1/*Single*/, a2/*Single*/) { 
            return CS.Call(4, 315, 26, true, a0, a1, a2); //Ret: Tweener
        },
        DOJump$$Transform$$Vector3$$Single$$Int32$$Single$$Boolean: function(a0/*Transform*/, a1/*Vector3*/, a2/*Single*/, a3/*Int32*/, a4/*Single*/, a5/*Boolean*/) { 
            return CS.Call(4, 315, 27, true, a0, a1, a2, a3, a4, a5); //Ret: Sequence
        },
        DOJump$$Rigidbody$$Vector3$$Single$$Int32$$Single$$Boolean: function(a0/*Rigidbody*/, a1/*Vector3*/, a2/*Single*/, a3/*Int32*/, a4/*Single*/, a5/*Boolean*/) { 
            return CS.Call(4, 315, 28, true, a0, a1, a2, a3, a4, a5); //Ret: Sequence
        },
        DOKill$$Component$$Boolean: function(a0/*Component*/, a1/*Boolean*/) { 
            return CS.Call(4, 315, 29, true, a0, a1); //Ret: Int32
        },
        DOKill$$Material$$Boolean: function(a0/*Material*/, a1/*Boolean*/) { 
            return CS.Call(4, 315, 30, true, a0, a1); //Ret: Int32
        },
        DOLocalJump: function(a0/*Transform*/, a1/*Vector3*/, a2/*Single*/, a3/*Int32*/, a4/*Single*/, a5/*Boolean*/) { 
            return CS.Call(4, 315, 31, true, a0, a1, a2, a3, a4, a5); //Ret: Sequence
        },
        DOLocalMove: function(a0/*Transform*/, a1/*Vector3*/, a2/*Single*/, a3/*Boolean*/) { 
            return CS.Call(4, 315, 32, true, a0, a1, a2, a3); //Ret: Tweener
        },
        DOLocalMoveX: function(a0/*Transform*/, a1/*Single*/, a2/*Single*/, a3/*Boolean*/) { 
            return CS.Call(4, 315, 33, true, a0, a1, a2, a3); //Ret: Tweener
        },
        DOLocalMoveY: function(a0/*Transform*/, a1/*Single*/, a2/*Single*/, a3/*Boolean*/) { 
            return CS.Call(4, 315, 34, true, a0, a1, a2, a3); //Ret: Tweener
        },
        DOLocalMoveZ: function(a0/*Transform*/, a1/*Single*/, a2/*Single*/, a3/*Boolean*/) { 
            return CS.Call(4, 315, 35, true, a0, a1, a2, a3); //Ret: Tweener
        },
        DOLocalPath: function(a0/*Transform*/, a1/*Vector3[]*/, a2/*Single*/, a3/*PathType*/, a4/*PathMode*/, a5/*Int32*/, a6/*Nullable`1*/) { 
            return CS.Call(4, 315, 36, true, a0, a1, a2, a3, a4, a5, a6); //Ret: TweenerCore`3
        },
        DOLocalRotate: function(a0/*Transform*/, a1/*Vector3*/, a2/*Single*/, a3/*RotateMode*/) { 
            return CS.Call(4, 315, 37, true, a0, a1, a2, a3); //Ret: Tweener
        },
        DOLocalRotateQuaternion: function(a0/*Transform*/, a1/*Quaternion*/, a2/*Single*/) { 
            return CS.Call(4, 315, 38, true, a0, a1, a2); //Ret: Tweener
        },
        DOLookAt$$Transform$$Vector3$$Single$$AxisConstraint$$Nullable$1$Vector3: function(a0/*Transform*/, a1/*Vector3*/, a2/*Single*/, a3/*AxisConstraint*/, a4/*Nullable`1*/) { 
            return CS.Call(4, 315, 39, true, a0, a1, a2, a3, a4); //Ret: Tweener
        },
        DOLookAt$$Rigidbody$$Vector3$$Single$$AxisConstraint$$Nullable$1$Vector3: function(a0/*Rigidbody*/, a1/*Vector3*/, a2/*Single*/, a3/*AxisConstraint*/, a4/*Nullable`1*/) { 
            return CS.Call(4, 315, 40, true, a0, a1, a2, a3, a4); //Ret: Tweener
        },
        DOMove$$Transform$$Vector3$$Single$$Boolean: function(a0/*Transform*/, a1/*Vector3*/, a2/*Single*/, a3/*Boolean*/) { 
            return CS.Call(4, 315, 41, true, a0, a1, a2, a3); //Ret: Tweener
        },
        DOMove$$Rigidbody$$Vector3$$Single$$Boolean: function(a0/*Rigidbody*/, a1/*Vector3*/, a2/*Single*/, a3/*Boolean*/) { 
            return CS.Call(4, 315, 42, true, a0, a1, a2, a3); //Ret: Tweener
        },
        DOMoveX$$Rigidbody$$Single$$Single$$Boolean: function(a0/*Rigidbody*/, a1/*Single*/, a2/*Single*/, a3/*Boolean*/) { 
            return CS.Call(4, 315, 43, true, a0, a1, a2, a3); //Ret: Tweener
        },
        DOMoveX$$Transform$$Single$$Single$$Boolean: function(a0/*Transform*/, a1/*Single*/, a2/*Single*/, a3/*Boolean*/) { 
            return CS.Call(4, 315, 44, true, a0, a1, a2, a3); //Ret: Tweener
        },
        DOMoveY$$Rigidbody$$Single$$Single$$Boolean: function(a0/*Rigidbody*/, a1/*Single*/, a2/*Single*/, a3/*Boolean*/) { 
            return CS.Call(4, 315, 45, true, a0, a1, a2, a3); //Ret: Tweener
        },
        DOMoveY$$Transform$$Single$$Single$$Boolean: function(a0/*Transform*/, a1/*Single*/, a2/*Single*/, a3/*Boolean*/) { 
            return CS.Call(4, 315, 46, true, a0, a1, a2, a3); //Ret: Tweener
        },
        DOMoveZ$$Rigidbody$$Single$$Single$$Boolean: function(a0/*Rigidbody*/, a1/*Single*/, a2/*Single*/, a3/*Boolean*/) { 
            return CS.Call(4, 315, 47, true, a0, a1, a2, a3); //Ret: Tweener
        },
        DOMoveZ$$Transform$$Single$$Single$$Boolean: function(a0/*Transform*/, a1/*Single*/, a2/*Single*/, a3/*Boolean*/) { 
            return CS.Call(4, 315, 48, true, a0, a1, a2, a3); //Ret: Tweener
        },
        DONearClipPlane: function(a0/*Camera*/, a1/*Single*/, a2/*Single*/) { 
            return CS.Call(4, 315, 49, true, a0, a1, a2); //Ret: Tweener
        },
        DOOffset$$Material$$Vector2$$String$$Single: function(a0/*Material*/, a1/*Vector2*/, a2/*String*/, a3/*Single*/) { 
            return CS.Call(4, 315, 50, true, a0, a1, a2, a3); //Ret: Tweener
        },
        DOOffset$$Material$$Vector2$$Single: function(a0/*Material*/, a1/*Vector2*/, a2/*Single*/) { 
            return CS.Call(4, 315, 51, true, a0, a1, a2); //Ret: Tweener
        },
        DOOrthoSize: function(a0/*Camera*/, a1/*Single*/, a2/*Single*/) { 
            return CS.Call(4, 315, 52, true, a0, a1, a2); //Ret: Tweener
        },
        DOPath: function(a0/*Transform*/, a1/*Vector3[]*/, a2/*Single*/, a3/*PathType*/, a4/*PathMode*/, a5/*Int32*/, a6/*Nullable`1*/) { 
            return CS.Call(4, 315, 53, true, a0, a1, a2, a3, a4, a5, a6); //Ret: TweenerCore`3
        },
        DOPause$$Component: function(a0/*Component*/) { 
            return CS.Call(4, 315, 54, true, a0); //Ret: Int32
        },
        DOPause$$Material: function(a0/*Material*/) { 
            return CS.Call(4, 315, 55, true, a0); //Ret: Int32
        },
        DOPitch: function(a0/*AudioSource*/, a1/*Single*/, a2/*Single*/) { 
            return CS.Call(4, 315, 56, true, a0, a1, a2); //Ret: Tweener
        },
        DOPixelRect: function(a0/*Camera*/, a1/*Rect*/, a2/*Single*/) { 
            return CS.Call(4, 315, 57, true, a0, a1, a2); //Ret: Tweener
        },
        DOPlay$$Material: function(a0/*Material*/) { 
            return CS.Call(4, 315, 58, true, a0); //Ret: Int32
        },
        DOPlay$$Component: function(a0/*Component*/) { 
            return CS.Call(4, 315, 59, true, a0); //Ret: Int32
        },
        DOPlayBackwards$$Material: function(a0/*Material*/) { 
            return CS.Call(4, 315, 60, true, a0); //Ret: Int32
        },
        DOPlayBackwards$$Component: function(a0/*Component*/) { 
            return CS.Call(4, 315, 61, true, a0); //Ret: Int32
        },
        DOPlayForward$$Material: function(a0/*Material*/) { 
            return CS.Call(4, 315, 62, true, a0); //Ret: Int32
        },
        DOPlayForward$$Component: function(a0/*Component*/) { 
            return CS.Call(4, 315, 63, true, a0); //Ret: Int32
        },
        DOPunchPosition: function(a0/*Transform*/, a1/*Vector3*/, a2/*Single*/, a3/*Int32*/, a4/*Single*/, a5/*Boolean*/) { 
            return CS.Call(4, 315, 64, true, a0, a1, a2, a3, a4, a5); //Ret: Tweener
        },
        DOPunchRotation: function(a0/*Transform*/, a1/*Vector3*/, a2/*Single*/, a3/*Int32*/, a4/*Single*/) { 
            return CS.Call(4, 315, 65, true, a0, a1, a2, a3, a4); //Ret: Tweener
        },
        DOPunchScale: function(a0/*Transform*/, a1/*Vector3*/, a2/*Single*/, a3/*Int32*/, a4/*Single*/) { 
            return CS.Call(4, 315, 66, true, a0, a1, a2, a3, a4); //Ret: Tweener
        },
        DORect: function(a0/*Camera*/, a1/*Rect*/, a2/*Single*/) { 
            return CS.Call(4, 315, 67, true, a0, a1, a2); //Ret: Tweener
        },
        DOResize: function(a0/*TrailRenderer*/, a1/*Single*/, a2/*Single*/, a3/*Single*/) { 
            return CS.Call(4, 315, 68, true, a0, a1, a2, a3); //Ret: Tweener
        },
        DORestart$$Component$$Boolean: function(a0/*Component*/, a1/*Boolean*/) { 
            return CS.Call(4, 315, 69, true, a0, a1); //Ret: Int32
        },
        DORestart$$Material$$Boolean: function(a0/*Material*/, a1/*Boolean*/) { 
            return CS.Call(4, 315, 70, true, a0, a1); //Ret: Int32
        },
        DORewind$$Component$$Boolean: function(a0/*Component*/, a1/*Boolean*/) { 
            return CS.Call(4, 315, 71, true, a0, a1); //Ret: Int32
        },
        DORewind$$Material$$Boolean: function(a0/*Material*/, a1/*Boolean*/) { 
            return CS.Call(4, 315, 72, true, a0, a1); //Ret: Int32
        },
        DORotate$$Transform$$Vector3$$Single$$RotateMode: function(a0/*Transform*/, a1/*Vector3*/, a2/*Single*/, a3/*RotateMode*/) { 
            return CS.Call(4, 315, 73, true, a0, a1, a2, a3); //Ret: Tweener
        },
        DORotate$$Rigidbody$$Vector3$$Single$$RotateMode: function(a0/*Rigidbody*/, a1/*Vector3*/, a2/*Single*/, a3/*RotateMode*/) { 
            return CS.Call(4, 315, 74, true, a0, a1, a2, a3); //Ret: Tweener
        },
        DORotateQuaternion: function(a0/*Transform*/, a1/*Quaternion*/, a2/*Single*/) { 
            return CS.Call(4, 315, 75, true, a0, a1, a2); //Ret: Tweener
        },
        DOScale$$Transform$$Single$$Single: function(a0/*Transform*/, a1/*Single*/, a2/*Single*/) { 
            return CS.Call(4, 315, 76, true, a0, a1, a2); //Ret: Tweener
        },
        DOScale$$Transform$$Vector3$$Single: function(a0/*Transform*/, a1/*Vector3*/, a2/*Single*/) { 
            return CS.Call(4, 315, 77, true, a0, a1, a2); //Ret: Tweener
        },
        DOScaleX: function(a0/*Transform*/, a1/*Single*/, a2/*Single*/) { 
            return CS.Call(4, 315, 78, true, a0, a1, a2); //Ret: Tweener
        },
        DOScaleY: function(a0/*Transform*/, a1/*Single*/, a2/*Single*/) { 
            return CS.Call(4, 315, 79, true, a0, a1, a2); //Ret: Tweener
        },
        DOScaleZ: function(a0/*Transform*/, a1/*Single*/, a2/*Single*/) { 
            return CS.Call(4, 315, 80, true, a0, a1, a2); //Ret: Tweener
        },
        DOShadowStrength: function(a0/*Light*/, a1/*Single*/, a2/*Single*/) { 
            return CS.Call(4, 315, 81, true, a0, a1, a2); //Ret: Tweener
        },
        DOShakePosition$$Camera$$Single$$Vector3$$Int32$$Single$$Boolean: function(a0/*Camera*/, a1/*Single*/, a2/*Vector3*/, a3/*Int32*/, a4/*Single*/, a5/*Boolean*/) { 
            return CS.Call(4, 315, 82, true, a0, a1, a2, a3, a4, a5); //Ret: Tweener
        },
        DOShakePosition$$Transform$$Single$$Vector3$$Int32$$Single$$Boolean$$Boolean: function(a0/*Transform*/, a1/*Single*/, a2/*Vector3*/, a3/*Int32*/, a4/*Single*/, a5/*Boolean*/, a6/*Boolean*/) { 
            return CS.Call(4, 315, 83, true, a0, a1, a2, a3, a4, a5, a6); //Ret: Tweener
        },
        DOShakePosition$$Camera$$Single$$Single$$Int32$$Single$$Boolean: function(a0/*Camera*/, a1/*Single*/, a2/*Single*/, a3/*Int32*/, a4/*Single*/, a5/*Boolean*/) { 
            return CS.Call(4, 315, 84, true, a0, a1, a2, a3, a4, a5); //Ret: Tweener
        },
        DOShakePosition$$Transform$$Single$$Single$$Int32$$Single$$Boolean$$Boolean: function(a0/*Transform*/, a1/*Single*/, a2/*Single*/, a3/*Int32*/, a4/*Single*/, a5/*Boolean*/, a6/*Boolean*/) { 
            return CS.Call(4, 315, 85, true, a0, a1, a2, a3, a4, a5, a6); //Ret: Tweener
        },
        DOShakeRotation$$Camera$$Single$$Vector3$$Int32$$Single$$Boolean: function(a0/*Camera*/, a1/*Single*/, a2/*Vector3*/, a3/*Int32*/, a4/*Single*/, a5/*Boolean*/) { 
            return CS.Call(4, 315, 86, true, a0, a1, a2, a3, a4, a5); //Ret: Tweener
        },
        DOShakeRotation$$Transform$$Single$$Vector3$$Int32$$Single$$Boolean: function(a0/*Transform*/, a1/*Single*/, a2/*Vector3*/, a3/*Int32*/, a4/*Single*/, a5/*Boolean*/) { 
            return CS.Call(4, 315, 87, true, a0, a1, a2, a3, a4, a5); //Ret: Tweener
        },
        DOShakeRotation$$Transform$$Single$$Single$$Int32$$Single$$Boolean: function(a0/*Transform*/, a1/*Single*/, a2/*Single*/, a3/*Int32*/, a4/*Single*/, a5/*Boolean*/) { 
            return CS.Call(4, 315, 88, true, a0, a1, a2, a3, a4, a5); //Ret: Tweener
        },
        DOShakeRotation$$Camera$$Single$$Single$$Int32$$Single$$Boolean: function(a0/*Camera*/, a1/*Single*/, a2/*Single*/, a3/*Int32*/, a4/*Single*/, a5/*Boolean*/) { 
            return CS.Call(4, 315, 89, true, a0, a1, a2, a3, a4, a5); //Ret: Tweener
        },
        DOShakeScale$$Transform$$Single$$Vector3$$Int32$$Single$$Boolean: function(a0/*Transform*/, a1/*Single*/, a2/*Vector3*/, a3/*Int32*/, a4/*Single*/, a5/*Boolean*/) { 
            return CS.Call(4, 315, 90, true, a0, a1, a2, a3, a4, a5); //Ret: Tweener
        },
        DOShakeScale$$Transform$$Single$$Single$$Int32$$Single$$Boolean: function(a0/*Transform*/, a1/*Single*/, a2/*Single*/, a3/*Int32*/, a4/*Single*/, a5/*Boolean*/) { 
            return CS.Call(4, 315, 91, true, a0, a1, a2, a3, a4, a5); //Ret: Tweener
        },
        DOSmoothRewind$$Material: function(a0/*Material*/) { 
            return CS.Call(4, 315, 92, true, a0); //Ret: Int32
        },
        DOSmoothRewind$$Component: function(a0/*Component*/) { 
            return CS.Call(4, 315, 93, true, a0); //Ret: Int32
        },
        DOTiling$$Material$$Vector2$$String$$Single: function(a0/*Material*/, a1/*Vector2*/, a2/*String*/, a3/*Single*/) { 
            return CS.Call(4, 315, 94, true, a0, a1, a2, a3); //Ret: Tweener
        },
        DOTiling$$Material$$Vector2$$Single: function(a0/*Material*/, a1/*Vector2*/, a2/*Single*/) { 
            return CS.Call(4, 315, 95, true, a0, a1, a2); //Ret: Tweener
        },
        DOTime: function(a0/*TrailRenderer*/, a1/*Single*/, a2/*Single*/) { 
            return CS.Call(4, 315, 96, true, a0, a1, a2); //Ret: Tweener
        },
        DOTogglePause$$Material: function(a0/*Material*/) { 
            return CS.Call(4, 315, 97, true, a0); //Ret: Int32
        },
        DOTogglePause$$Component: function(a0/*Component*/) { 
            return CS.Call(4, 315, 98, true, a0); //Ret: Int32
        },
        DOVector: function(a0/*Material*/, a1/*Vector4*/, a2/*String*/, a3/*Single*/) { 
            return CS.Call(4, 315, 99, true, a0, a1, a2, a3); //Ret: Tweener
        },
    },
};
jsb_ReplaceOrPushJsType(DG$Tweening$ShortcutExtensions);

// DG.Tweening.TweenParams
var DG$Tweening$TweenParams = 
{
    assemblyName: "DOTween, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "DG.Tweening.TweenParams",
    Kind: "Class",
    baseTypeName: "System.Object",
    staticFields: {
        Params: {
            get: function() { return CS.Call(0, 316, 0, true); }, 
            set: function(v) { return CS.Call(1, 316, 0, true, v); }
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 316, 0, true, this); },
        Clear: function() { 
            return CS.Call(4, 316, 0, false, this); //Ret: TweenParams
        },
        OnComplete: function(a0/*TweenCallback*/) { 
            return CS.Call(4, 316, 1, false, this, a0); //Ret: TweenParams
        },
        OnKill: function(a0/*TweenCallback*/) { 
            return CS.Call(4, 316, 2, false, this, a0); //Ret: TweenParams
        },
        OnPlay: function(a0/*TweenCallback*/) { 
            return CS.Call(4, 316, 3, false, this, a0); //Ret: TweenParams
        },
        OnRewind: function(a0/*TweenCallback*/) { 
            return CS.Call(4, 316, 4, false, this, a0); //Ret: TweenParams
        },
        OnStart: function(a0/*TweenCallback*/) { 
            return CS.Call(4, 316, 5, false, this, a0); //Ret: TweenParams
        },
        OnStepComplete: function(a0/*TweenCallback*/) { 
            return CS.Call(4, 316, 6, false, this, a0); //Ret: TweenParams
        },
        OnUpdate: function(a0/*TweenCallback*/) { 
            return CS.Call(4, 316, 7, false, this, a0); //Ret: TweenParams
        },
        OnWaypointChange: function(a0/*TweenCallback`1*/) { 
            return CS.Call(4, 316, 8, false, this, a0); //Ret: TweenParams
        },
        SetAutoKill: function(a0/*Boolean*/) { 
            return CS.Call(4, 316, 9, false, this, a0); //Ret: TweenParams
        },
        SetDelay: function(a0/*Single*/) { 
            return CS.Call(4, 316, 10, false, this, a0); //Ret: TweenParams
        },
        SetEase$$Ease$$Nullable$1$Single$$Nullable$1$Single: function(a0/*Ease*/, a1/*Nullable`1*/, a2/*Nullable`1*/) { 
            return CS.Call(4, 316, 11, false, this, a0, a1, a2); //Ret: TweenParams
        },
        SetEase$$AnimationCurve: function(a0/*AnimationCurve*/) { 
            return CS.Call(4, 316, 12, false, this, a0); //Ret: TweenParams
        },
        SetEase$$EaseFunction: function(a0/*EaseFunction*/) { 
            return CS.Call(4, 316, 13, false, this, a0); //Ret: TweenParams
        },
        SetId: function(a0/*Object*/) { 
            return CS.Call(4, 316, 14, false, this, a0); //Ret: TweenParams
        },
        SetLoops: function(a0/*Int32*/, a1/*Nullable`1*/) { 
            return CS.Call(4, 316, 15, false, this, a0, a1); //Ret: TweenParams
        },
        SetRecyclable: function(a0/*Boolean*/) { 
            return CS.Call(4, 316, 16, false, this, a0); //Ret: TweenParams
        },
        SetRelative: function(a0/*Boolean*/) { 
            return CS.Call(4, 316, 17, false, this, a0); //Ret: TweenParams
        },
        SetSpeedBased: function(a0/*Boolean*/) { 
            return CS.Call(4, 316, 18, false, this, a0); //Ret: TweenParams
        },
        SetTarget: function(a0/*Object*/) { 
            return CS.Call(4, 316, 19, false, this, a0); //Ret: TweenParams
        },
        SetUpdate$$Boolean: function(a0/*Boolean*/) { 
            return CS.Call(4, 316, 20, false, this, a0); //Ret: TweenParams
        },
        SetUpdate$$UpdateType$$Boolean: function(a0/*UpdateType*/, a1/*Boolean*/) { 
            return CS.Call(4, 316, 21, false, this, a0, a1); //Ret: TweenParams
        },
    },
};
jsb_ReplaceOrPushJsType(DG$Tweening$TweenParams);

// DG.Tweening.TweenSettingsExtensions
var DG$Tweening$TweenSettingsExtensions = 
{
    assemblyName: "DOTween, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "DG.Tweening.TweenSettingsExtensions",
    Kind: "Class",
    baseTypeName: "System.Object",
    staticDefinition: {
        Append: function(a0/*Sequence*/, a1/*Tween*/) { 
            return CS.Call(4, 317, 0, true, a0, a1); //Ret: Sequence
        },
        AppendCallback: function(a0/*Sequence*/, a1/*TweenCallback*/) { 
            return CS.Call(4, 317, 1, true, a0, a1); //Ret: Sequence
        },
        AppendInterval: function(a0/*Sequence*/, a1/*Single*/) { 
            return CS.Call(4, 317, 2, true, a0, a1); //Ret: Sequence
        },
        From$1$$T$$Boolean: function(t0, a0/*T*/, a1/*Boolean*/) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 317, 3, true, native_t0, a0, a1); //Ret: T
        },
        From$1$$T: function(t0, a0/*T*/) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 317, 4, true, native_t0, a0); //Ret: T
        },
        Insert: function(a0/*Sequence*/, a1/*Single*/, a2/*Tween*/) { 
            return CS.Call(4, 317, 5, true, a0, a1, a2); //Ret: Sequence
        },
        InsertCallback: function(a0/*Sequence*/, a1/*Single*/, a2/*TweenCallback*/) { 
            return CS.Call(4, 317, 6, true, a0, a1, a2); //Ret: Sequence
        },
        Join: function(a0/*Sequence*/, a1/*Tween*/) { 
            return CS.Call(4, 317, 7, true, a0, a1); //Ret: Sequence
        },
        OnComplete$1: function(t0, a0/*T*/, a1/*TweenCallback*/) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 317, 8, true, native_t0, a0, a1); //Ret: T
        },
        OnKill$1: function(t0, a0/*T*/, a1/*TweenCallback*/) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 317, 9, true, native_t0, a0, a1); //Ret: T
        },
        OnPause$1: function(t0, a0/*T*/, a1/*TweenCallback*/) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 317, 10, true, native_t0, a0, a1); //Ret: T
        },
        OnPlay$1: function(t0, a0/*T*/, a1/*TweenCallback*/) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 317, 11, true, native_t0, a0, a1); //Ret: T
        },
        OnRewind$1: function(t0, a0/*T*/, a1/*TweenCallback*/) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 317, 12, true, native_t0, a0, a1); //Ret: T
        },
        OnStart$1: function(t0, a0/*T*/, a1/*TweenCallback*/) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 317, 13, true, native_t0, a0, a1); //Ret: T
        },
        OnStepComplete$1: function(t0, a0/*T*/, a1/*TweenCallback*/) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 317, 14, true, native_t0, a0, a1); //Ret: T
        },
        OnUpdate$1: function(t0, a0/*T*/, a1/*TweenCallback*/) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 317, 15, true, native_t0, a0, a1); //Ret: T
        },
        OnWaypointChange$1: function(t0, a0/*T*/, a1/*TweenCallback`1*/) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 317, 16, true, native_t0, a0, a1); //Ret: T
        },
        Prepend: function(a0/*Sequence*/, a1/*Tween*/) { 
            return CS.Call(4, 317, 17, true, a0, a1); //Ret: Sequence
        },
        PrependCallback: function(a0/*Sequence*/, a1/*TweenCallback*/) { 
            return CS.Call(4, 317, 18, true, a0, a1); //Ret: Sequence
        },
        PrependInterval: function(a0/*Sequence*/, a1/*Single*/) { 
            return CS.Call(4, 317, 19, true, a0, a1); //Ret: Sequence
        },
        SetAs$1$$T$$Tween: function(t0, a0/*T*/, a1/*Tween*/) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 317, 20, true, native_t0, a0, a1); //Ret: T
        },
        SetAs$1$$T$$TweenParams: function(t0, a0/*T*/, a1/*TweenParams*/) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 317, 21, true, native_t0, a0, a1); //Ret: T
        },
        SetAutoKill$1$$T$$Boolean: function(t0, a0/*T*/, a1/*Boolean*/) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 317, 22, true, native_t0, a0, a1); //Ret: T
        },
        SetAutoKill$1$$T: function(t0, a0/*T*/) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 317, 23, true, native_t0, a0); //Ret: T
        },
        SetDelay$1: function(t0, a0/*T*/, a1/*Single*/) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 317, 24, true, native_t0, a0, a1); //Ret: T
        },
        SetEase$1$$T$$Ease$$Single$$Single: function(t0, a0/*T*/, a1/*Ease*/, a2/*Single*/, a3/*Single*/) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 317, 25, true, native_t0, a0, a1, a2, a3); //Ret: T
        },
        SetEase$1$$T$$Ease$$Single: function(t0, a0/*T*/, a1/*Ease*/, a2/*Single*/) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 317, 26, true, native_t0, a0, a1, a2); //Ret: T
        },
        SetEase$1$$T$$Ease: function(t0, a0/*T*/, a1/*Ease*/) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 317, 27, true, native_t0, a0, a1); //Ret: T
        },
        SetEase$1$$T$$EaseFunction: function(t0, a0/*T*/, a1/*EaseFunction*/) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 317, 28, true, native_t0, a0, a1); //Ret: T
        },
        SetEase$1$$T$$AnimationCurve: function(t0, a0/*T*/, a1/*AnimationCurve*/) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 317, 29, true, native_t0, a0, a1); //Ret: T
        },
        SetId$1: function(t0, a0/*T*/, a1/*Object*/) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 317, 30, true, native_t0, a0, a1); //Ret: T
        },
        SetLookAt$$TweenerCore$3$Vector3$Path$PathOptions$$Transform$$Nullable$1$Vector3$$Nullable$1$Vector3: function(a0/*TweenerCore`3*/, a1/*Transform*/, a2/*Nullable`1*/, a3/*Nullable`1*/) { 
            return CS.Call(4, 317, 31, true, a0, a1, a2, a3); //Ret: TweenerCore`3
        },
        SetLookAt$$TweenerCore$3$Vector3$Path$PathOptions$$Vector3$$Nullable$1$Vector3$$Nullable$1$Vector3: function(a0/*TweenerCore`3*/, a1/*Vector3*/, a2/*Nullable`1*/, a3/*Nullable`1*/) { 
            return CS.Call(4, 317, 32, true, a0, a1, a2, a3); //Ret: TweenerCore`3
        },
        SetLookAt$$TweenerCore$3$Vector3$Path$PathOptions$$Single$$Nullable$1$Vector3$$Nullable$1$Vector3: function(a0/*TweenerCore`3*/, a1/*Single*/, a2/*Nullable`1*/, a3/*Nullable`1*/) { 
            return CS.Call(4, 317, 33, true, a0, a1, a2, a3); //Ret: TweenerCore`3
        },
        SetLoops$1$$T$$Int32$$LoopType: function(t0, a0/*T*/, a1/*Int32*/, a2/*LoopType*/) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 317, 34, true, native_t0, a0, a1, a2); //Ret: T
        },
        SetLoops$1$$T$$Int32: function(t0, a0/*T*/, a1/*Int32*/) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 317, 35, true, native_t0, a0, a1); //Ret: T
        },
        SetOptions$$TweenerCore$3$Color$Color$ColorOptions$$Boolean: function(a0/*TweenerCore`3*/, a1/*Boolean*/) { 
            return CS.Call(4, 317, 36, true, a0, a1); //Ret: Tweener
        },
        SetOptions$$TweenerCore$3$Rect$Rect$RectOptions$$Boolean: function(a0/*TweenerCore`3*/, a1/*Boolean*/) { 
            return CS.Call(4, 317, 37, true, a0, a1); //Ret: Tweener
        },
        SetOptions$$TweenerCore$3$Vector4$Vector4$VectorOptions$$AxisConstraint$$Boolean: function(a0/*TweenerCore`3*/, a1/*AxisConstraint*/, a2/*Boolean*/) { 
            return CS.Call(4, 317, 38, true, a0, a1, a2); //Ret: Tweener
        },
        SetOptions$$TweenerCore$3$Vector3$Vector3$VectorOptions$$AxisConstraint$$Boolean: function(a0/*TweenerCore`3*/, a1/*AxisConstraint*/, a2/*Boolean*/) { 
            return CS.Call(4, 317, 39, true, a0, a1, a2); //Ret: Tweener
        },
        SetOptions$$TweenerCore$3$Vector4$Vector4$VectorOptions$$Boolean: function(a0/*TweenerCore`3*/, a1/*Boolean*/) { 
            return CS.Call(4, 317, 40, true, a0, a1); //Ret: Tweener
        },
        SetOptions$$TweenerCore$3$Vector3$Path$PathOptions$$AxisConstraint$$AxisConstraint: function(a0/*TweenerCore`3*/, a1/*AxisConstraint*/, a2/*AxisConstraint*/) { 
            return CS.Call(4, 317, 41, true, a0, a1, a2); //Ret: TweenerCore`3
        },
        SetOptions$$TweenerCore$3$Vector3$Path$PathOptions$$Boolean$$AxisConstraint$$AxisConstraint: function(a0/*TweenerCore`3*/, a1/*Boolean*/, a2/*AxisConstraint*/, a3/*AxisConstraint*/) { 
            return CS.Call(4, 317, 42, true, a0, a1, a2, a3); //Ret: TweenerCore`3
        },
        SetOptions$$TweenerCore$3$Vector3$Vector3$Array$Vector3ArrayOptions$$AxisConstraint$$Boolean: function(a0/*TweenerCore`3*/, a1/*AxisConstraint*/, a2/*Boolean*/) { 
            return CS.Call(4, 317, 43, true, a0, a1, a2); //Ret: Tweener
        },
        SetOptions$$TweenerCore$3$String$String$StringOptions$$Boolean$$ScrambleMode$$String: function(a0/*TweenerCore`3*/, a1/*Boolean*/, a2/*ScrambleMode*/, a3/*String*/) { 
            return CS.Call(4, 317, 44, true, a0, a1, a2, a3); //Ret: Tweener
        },
        SetOptions$$TweenerCore$3$Vector3$Vector3$Array$Vector3ArrayOptions$$Boolean: function(a0/*TweenerCore`3*/, a1/*Boolean*/) { 
            return CS.Call(4, 317, 45, true, a0, a1); //Ret: Tweener
        },
        SetOptions$$TweenerCore$3$Vector3$Vector3$VectorOptions$$Boolean: function(a0/*TweenerCore`3*/, a1/*Boolean*/) { 
            return CS.Call(4, 317, 46, true, a0, a1); //Ret: Tweener
        },
        SetOptions$$TweenerCore$3$Single$Single$FloatOptions$$Boolean: function(a0/*TweenerCore`3*/, a1/*Boolean*/) { 
            return CS.Call(4, 317, 47, true, a0, a1); //Ret: Tweener
        },
        SetOptions$$TweenerCore$3$Vector2$Vector2$VectorOptions$$Boolean: function(a0/*TweenerCore`3*/, a1/*Boolean*/) { 
            return CS.Call(4, 317, 48, true, a0, a1); //Ret: Tweener
        },
        SetOptions$$TweenerCore$3$Vector2$Vector2$VectorOptions$$AxisConstraint$$Boolean: function(a0/*TweenerCore`3*/, a1/*AxisConstraint*/, a2/*Boolean*/) { 
            return CS.Call(4, 317, 49, true, a0, a1, a2); //Ret: Tweener
        },
        SetOptions$$TweenerCore$3$Quaternion$Vector3$QuaternionOptions$$Boolean: function(a0/*TweenerCore`3*/, a1/*Boolean*/) { 
            return CS.Call(4, 317, 50, true, a0, a1); //Ret: Tweener
        },
        SetRecyclable$1$$T$$Boolean: function(t0, a0/*T*/, a1/*Boolean*/) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 317, 51, true, native_t0, a0, a1); //Ret: T
        },
        SetRecyclable$1$$T: function(t0, a0/*T*/) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 317, 52, true, native_t0, a0); //Ret: T
        },
        SetRelative$1$$T$$Boolean: function(t0, a0/*T*/, a1/*Boolean*/) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 317, 53, true, native_t0, a0, a1); //Ret: T
        },
        SetRelative$1$$T: function(t0, a0/*T*/) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 317, 54, true, native_t0, a0); //Ret: T
        },
        SetSpeedBased$1$$T$$Boolean: function(t0, a0/*T*/, a1/*Boolean*/) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 317, 55, true, native_t0, a0, a1); //Ret: T
        },
        SetSpeedBased$1$$T: function(t0, a0/*T*/) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 317, 56, true, native_t0, a0); //Ret: T
        },
        SetTarget$1: function(t0, a0/*T*/, a1/*Object*/) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 317, 57, true, native_t0, a0, a1); //Ret: T
        },
        SetUpdate$1$$T$$UpdateType$$Boolean: function(t0, a0/*T*/, a1/*UpdateType*/, a2/*Boolean*/) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 317, 58, true, native_t0, a0, a1, a2); //Ret: T
        },
        SetUpdate$1$$T$$Boolean: function(t0, a0/*T*/, a1/*Boolean*/) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 317, 59, true, native_t0, a0, a1); //Ret: T
        },
        SetUpdate$1$$T$$UpdateType: function(t0, a0/*T*/, a1/*UpdateType*/) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 317, 60, true, native_t0, a0, a1); //Ret: T
        },
    },
};
jsb_ReplaceOrPushJsType(DG$Tweening$TweenSettingsExtensions);

// DG.Tweening.Tween
var DG$Tweening$Tween = 
{
    assemblyName: "DOTween, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "DG.Tweening.Tween",
    Kind: "Class",
    baseTypeName: "DG.Tweening.Core.ABSSequentiable",
    fields: {
        timeScale: {
            get: function() { return CS.Call(0, 318, 0, false, this); }, 
            set: function(v) { return CS.Call(1, 318, 0, false, this, v); }
        },
        isBackwards: {
            get: function() { return CS.Call(0, 318, 1, false, this); }, 
            set: function(v) { return CS.Call(1, 318, 1, false, this, v); }
        },
        id: {
            get: function() { return CS.Call(0, 318, 2, false, this); }, 
            set: function(v) { return CS.Call(1, 318, 2, false, this, v); }
        },
        target: {
            get: function() { return CS.Call(0, 318, 3, false, this); }, 
            set: function(v) { return CS.Call(1, 318, 3, false, this, v); }
        },
        easeOvershootOrAmplitude: {
            get: function() { return CS.Call(0, 318, 4, false, this); }, 
            set: function(v) { return CS.Call(1, 318, 4, false, this, v); }
        },
        easePeriod: {
            get: function() { return CS.Call(0, 318, 5, false, this); }, 
            set: function(v) { return CS.Call(1, 318, 5, false, this, v); }
        },
    },
    definition: {
        get_fullPosition: function() { return CS.Call(2, 318, 0, false, this); },
        set_fullPosition: function(v) { return CS.Call(3, 318, 0, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(DG$Tweening$Tween);

// DG.Tweening.Tweener
var DG$Tweening$Tweener = 
{
    assemblyName: "DOTween, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "DG.Tweening.Tweener",
    Kind: "Class",
    baseTypeName: "DG.Tweening.Tween",
    definition: {
        ChangeEndValue$$Object$$Boolean: function(a0/*Object*/, a1/*Boolean*/) { 
            return CS.Call(4, 319, 0, false, this, a0, a1); //Ret: Tweener
        },
        ChangeEndValue$$Object$$Single$$Boolean: function(a0/*Object*/, a1/*Single*/, a2/*Boolean*/) { 
            return CS.Call(4, 319, 1, false, this, a0, a1, a2); //Ret: Tweener
        },
        ChangeStartValue: function(a0/*Object*/, a1/*Single*/) { 
            return CS.Call(4, 319, 2, false, this, a0, a1); //Ret: Tweener
        },
        ChangeValues: function(a0/*Object*/, a1/*Object*/, a2/*Single*/) { 
            return CS.Call(4, 319, 3, false, this, a0, a1, a2); //Ret: Tweener
        },
    },
};
jsb_ReplaceOrPushJsType(DG$Tweening$Tweener);

// DG.Tweening.Core.ABSSequentiable
var DG$Tweening$Core$ABSSequentiable = 
{
    assemblyName: "DOTween, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "DG.Tweening.Core.ABSSequentiable",
    Kind: "Class",
    baseTypeName: "System.Object",
};
jsb_ReplaceOrPushJsType(DG$Tweening$Core$ABSSequentiable);

// DG.Tweening.Core.Debugger
var DG$Tweening$Core$Debugger = 
{
    assemblyName: "DOTween, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "DG.Tweening.Core.Debugger",
    Kind: "Class",
    baseTypeName: "System.Object",
    staticFields: {
        logPriority: {
            get: function() { return CS.Call(0, 321, 0, true); }, 
            set: function(v) { return CS.Call(1, 321, 0, true, v); }
        },
    },
    staticDefinition: {
        Log: function(a0/*Object*/) { 
            return CS.Call(4, 321, 0, true, a0); //Ret: Void
        },
        LogError: function(a0/*Object*/) { 
            return CS.Call(4, 321, 1, true, a0); //Ret: Void
        },
        LogInvalidTween: function(a0/*Tween*/) { 
            return CS.Call(4, 321, 2, true, a0); //Ret: Void
        },
        LogMissingMaterialProperty: function(a0/*String*/) { 
            return CS.Call(4, 321, 3, true, a0); //Ret: Void
        },
        LogNestedTween: function(a0/*Tween*/) { 
            return CS.Call(4, 321, 4, true, a0); //Ret: Void
        },
        LogNonPathTween: function(a0/*Tween*/) { 
            return CS.Call(4, 321, 5, true, a0); //Ret: Void
        },
        LogNullTween: function(a0/*Tween*/) { 
            return CS.Call(4, 321, 6, true, a0); //Ret: Void
        },
        LogRemoveActiveTweenError: function(a0/*String*/) { 
            return CS.Call(4, 321, 7, true, a0); //Ret: Void
        },
        LogReport: function(a0/*Object*/) { 
            return CS.Call(4, 321, 8, true, a0); //Ret: Void
        },
        LogWarning: function(a0/*Object*/) { 
            return CS.Call(4, 321, 9, true, a0); //Ret: Void
        },
        SetLogPriority: function(a0/*LogBehaviour*/) { 
            return CS.Call(4, 321, 10, true, a0); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(DG$Tweening$Core$Debugger);

// DG.Tweening.Core.DOTweenComponent
var DG$Tweening$Core$DOTweenComponent = 
{
    assemblyName: "DOTween, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "DG.Tweening.Core.DOTweenComponent",
    Kind: "Class",
    baseTypeName: "UnityEngine.MonoBehaviour",
    interfaceNames: ["DG.Tweening.IDOTweenInit"],
    fields: {
        inspectorUpdater: {
            get: function() { return CS.Call(0, 322, 0, false, this); }, 
            set: function(v) { return CS.Call(1, 322, 0, false, this, v); }
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 322, 0, true, this); },
        SetCapacity: function(a0/*Int32*/, a1/*Int32*/) { 
            return CS.Call(4, 322, 0, false, this, a0, a1); //Ret: IDOTweenInit
        },
    },
};
jsb_ReplaceOrPushJsType(DG$Tweening$Core$DOTweenComponent);

// DG.Tweening.Core.DOTweenSettings
var DG$Tweening$Core$DOTweenSettings = 
{
    assemblyName: "DOTween, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "DG.Tweening.Core.DOTweenSettings",
    Kind: "Class",
    baseTypeName: "UnityEngine.ScriptableObject",
    staticFields: {
        AssetName: {
            get: function() { return CS.Call(0, 323, 0, true); }, 
            set: function(v) { return CS.Call(1, 323, 0, true, v); }
        },
    },
    fields: {
        useSafeMode: {
            get: function() { return CS.Call(0, 323, 1, false, this); }, 
            set: function(v) { return CS.Call(1, 323, 1, false, this, v); }
        },
        timeScale: {
            get: function() { return CS.Call(0, 323, 2, false, this); }, 
            set: function(v) { return CS.Call(1, 323, 2, false, this, v); }
        },
        useSmoothDeltaTime: {
            get: function() { return CS.Call(0, 323, 3, false, this); }, 
            set: function(v) { return CS.Call(1, 323, 3, false, this, v); }
        },
        showUnityEditorReport: {
            get: function() { return CS.Call(0, 323, 4, false, this); }, 
            set: function(v) { return CS.Call(1, 323, 4, false, this, v); }
        },
        logBehaviour: {
            get: function() { return CS.Call(0, 323, 5, false, this); }, 
            set: function(v) { return CS.Call(1, 323, 5, false, this, v); }
        },
        drawGizmos: {
            get: function() { return CS.Call(0, 323, 6, false, this); }, 
            set: function(v) { return CS.Call(1, 323, 6, false, this, v); }
        },
        defaultRecyclable: {
            get: function() { return CS.Call(0, 323, 7, false, this); }, 
            set: function(v) { return CS.Call(1, 323, 7, false, this, v); }
        },
        defaultAutoPlay: {
            get: function() { return CS.Call(0, 323, 8, false, this); }, 
            set: function(v) { return CS.Call(1, 323, 8, false, this, v); }
        },
        defaultUpdateType: {
            get: function() { return CS.Call(0, 323, 9, false, this); }, 
            set: function(v) { return CS.Call(1, 323, 9, false, this, v); }
        },
        defaultTimeScaleIndependent: {
            get: function() { return CS.Call(0, 323, 10, false, this); }, 
            set: function(v) { return CS.Call(1, 323, 10, false, this, v); }
        },
        defaultEaseType: {
            get: function() { return CS.Call(0, 323, 11, false, this); }, 
            set: function(v) { return CS.Call(1, 323, 11, false, this, v); }
        },
        defaultEaseOvershootOrAmplitude: {
            get: function() { return CS.Call(0, 323, 12, false, this); }, 
            set: function(v) { return CS.Call(1, 323, 12, false, this, v); }
        },
        defaultEasePeriod: {
            get: function() { return CS.Call(0, 323, 13, false, this); }, 
            set: function(v) { return CS.Call(1, 323, 13, false, this, v); }
        },
        defaultAutoKill: {
            get: function() { return CS.Call(0, 323, 14, false, this); }, 
            set: function(v) { return CS.Call(1, 323, 14, false, this, v); }
        },
        defaultLoopType: {
            get: function() { return CS.Call(0, 323, 15, false, this); }, 
            set: function(v) { return CS.Call(1, 323, 15, false, this, v); }
        },
        storeSettingsLocation: {
            get: function() { return CS.Call(0, 323, 16, false, this); }, 
            set: function(v) { return CS.Call(1, 323, 16, false, this, v); }
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 323, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(DG$Tweening$Core$DOTweenSettings);

// DG.Tweening.Core.Extensions
var DG$Tweening$Core$Extensions = 
{
    assemblyName: "DOTween, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "DG.Tweening.Core.Extensions",
    Kind: "Class",
    baseTypeName: "System.Object",
};
jsb_ReplaceOrPushJsType(DG$Tweening$Core$Extensions);

// DG.Tweening.Core.TweenerCore`3
var DG$Tweening$Core$TweenerCore$3 = 
{
    assemblyName: "DOTween, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "DG.Tweening.Core.TweenerCore$3",
    Kind: "Class",
    baseTypeName: "DG.Tweening.Tweener",
    definition: {
        ChangeEndValue$$Object$$Boolean: function(a0/*Object*/, a1/*Boolean*/) { 
            return CS.Call(4, 325, 0, false, this, a0, a1); //Ret: Tweener
        },
        ChangeEndValue$$Object$$Single$$Boolean: function(a0/*Object*/, a1/*Single*/, a2/*Boolean*/) { 
            return CS.Call(4, 325, 1, false, this, a0, a1, a2); //Ret: Tweener
        },
        ChangeStartValue: function(a0/*Object*/, a1/*Single*/) { 
            return CS.Call(4, 325, 2, false, this, a0, a1); //Ret: Tweener
        },
        ChangeValues: function(a0/*Object*/, a1/*Object*/, a2/*Single*/) { 
            return CS.Call(4, 325, 3, false, this, a0, a1, a2); //Ret: Tweener
        },
    },
};
jsb_ReplaceOrPushJsType(DG$Tweening$Core$TweenerCore$3);

// TestExtensionMethod
var TestExtensionMethod = 
{
    assemblyName: "Assembly-CSharp-firstpass, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "TestExtensionMethod",
    Kind: "Class",
    baseTypeName: "System.Object",
    staticDefinition: {
        GetOrAddComponent$1: function(T, go) { 
            var t = go.GetComponent$1(T);
            if (t == null){
                t = go.AddComponent$1(T);
            }
            return t; //Ret: T
        },
    },
};
jsb_ReplaceOrPushJsType(TestExtensionMethod);

// APIExportTest
var APIExportTest = 
{
    assemblyName: "Assembly-CSharp-firstpass, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "APIExportTest",
    Kind: "Class",
    baseTypeName: "System.Object",
    staticFields: {
        OnStaticDelegateFinish: {
            get: function() { return CS.Call(0, 327, 2, true); }, 
            set: function(v) { return CS.Call(1, 327, 2, true, v); }
        },
        StaticObject: {
            get: function() { return CS.Call(0, 327, 4, true); }, 
            set: function(v) { return CS.Call(1, 327, 4, true, v); }
        },
    },
    fields: {
        IDs: {
            get: function() { return CS.Call(0, 327, 0, false, this); }, 
            set: function(v) { return CS.Call(1, 327, 0, false, this, v); }
        },
        OnDelegateFinish: {
            get: function() { return CS.Call(0, 327, 1, false, this); }, 
            set: function(v) { return CS.Call(1, 327, 1, false, this, v); }
        },
        toggle: {
            get: function() { return CS.Call(0, 327, 3, false, this); }, 
            set: function(v) { return CS.Call(1, 327, 3, false, this, v); }
        },
    },
    staticDefinition: {
        get_StaticID: function() { return CS.Call(2, 327, 0, true); },
        set_StaticID: function(v) { return CS.Call(3, 327, 0, true, v); },
        add_OnStaticEventFinish: function(a0/*Action*/) { 
            return CS.Call(4, 327, 7, true, a0); //Ret: Void
        },
        remove_OnStaticEventFinish: function(a0/*Action*/) { 
            return CS.Call(4, 327, 8, true, a0); //Ret: Void
        },
        SendStaticEvent: function() { 
            return CS.Call(4, 327, 9, true); //Ret: Void
        },
        test123: function(a0/*Object[]*/) { 
            return CS.Call(4, 327, 10, true, jsb_formatParamsArray(0, a0, arguments)); //Ret: Void
        },
        testRefParams: function(a0/*String&*/, a1/*String&*/) { 
            return CS.Call(4, 327, 11, true, a0, a1); //Ret: Void
        },
        testReturnArray: function() { 
            return CS.Call(4, 327, 12, true); //Ret: RefObject[]
        },
        testReturnDic: function() { 
            return CS.Call(4, 327, 13, true); //Ret: Dictionary`2
        },
        testReturnHashSet: function() { 
            return CS.Call(4, 327, 14, true); //Ret: HashSet`1
        },
        testReturnList: function() { 
            return CS.Call(4, 327, 15, true); //Ret: List`1
        },
        testString: function(a0/*String[]*/) { 
            return CS.Call(4, 327, 16, true, jsb_formatParamsArray(0, a0, arguments)); //Ret: Void
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 327, 0, true, this); },
        ctor$$Int32: function(a0) { CS.Call(5, 327, 1, true, this, a0); },
        ctor$$IEnumerable: function(a0) { CS.Call(5, 327, 2, true, this, a0); },
        get_ID: function() { return CS.Call(2, 327, 1, false, this); },
        set_ID: function(v) { return CS.Call(3, 327, 1, false, this, v); },
        add_OnEventFinish: function(a0/*Action`1*/) { 
            return CS.Call(4, 327, 0, false, this, a0); //Ret: Void
        },
        AddDelegate: function(a0/*Action*/) { 
            return CS.Call(4, 327, 1, false, this, a0); //Ret: Void
        },
        AddEvent: function(a0/*Action`1*/) { 
            return CS.Call(4, 327, 2, false, this, a0); //Ret: Void
        },
        remove_OnEventFinish: function(a0/*Action`1*/) { 
            return CS.Call(4, 327, 3, false, this, a0); //Ret: Void
        },
        RemoveDelegate: function(a0/*Action*/) { 
            return CS.Call(4, 327, 4, false, this, a0); //Ret: Void
        },
        RemoveEvent: function(a0/*Action`1*/) { 
            return CS.Call(4, 327, 5, false, this, a0); //Ret: Void
        },
        SendEvent: function() { 
            return CS.Call(4, 327, 6, false, this); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(APIExportTest);

// APIExportTest+RefObject
var APIExportTest$RefObject = 
{
    assemblyName: "Assembly-CSharp-firstpass, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "APIExportTest.RefObject",
    Kind: "Class",
    baseTypeName: "System.Object",
    fields: {
        Name: {
            get: function() { return CS.Call(0, 328, 0, false, this); }, 
            set: function(v) { return CS.Call(1, 328, 0, false, this, v); }
        },
        x: {
            get: function() { return CS.Call(0, 328, 1, false, this); }, 
            set: function(v) { return CS.Call(1, 328, 1, false, this, v); }
        },
        y: {
            get: function() { return CS.Call(0, 328, 2, false, this); }, 
            set: function(v) { return CS.Call(1, 328, 2, false, this, v); }
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 328, 0, true, this); },
        PrintLog: function() { 
            return CS.Call(4, 328, 0, false, this); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(APIExportTest$RefObject);

// System.Collections.IEnumerator
var System$Collections$IEnumerator = 
{
    assemblyName: "mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089",
    fullname: "System.Collections.IEnumerator",
    Kind: "Interface",
    definition: {
        get_Current: function() { return CS.Call(2, 329, 0, false, this); },
        set_Current: function(v) { return CS.Call(3, 329, 0, false, this, v); },
        MoveNext: function() { 
            return CS.Call(4, 329, 0, false, this); //Ret: Boolean
        },
        Reset: function() { 
            return CS.Call(4, 329, 1, false, this); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(System$Collections$IEnumerator);

// System.Collections.ICollection
var System$Collections$ICollection = 
{
    assemblyName: "mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089",
    fullname: "System.Collections.ICollection",
    Kind: "Interface",
    interfaceNames: ["System.Collections.IEnumerable"],
    definition: {
        get_Count: function() { return CS.Call(2, 330, 0, false, this); },
        set_Count: function(v) { return CS.Call(3, 330, 0, false, this, v); },
        get_IsSynchronized: function() { return CS.Call(2, 330, 1, false, this); },
        set_IsSynchronized: function(v) { return CS.Call(3, 330, 1, false, this, v); },
        get_SyncRoot: function() { return CS.Call(2, 330, 2, false, this); },
        set_SyncRoot: function(v) { return CS.Call(3, 330, 2, false, this, v); },
        CopyTo: function(a0/*Array*/, a1/*Int32*/) { 
            return CS.Call(4, 330, 0, false, this, a0, a1); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(System$Collections$ICollection);

// System.IDisposable
var System$IDisposable = 
{
    assemblyName: "mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089",
    fullname: "System.IDisposable",
    Kind: "Interface",
    definition: {
        Dispose: function() { 
            return CS.Call(4, 331, 0, false, this); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(System$IDisposable);

// System.IConvertible
var System$IConvertible = 
{
    assemblyName: "mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089",
    fullname: "System.IConvertible",
    Kind: "Interface",
    definition: {
        GetTypeCode: function() { 
            return CS.Call(4, 332, 0, false, this); //Ret: TypeCode
        },
        ToBoolean: function(a0/*IFormatProvider*/) { 
            return CS.Call(4, 332, 1, false, this, a0); //Ret: Boolean
        },
        ToByte: function(a0/*IFormatProvider*/) { 
            return CS.Call(4, 332, 2, false, this, a0); //Ret: Byte
        },
        ToChar: function(a0/*IFormatProvider*/) { 
            return CS.Call(4, 332, 3, false, this, a0); //Ret: Char
        },
        ToDateTime: function(a0/*IFormatProvider*/) { 
            return CS.Call(4, 332, 4, false, this, a0); //Ret: DateTime
        },
        ToDecimal: function(a0/*IFormatProvider*/) { 
            return CS.Call(4, 332, 5, false, this, a0); //Ret: Decimal
        },
        ToDouble: function(a0/*IFormatProvider*/) { 
            return CS.Call(4, 332, 6, false, this, a0); //Ret: Double
        },
        ToInt16: function(a0/*IFormatProvider*/) { 
            return CS.Call(4, 332, 7, false, this, a0); //Ret: Int16
        },
        ToInt32: function(a0/*IFormatProvider*/) { 
            return CS.Call(4, 332, 8, false, this, a0); //Ret: Int32
        },
        ToInt64: function(a0/*IFormatProvider*/) { 
            return CS.Call(4, 332, 9, false, this, a0); //Ret: Int64
        },
        ToSByte: function(a0/*IFormatProvider*/) { 
            return CS.Call(4, 332, 10, false, this, a0); //Ret: SByte
        },
        ToSingle: function(a0/*IFormatProvider*/) { 
            return CS.Call(4, 332, 11, false, this, a0); //Ret: Single
        },
        toString: function(a0/*IFormatProvider*/) { 
            return CS.Call(4, 332, 12, false, this, a0); //Ret: String
        },
        ToType: function(a0/*Type*/, a1/*IFormatProvider*/) { 
            return CS.Call(4, 332, 13, false, this, a0.get_FullName(), a1); //Ret: Object
        },
        ToUInt16: function(a0/*IFormatProvider*/) { 
            return CS.Call(4, 332, 14, false, this, a0); //Ret: UInt16
        },
        ToUInt32: function(a0/*IFormatProvider*/) { 
            return CS.Call(4, 332, 15, false, this, a0); //Ret: UInt32
        },
        ToUInt64: function(a0/*IFormatProvider*/) { 
            return CS.Call(4, 332, 16, false, this, a0); //Ret: UInt64
        },
    },
};
jsb_ReplaceOrPushJsType(System$IConvertible);

// System.Collections.IList
var System$Collections$IList = 
{
    assemblyName: "mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089",
    fullname: "System.Collections.IList",
    Kind: "Interface",
    interfaceNames: ["System.Collections.IEnumerable", "System.Collections.ICollection"],
    definition: {
        get_IsFixedSize: function() { return CS.Call(2, 333, 0, false, this); },
        set_IsFixedSize: function(v) { return CS.Call(3, 333, 0, false, this, v); },
        get_IsReadOnly: function() { return CS.Call(2, 333, 1, false, this); },
        set_IsReadOnly: function(v) { return CS.Call(3, 333, 1, false, this, v); },
        get_Item$$Int32: function(ind0) { return CS.Call(2, 333, 2, false, this, ind0); },
        set_Item$$Int32: function(ind0, v) { return CS.Call(3, 333, 2, false, this, ind0, v); },
        Add: function(a0/*Object*/) { 
            return CS.Call(4, 333, 0, false, this, a0); //Ret: Int32
        },
        Clear: function() { 
            return CS.Call(4, 333, 1, false, this); //Ret: Void
        },
        Contains: function(a0/*Object*/) { 
            return CS.Call(4, 333, 2, false, this, a0); //Ret: Boolean
        },
        IndexOf: function(a0/*Object*/) { 
            return CS.Call(4, 333, 3, false, this, a0); //Ret: Int32
        },
        Insert: function(a0/*Int32*/, a1/*Object*/) { 
            return CS.Call(4, 333, 4, false, this, a0, a1); //Ret: Void
        },
        Remove: function(a0/*Object*/) { 
            return CS.Call(4, 333, 5, false, this, a0); //Ret: Void
        },
        RemoveAt: function(a0/*Int32*/) { 
            return CS.Call(4, 333, 6, false, this, a0); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(System$Collections$IList);

// System.Collections.IDictionary
var System$Collections$IDictionary = 
{
    assemblyName: "mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089",
    fullname: "System.Collections.IDictionary",
    Kind: "Interface",
    interfaceNames: ["System.Collections.IEnumerable", "System.Collections.ICollection"],
    definition: {
        get_IsFixedSize: function() { return CS.Call(2, 334, 0, false, this); },
        set_IsFixedSize: function(v) { return CS.Call(3, 334, 0, false, this, v); },
        get_IsReadOnly: function() { return CS.Call(2, 334, 1, false, this); },
        set_IsReadOnly: function(v) { return CS.Call(3, 334, 1, false, this, v); },
        get_Item$$Object: function(ind0) { return CS.Call(2, 334, 2, false, this, ind0); },
        set_Item$$Object: function(ind0, v) { return CS.Call(3, 334, 2, false, this, ind0, v); },
        get_Keys: function() { return CS.Call(2, 334, 3, false, this); },
        set_Keys: function(v) { return CS.Call(3, 334, 3, false, this, v); },
        get_Values: function() { return CS.Call(2, 334, 4, false, this); },
        set_Values: function(v) { return CS.Call(3, 334, 4, false, this, v); },
        Add: function(a0/*Object*/, a1/*Object*/) { 
            return CS.Call(4, 334, 0, false, this, a0, a1); //Ret: Void
        },
        Clear: function() { 
            return CS.Call(4, 334, 1, false, this); //Ret: Void
        },
        Contains: function(a0/*Object*/) { 
            return CS.Call(4, 334, 2, false, this, a0); //Ret: Boolean
        },
        GetEnumerator: function() { 
            return CS.Call(4, 334, 3, false, this); //Ret: IDictionaryEnumerator
        },
        Remove: function(a0/*Object*/) { 
            return CS.Call(4, 334, 4, false, this, a0); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(System$Collections$IDictionary);

// System.Collections.Generic.List`1
var System$Collections$Generic$List$1 = 
{
    assemblyName: "mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089",
    fullname: "CSList",
    Kind: "Class",
    baseTypeName: "System.Object",
    interfaceNames: ["System.Collections.IEnumerable", "System.Collections.ICollection", "System.Collections.IList", "System.Collections.Generic.ICollection$1", "System.Collections.Generic.IEnumerable$1", "System.Collections.Generic.IList$1"],
    definition: {
        ctor: function(t0) { CS.Call(5, 335, 0, true, this, t0.getNativeType()); },
        ctor$$IEnumerable$1: function(t0, a0) { CS.Call(5, 335, 1, true, this, t0.getNativeType(), a0); },
        ctor$$Int32: function(t0, a0) { CS.Call(5, 335, 2, true, this, t0.getNativeType(), a0); },
        get_Capacity: function() { return CS.Call(2, 335, 0, false, this); },
        set_Capacity: function(v) { return CS.Call(3, 335, 0, false, this, v); },
        get_Count: function() { return CS.Call(2, 335, 1, false, this); },
        set_Count: function(v) { return CS.Call(3, 335, 1, false, this, v); },
        get_Item$$Int32: function(ind0) { return CS.Call(2, 335, 2, false, this, ind0); },
        set_Item$$Int32: function(ind0, v) { return CS.Call(3, 335, 2, false, this, ind0, v); },
        Add: function(a0/*T*/) { 
            return CS.Call(4, 335, 0, false, this, a0); //Ret: Void
        },
        AddRange: function(a0/*IEnumerable`1*/) { 
            return CS.Call(4, 335, 1, false, this, a0); //Ret: Void
        },
        AsReadOnly: function() { 
            return CS.Call(4, 335, 2, false, this); //Ret: ReadOnlyCollection`1
        },
        BinarySearch$$Int32$$Int32$$T$$IComparer$1: function(a0/*Int32*/, a1/*Int32*/, a2/*T*/, a3/*IComparer`1*/) { 
            return CS.Call(4, 335, 3, false, this, a0, a1, a2, a3); //Ret: Int32
        },
        BinarySearch$$T$$IComparer$1: function(a0/*T*/, a1/*IComparer`1*/) { 
            return CS.Call(4, 335, 4, false, this, a0, a1); //Ret: Int32
        },
        BinarySearch$$T: function(a0/*T*/) { 
            return CS.Call(4, 335, 5, false, this, a0); //Ret: Int32
        },
        Clear: function() { 
            return CS.Call(4, 335, 6, false, this); //Ret: Void
        },
        Contains: function(a0/*T*/) { 
            return CS.Call(4, 335, 7, false, this, a0); //Ret: Boolean
        },
        ConvertAll$1: function(t0, a0/*Converter`2*/) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 335, 8, false, this, native_t0, a0); //Ret: List`1
        },
        CopyTo$$Int32$$T$Array$$Int32$$Int32: function(a0/*Int32*/, a1/*T[]*/, a2/*Int32*/, a3/*Int32*/) { 
            return CS.Call(4, 335, 9, false, this, a0, a1, a2, a3); //Ret: Void
        },
        CopyTo$$T$Array$$Int32: function(a0/*T[]*/, a1/*Int32*/) { 
            return CS.Call(4, 335, 10, false, this, a0, a1); //Ret: Void
        },
        CopyTo$$T$Array: function(a0/*T[]*/) { 
            return CS.Call(4, 335, 11, false, this, a0); //Ret: Void
        },
        Exists: function(a0/*Predicate`1*/) { 
            return CS.Call(4, 335, 12, false, this, a0); //Ret: Boolean
        },
        Find: function(a0/*Predicate`1*/) { 
            return CS.Call(4, 335, 13, false, this, a0); //Ret: T
        },
        FindAll: function(a0/*Predicate`1*/) { 
            return CS.Call(4, 335, 14, false, this, a0); //Ret: List`1
        },
        FindIndex$$Int32$$Int32$$Predicate$1: function(a0/*Int32*/, a1/*Int32*/, a2/*Predicate`1*/) { 
            return CS.Call(4, 335, 15, false, this, a0, a1, a2); //Ret: Int32
        },
        FindIndex$$Int32$$Predicate$1: function(a0/*Int32*/, a1/*Predicate`1*/) { 
            return CS.Call(4, 335, 16, false, this, a0, a1); //Ret: Int32
        },
        FindIndex$$Predicate$1: function(a0/*Predicate`1*/) { 
            return CS.Call(4, 335, 17, false, this, a0); //Ret: Int32
        },
        FindLast: function(a0/*Predicate`1*/) { 
            return CS.Call(4, 335, 18, false, this, a0); //Ret: T
        },
        FindLastIndex$$Int32$$Int32$$Predicate$1: function(a0/*Int32*/, a1/*Int32*/, a2/*Predicate`1*/) { 
            return CS.Call(4, 335, 19, false, this, a0, a1, a2); //Ret: Int32
        },
        FindLastIndex$$Int32$$Predicate$1: function(a0/*Int32*/, a1/*Predicate`1*/) { 
            return CS.Call(4, 335, 20, false, this, a0, a1); //Ret: Int32
        },
        FindLastIndex$$Predicate$1: function(a0/*Predicate`1*/) { 
            return CS.Call(4, 335, 21, false, this, a0); //Ret: Int32
        },
        ForEach: function(a0/*Action`1*/) { 
            return CS.Call(4, 335, 22, false, this, a0); //Ret: Void
        },
        GetEnumerator: function() { 
            return CS.Call(4, 335, 23, false, this); //Ret: Enumerator
        },
        GetRange: function(a0/*Int32*/, a1/*Int32*/) { 
            return CS.Call(4, 335, 24, false, this, a0, a1); //Ret: List`1
        },
        IndexOf$$T$$Int32$$Int32: function(a0/*T*/, a1/*Int32*/, a2/*Int32*/) { 
            return CS.Call(4, 335, 25, false, this, a0, a1, a2); //Ret: Int32
        },
        IndexOf$$T$$Int32: function(a0/*T*/, a1/*Int32*/) { 
            return CS.Call(4, 335, 26, false, this, a0, a1); //Ret: Int32
        },
        IndexOf$$T: function(a0/*T*/) { 
            return CS.Call(4, 335, 27, false, this, a0); //Ret: Int32
        },
        Insert: function(a0/*Int32*/, a1/*T*/) { 
            return CS.Call(4, 335, 28, false, this, a0, a1); //Ret: Void
        },
        InsertRange: function(a0/*Int32*/, a1/*IEnumerable`1*/) { 
            return CS.Call(4, 335, 29, false, this, a0, a1); //Ret: Void
        },
        LastIndexOf$$T$$Int32$$Int32: function(a0/*T*/, a1/*Int32*/, a2/*Int32*/) { 
            return CS.Call(4, 335, 30, false, this, a0, a1, a2); //Ret: Int32
        },
        LastIndexOf$$T$$Int32: function(a0/*T*/, a1/*Int32*/) { 
            return CS.Call(4, 335, 31, false, this, a0, a1); //Ret: Int32
        },
        LastIndexOf$$T: function(a0/*T*/) { 
            return CS.Call(4, 335, 32, false, this, a0); //Ret: Int32
        },
        Remove: function(a0/*T*/) { 
            return CS.Call(4, 335, 33, false, this, a0); //Ret: Boolean
        },
        RemoveAll: function(a0/*Predicate`1*/) { 
            return CS.Call(4, 335, 34, false, this, a0); //Ret: Int32
        },
        RemoveAt: function(a0/*Int32*/) { 
            return CS.Call(4, 335, 35, false, this, a0); //Ret: Void
        },
        RemoveRange: function(a0/*Int32*/, a1/*Int32*/) { 
            return CS.Call(4, 335, 36, false, this, a0, a1); //Ret: Void
        },
        Reverse$$Int32$$Int32: function(a0/*Int32*/, a1/*Int32*/) { 
            return CS.Call(4, 335, 37, false, this, a0, a1); //Ret: Void
        },
        Reverse: function() { 
            return CS.Call(4, 335, 38, false, this); //Ret: Void
        },
        Sort$$Int32$$Int32$$IComparer$1: function(a0/*Int32*/, a1/*Int32*/, a2/*IComparer`1*/) { 
            return CS.Call(4, 335, 39, false, this, a0, a1, a2); //Ret: Void
        },
        Sort$$Comparison$1: function(a0/*Comparison`1*/) { 
            return CS.Call(4, 335, 40, false, this, a0); //Ret: Void
        },
        Sort$$IComparer$1: function(a0/*IComparer`1*/) { 
            return CS.Call(4, 335, 41, false, this, a0); //Ret: Void
        },
        Sort: function() { 
            return CS.Call(4, 335, 42, false, this); //Ret: Void
        },
        ToArray: function() { 
            return CS.Call(4, 335, 43, false, this); //Ret: T[]
        },
        TrimExcess: function() { 
            return CS.Call(4, 335, 44, false, this); //Ret: Void
        },
        TrueForAll: function(a0/*Predicate`1*/) { 
            return CS.Call(4, 335, 45, false, this, a0); //Ret: Boolean
        },
    },
};
jsb_ReplaceOrPushJsType(System$Collections$Generic$List$1);

// System.Collections.Generic.Dictionary`2
var System$Collections$Generic$Dictionary$2 = 
{
    assemblyName: "mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089",
    fullname: "CSDictionary",
    Kind: "Class",
    baseTypeName: "System.Object",
    interfaceNames: ["System.Collections.IEnumerable", "System.Runtime.Serialization.ISerializable", "System.Collections.ICollection", "System.Collections.Generic.ICollection$1", "System.Collections.Generic.IEnumerable$1", "System.Collections.Generic.IDictionary$2", "System.Collections.IDictionary", "System.Runtime.Serialization.IDeserializationCallback"],
    definition: {
        ctor: function(t0, t1) { CS.Call(5, 336, 0, true, this, t0.getNativeType(), t1.getNativeType()); },
        ctor$$IEqualityComparer$1: function(t0, t1, a0) { CS.Call(5, 336, 1, true, this, t0.getNativeType(), t1.getNativeType(), a0); },
        ctor$$IDictionary$2: function(t0, t1, a0) { CS.Call(5, 336, 2, true, this, t0.getNativeType(), t1.getNativeType(), a0); },
        ctor$$Int32: function(t0, t1, a0) { CS.Call(5, 336, 3, true, this, t0.getNativeType(), t1.getNativeType(), a0); },
        ctor$$IDictionary$2$$IEqualityComparer$1: function(t0, t1, a0, a1) { CS.Call(5, 336, 4, true, this, t0.getNativeType(), t1.getNativeType(), a0, a1); },
        ctor$$Int32$$IEqualityComparer$1: function(t0, t1, a0, a1) { CS.Call(5, 336, 5, true, this, t0.getNativeType(), t1.getNativeType(), a0, a1); },
        get_Count: function() { return CS.Call(2, 336, 0, false, this); },
        set_Count: function(v) { return CS.Call(3, 336, 0, false, this, v); },
        get_Item$$TKey: function(ind0) { return CS.Call(2, 336, 1, false, this, ind0); },
        set_Item$$TKey: function(ind0, v) { return CS.Call(3, 336, 1, false, this, ind0, v); },
        get_Comparer: function() { return CS.Call(2, 336, 2, false, this); },
        set_Comparer: function(v) { return CS.Call(3, 336, 2, false, this, v); },
        get_Keys: function() { return CS.Call(2, 336, 3, false, this); },
        set_Keys: function(v) { return CS.Call(3, 336, 3, false, this, v); },
        get_Values: function() { return CS.Call(2, 336, 4, false, this); },
        set_Values: function(v) { return CS.Call(3, 336, 4, false, this, v); },
        Add: function(a0/*TKey*/, a1/*TValue*/) { 
            return CS.Call(4, 336, 0, false, this, a0, a1); //Ret: Void
        },
        Clear: function() { 
            return CS.Call(4, 336, 1, false, this); //Ret: Void
        },
        ContainsKey: function(a0/*TKey*/) { 
            return CS.Call(4, 336, 2, false, this, a0); //Ret: Boolean
        },
        ContainsValue: function(a0/*TValue*/) { 
            return CS.Call(4, 336, 3, false, this, a0); //Ret: Boolean
        },
        GetEnumerator: function() { 
            return CS.Call(4, 336, 4, false, this); //Ret: Enumerator
        },
        GetObjectData: function(a0/*SerializationInfo*/, a1/*StreamingContext*/) { 
            return CS.Call(4, 336, 5, false, this, a0, a1); //Ret: Void
        },
        OnDeserialization: function(a0/*Object*/) { 
            return CS.Call(4, 336, 6, false, this, a0); //Ret: Void
        },
        Remove: function(a0/*TKey*/) { 
            return CS.Call(4, 336, 7, false, this, a0); //Ret: Boolean
        },
        TryGetValue: function(a0/*TKey*/, a1/*TValue&*/) { 
            return CS.Call(4, 336, 8, false, this, a0, a1); //Ret: Boolean
        },
    },
};
jsb_ReplaceOrPushJsType(System$Collections$Generic$Dictionary$2);

// System.Collections.Generic.KeyValuePair`2
var System$Collections$Generic$KeyValuePair$2 = 
{
    assemblyName: "mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089",
    fullname: "CSKeyValuePair",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    definition: {
        ctor: function(t0, t1) { CS.Call(5, 337, 0, true, this, t0.getNativeType(), t1.getNativeType()); },
        ctor$$TKey$$TValue: function(t0, t1, a0, a1) { CS.Call(5, 337, 1, true, this, t0.getNativeType(), t1.getNativeType(), a0, a1); },
        get_Key: function() { return CS.Call(2, 337, 0, false, this); },
        set_Key: function(v) { return CS.Call(3, 337, 0, false, this, v); },
        get_Value: function() { return CS.Call(2, 337, 1, false, this); },
        set_Value: function(v) { return CS.Call(3, 337, 1, false, this, v); },
        toString: function() { 
            return CS.Call(4, 337, 0, false, this); //Ret: String
        },
    },
};
jsb_ReplaceOrPushJsType(System$Collections$Generic$KeyValuePair$2);

// System.Collections.Generic.Dictionary`2+KeyCollection
var System$Collections$Generic$Dictionary$2$KeyCollection = 
{
    assemblyName: "mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089",
    fullname: "CSKeyCollection",
    Kind: "Class",
    baseTypeName: "System.Object",
    interfaceNames: ["System.Collections.IEnumerable", "System.Collections.ICollection", "System.Collections.Generic.ICollection$1", "System.Collections.Generic.IEnumerable$1"],
    definition: {
        ctor: function(t0, t1, a0) { CS.Call(5, 338, 0, true, this, t0.getNativeType(), t1.getNativeType(), a0); },
        get_Count: function() { return CS.Call(2, 338, 0, false, this); },
        set_Count: function(v) { return CS.Call(3, 338, 0, false, this, v); },
        CopyTo: function(a0/*TKey[]*/, a1/*Int32*/) { 
            return CS.Call(4, 338, 0, false, this, a0, a1); //Ret: Void
        },
        GetEnumerator: function() { 
            return CS.Call(4, 338, 1, false, this); //Ret: Enumerator
        },
    },
};
jsb_ReplaceOrPushJsType(System$Collections$Generic$Dictionary$2$KeyCollection);

// System.Collections.Generic.Dictionary`2+ValueCollection
var System$Collections$Generic$Dictionary$2$ValueCollection = 
{
    assemblyName: "mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089",
    fullname: "CSValueCollection",
    Kind: "Class",
    baseTypeName: "System.Object",
    interfaceNames: ["System.Collections.IEnumerable", "System.Collections.ICollection", "System.Collections.Generic.ICollection$1", "System.Collections.Generic.IEnumerable$1"],
    definition: {
        ctor: function(t0, t1, a0) { CS.Call(5, 339, 0, true, this, t0.getNativeType(), t1.getNativeType(), a0); },
        get_Count: function() { return CS.Call(2, 339, 0, false, this); },
        set_Count: function(v) { return CS.Call(3, 339, 0, false, this, v); },
        CopyTo: function(a0/*TValue[]*/, a1/*Int32*/) { 
            return CS.Call(4, 339, 0, false, this, a0, a1); //Ret: Void
        },
        GetEnumerator: function() { 
            return CS.Call(4, 339, 1, false, this); //Ret: Enumerator
        },
    },
};
jsb_ReplaceOrPushJsType(System$Collections$Generic$Dictionary$2$ValueCollection);

// System.Collections.Generic.HashSet`1
var System$Collections$Generic$HashSet$1 = 
{
    assemblyName: "System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089",
    fullname: "CSHashSet",
    Kind: "Class",
    baseTypeName: "System.Object",
    interfaceNames: ["System.Collections.IEnumerable", "System.Runtime.Serialization.ISerializable", "System.Runtime.Serialization.IDeserializationCallback", "System.Collections.Generic.ICollection$1", "System.Collections.Generic.IEnumerable$1"],
    staticDefinition: {
        CreateSetComparer: function() { 
            return CS.Call(4, 340, 22, true); //Ret: IEqualityComparer`1
        },
    },
    definition: {
        ctor: function(t0) { CS.Call(5, 340, 0, true, this, t0.getNativeType()); },
        ctor$$IEqualityComparer$1: function(t0, a0) { CS.Call(5, 340, 1, true, this, t0.getNativeType(), a0); },
        ctor$$IEnumerable$1: function(t0, a0) { CS.Call(5, 340, 2, true, this, t0.getNativeType(), a0); },
        ctor$$IEnumerable$1$$IEqualityComparer$1: function(t0, a0, a1) { CS.Call(5, 340, 3, true, this, t0.getNativeType(), a0, a1); },
        get_Count: function() { return CS.Call(2, 340, 0, false, this); },
        set_Count: function(v) { return CS.Call(3, 340, 0, false, this, v); },
        get_Comparer: function() { return CS.Call(2, 340, 1, false, this); },
        set_Comparer: function(v) { return CS.Call(3, 340, 1, false, this, v); },
        Add: function(a0/*T*/) { 
            return CS.Call(4, 340, 0, false, this, a0); //Ret: Boolean
        },
        Clear: function() { 
            return CS.Call(4, 340, 1, false, this); //Ret: Void
        },
        Contains: function(a0/*T*/) { 
            return CS.Call(4, 340, 2, false, this, a0); //Ret: Boolean
        },
        CopyTo$$T$Array$$Int32$$Int32: function(a0/*T[]*/, a1/*Int32*/, a2/*Int32*/) { 
            return CS.Call(4, 340, 3, false, this, a0, a1, a2); //Ret: Void
        },
        CopyTo$$T$Array$$Int32: function(a0/*T[]*/, a1/*Int32*/) { 
            return CS.Call(4, 340, 4, false, this, a0, a1); //Ret: Void
        },
        CopyTo$$T$Array: function(a0/*T[]*/) { 
            return CS.Call(4, 340, 5, false, this, a0); //Ret: Void
        },
        ExceptWith: function(a0/*IEnumerable`1*/) { 
            return CS.Call(4, 340, 6, false, this, a0); //Ret: Void
        },
        GetEnumerator: function() { 
            return CS.Call(4, 340, 7, false, this); //Ret: Enumerator
        },
        GetObjectData: function(a0/*SerializationInfo*/, a1/*StreamingContext*/) { 
            return CS.Call(4, 340, 8, false, this, a0, a1); //Ret: Void
        },
        IntersectWith: function(a0/*IEnumerable`1*/) { 
            return CS.Call(4, 340, 9, false, this, a0); //Ret: Void
        },
        IsProperSubsetOf: function(a0/*IEnumerable`1*/) { 
            return CS.Call(4, 340, 10, false, this, a0); //Ret: Boolean
        },
        IsProperSupersetOf: function(a0/*IEnumerable`1*/) { 
            return CS.Call(4, 340, 11, false, this, a0); //Ret: Boolean
        },
        IsSubsetOf: function(a0/*IEnumerable`1*/) { 
            return CS.Call(4, 340, 12, false, this, a0); //Ret: Boolean
        },
        IsSupersetOf: function(a0/*IEnumerable`1*/) { 
            return CS.Call(4, 340, 13, false, this, a0); //Ret: Boolean
        },
        OnDeserialization: function(a0/*Object*/) { 
            return CS.Call(4, 340, 14, false, this, a0); //Ret: Void
        },
        Overlaps: function(a0/*IEnumerable`1*/) { 
            return CS.Call(4, 340, 15, false, this, a0); //Ret: Boolean
        },
        Remove: function(a0/*T*/) { 
            return CS.Call(4, 340, 16, false, this, a0); //Ret: Boolean
        },
        RemoveWhere: function(a0/*Predicate`1*/) { 
            return CS.Call(4, 340, 17, false, this, a0); //Ret: Int32
        },
        SetEquals: function(a0/*IEnumerable`1*/) { 
            return CS.Call(4, 340, 18, false, this, a0); //Ret: Boolean
        },
        SymmetricExceptWith: function(a0/*IEnumerable`1*/) { 
            return CS.Call(4, 340, 19, false, this, a0); //Ret: Void
        },
        TrimExcess: function() { 
            return CS.Call(4, 340, 20, false, this); //Ret: Void
        },
        UnionWith: function(a0/*IEnumerable`1*/) { 
            return CS.Call(4, 340, 21, false, this, a0); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(System$Collections$Generic$HashSet$1);

// System.Collections.Hashtable
var System$Collections$Hashtable = 
{
    assemblyName: "mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089",
    fullname: "System.Collections.Hashtable",
    Kind: "Class",
    baseTypeName: "System.Object",
    interfaceNames: ["System.Collections.IEnumerable", "System.ICloneable", "System.Runtime.Serialization.ISerializable", "System.Collections.ICollection", "System.Collections.IDictionary", "System.Runtime.Serialization.IDeserializationCallback"],
    staticDefinition: {
        Synchronized: function(a0/*Hashtable*/) { 
            return CS.Call(4, 341, 11, true, a0); //Ret: Hashtable
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 341, 0, true, this); },
        ctor$$Int32$$Single: function(a0, a1) { CS.Call(5, 341, 1, true, this, a0, a1); },
        ctor$$Int32: function(a0) { CS.Call(5, 341, 2, true, this, a0); },
        ctor$$IDictionary$$Single: function(a0, a1) { CS.Call(5, 341, 3, true, this, a0, a1); },
        ctor$$IDictionary: function(a0) { CS.Call(5, 341, 4, true, this, a0); },
        ctor$$IDictionary$$IEqualityComparer: function(a0, a1) { CS.Call(5, 341, 5, true, this, a0, a1); },
        ctor$$IDictionary$$Single$$IEqualityComparer: function(a0, a1, a2) { CS.Call(5, 341, 6, true, this, a0, a1, a2); },
        ctor$$IEqualityComparer: function(a0) { CS.Call(5, 341, 7, true, this, a0); },
        ctor$$Int32$$IEqualityComparer: function(a0, a1) { CS.Call(5, 341, 8, true, this, a0, a1); },
        ctor$$Int32$$Single$$IEqualityComparer: function(a0, a1, a2) { CS.Call(5, 341, 9, true, this, a0, a1, a2); },
        get_Count: function() { return CS.Call(2, 341, 0, false, this); },
        set_Count: function(v) { return CS.Call(3, 341, 0, false, this, v); },
        get_IsSynchronized: function() { return CS.Call(2, 341, 1, false, this); },
        set_IsSynchronized: function(v) { return CS.Call(3, 341, 1, false, this, v); },
        get_SyncRoot: function() { return CS.Call(2, 341, 2, false, this); },
        set_SyncRoot: function(v) { return CS.Call(3, 341, 2, false, this, v); },
        get_IsFixedSize: function() { return CS.Call(2, 341, 3, false, this); },
        set_IsFixedSize: function(v) { return CS.Call(3, 341, 3, false, this, v); },
        get_IsReadOnly: function() { return CS.Call(2, 341, 4, false, this); },
        set_IsReadOnly: function(v) { return CS.Call(3, 341, 4, false, this, v); },
        get_Keys: function() { return CS.Call(2, 341, 5, false, this); },
        set_Keys: function(v) { return CS.Call(3, 341, 5, false, this, v); },
        get_Values: function() { return CS.Call(2, 341, 6, false, this); },
        set_Values: function(v) { return CS.Call(3, 341, 6, false, this, v); },
        get_Item$$Object: function(ind0) { return CS.Call(2, 341, 7, false, this, ind0); },
        set_Item$$Object: function(ind0, v) { return CS.Call(3, 341, 7, false, this, ind0, v); },
        Add: function(a0/*Object*/, a1/*Object*/) { 
            return CS.Call(4, 341, 0, false, this, a0, a1); //Ret: Void
        },
        Clear: function() { 
            return CS.Call(4, 341, 1, false, this); //Ret: Void
        },
        Clone: function() { 
            return CS.Call(4, 341, 2, false, this); //Ret: Object
        },
        Contains: function(a0/*Object*/) { 
            return CS.Call(4, 341, 3, false, this, a0); //Ret: Boolean
        },
        ContainsKey: function(a0/*Object*/) { 
            return CS.Call(4, 341, 4, false, this, a0); //Ret: Boolean
        },
        ContainsValue: function(a0/*Object*/) { 
            return CS.Call(4, 341, 5, false, this, a0); //Ret: Boolean
        },
        CopyTo: function(a0/*Array*/, a1/*Int32*/) { 
            return CS.Call(4, 341, 6, false, this, a0, a1); //Ret: Void
        },
        GetEnumerator: function() { 
            return CS.Call(4, 341, 7, false, this); //Ret: IDictionaryEnumerator
        },
        GetObjectData: function(a0/*SerializationInfo*/, a1/*StreamingContext*/) { 
            return CS.Call(4, 341, 8, false, this, a0, a1); //Ret: Void
        },
        OnDeserialization: function(a0/*Object*/) { 
            return CS.Call(4, 341, 9, false, this, a0); //Ret: Void
        },
        Remove: function(a0/*Object*/) { 
            return CS.Call(4, 341, 10, false, this, a0); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(System$Collections$Hashtable);

// System.WeakReference
var System$WeakReference = 
{
    assemblyName: "mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089",
    fullname: "System.WeakReference",
    Kind: "Class",
    baseTypeName: "System.Object",
    interfaceNames: ["System.Runtime.Serialization.ISerializable"],
    definition: {
        ctor$$Object: function(a0) { CS.Call(5, 342, 0, true, this, a0); },
        ctor$$Object$$Boolean: function(a0, a1) { CS.Call(5, 342, 1, true, this, a0, a1); },
        get_IsAlive: function() { return CS.Call(2, 342, 0, false, this); },
        set_IsAlive: function(v) { return CS.Call(3, 342, 0, false, this, v); },
        get_Target: function() { return CS.Call(2, 342, 1, false, this); },
        set_Target: function(v) { return CS.Call(3, 342, 1, false, this, v); },
        get_TrackResurrection: function() { return CS.Call(2, 342, 2, false, this); },
        set_TrackResurrection: function(v) { return CS.Call(3, 342, 2, false, this, v); },
        GetObjectData: function(a0/*SerializationInfo*/, a1/*StreamingContext*/) { 
            return CS.Call(4, 342, 0, false, this, a0, a1); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(System$WeakReference);

// System.Diagnostics.Stopwatch
var System$Diagnostics$Stopwatch = 
{
    assemblyName: "System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089",
    fullname: "System.Diagnostics.Stopwatch",
    Kind: "Class",
    baseTypeName: "System.Object",
    staticFields: {
        Frequency: {
            get: function() { return CS.Call(0, 343, 0, true); }, 
            set: function(v) { return CS.Call(1, 343, 0, true, v); }
        },
        IsHighResolution: {
            get: function() { return CS.Call(0, 343, 1, true); }, 
            set: function(v) { return CS.Call(1, 343, 1, true, v); }
        },
    },
    staticDefinition: {
        GetTimestamp: function() { 
            return CS.Call(4, 343, 3, true); //Ret: Int64
        },
        StartNew: function() { 
            return CS.Call(4, 343, 4, true); //Ret: Stopwatch
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 343, 0, true, this); },
        get_Elapsed: function() { return CS.Call(2, 343, 0, false, this); },
        set_Elapsed: function(v) { return CS.Call(3, 343, 0, false, this, v); },
        get_ElapsedMilliseconds: function() { return CS.Call(2, 343, 1, false, this); },
        set_ElapsedMilliseconds: function(v) { return CS.Call(3, 343, 1, false, this, v); },
        get_ElapsedTicks: function() { return CS.Call(2, 343, 2, false, this); },
        set_ElapsedTicks: function(v) { return CS.Call(3, 343, 2, false, this, v); },
        get_IsRunning: function() { return CS.Call(2, 343, 3, false, this); },
        set_IsRunning: function(v) { return CS.Call(3, 343, 3, false, this, v); },
        Reset: function() { 
            return CS.Call(4, 343, 0, false, this); //Ret: Void
        },
        Start: function() { 
            return CS.Call(4, 343, 1, false, this); //Ret: Void
        },
        Stop: function() { 
            return CS.Call(4, 343, 2, false, this); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(System$Diagnostics$Stopwatch);

// System.Math
var System$Math = 
{
    assemblyName: "mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089",
    fullname: "System.Math",
    Kind: "Class",
    baseTypeName: "System.Object",
    staticFields: {
        E: {
            get: function() { return CS.Call(0, 344, 0, true); }, 
            set: function(v) { return CS.Call(1, 344, 0, true, v); }
        },
        PI: {
            get: function() { return CS.Call(0, 344, 1, true); }, 
            set: function(v) { return CS.Call(1, 344, 1, true, v); }
        },
    },
    staticDefinition: {
        Abs$$Int64: function(a0/*Int64*/) { 
            return CS.Call(4, 344, 0, true, a0); //Ret: Int64
        },
        Abs$$SByte: function(a0/*SByte*/) { 
            return CS.Call(4, 344, 1, true, a0); //Ret: SByte
        },
        Abs$$Int16: function(a0/*Int16*/) { 
            return CS.Call(4, 344, 2, true, a0); //Ret: Int16
        },
        Abs$$Int32: function(a0/*Int32*/) { 
            return CS.Call(4, 344, 3, true, a0); //Ret: Int32
        },
        Abs$$Decimal: function(a0/*Decimal*/) { 
            return CS.Call(4, 344, 4, true, a0); //Ret: Decimal
        },
        Abs$$Double: function(a0/*Double*/) { 
            return CS.Call(4, 344, 5, true, a0); //Ret: Double
        },
        Abs$$Single: function(a0/*Single*/) { 
            return CS.Call(4, 344, 6, true, a0); //Ret: Single
        },
        Acos: function(a0/*Double*/) { 
            return CS.Call(4, 344, 7, true, a0); //Ret: Double
        },
        Asin: function(a0/*Double*/) { 
            return CS.Call(4, 344, 8, true, a0); //Ret: Double
        },
        Atan: function(a0/*Double*/) { 
            return CS.Call(4, 344, 9, true, a0); //Ret: Double
        },
        Atan2: function(a0/*Double*/, a1/*Double*/) { 
            return CS.Call(4, 344, 10, true, a0, a1); //Ret: Double
        },
        BigMul: function(a0/*Int32*/, a1/*Int32*/) { 
            return CS.Call(4, 344, 11, true, a0, a1); //Ret: Int64
        },
        Ceiling$$Double: function(a0/*Double*/) { 
            return CS.Call(4, 344, 12, true, a0); //Ret: Double
        },
        Ceiling$$Decimal: function(a0/*Decimal*/) { 
            return CS.Call(4, 344, 13, true, a0); //Ret: Decimal
        },
        Cos: function(a0/*Double*/) { 
            return CS.Call(4, 344, 14, true, a0); //Ret: Double
        },
        Cosh: function(a0/*Double*/) { 
            return CS.Call(4, 344, 15, true, a0); //Ret: Double
        },
        DivRem$$Int64$$Int64$$Int64: function(a0/*Int64*/, a1/*Int64*/, a2/*Int64&*/) { 
            return CS.Call(4, 344, 16, true, a0, a1, a2); //Ret: Int64
        },
        DivRem$$Int32$$Int32$$Int32: function(a0/*Int32*/, a1/*Int32*/, a2/*Int32&*/) { 
            return CS.Call(4, 344, 17, true, a0, a1, a2); //Ret: Int32
        },
        Exp: function(a0/*Double*/) { 
            return CS.Call(4, 344, 18, true, a0); //Ret: Double
        },
        Floor$$Double: function(a0/*Double*/) { 
            return CS.Call(4, 344, 19, true, a0); //Ret: Double
        },
        Floor$$Decimal: function(a0/*Decimal*/) { 
            return CS.Call(4, 344, 20, true, a0); //Ret: Decimal
        },
        IEEERemainder: function(a0/*Double*/, a1/*Double*/) { 
            return CS.Call(4, 344, 21, true, a0, a1); //Ret: Double
        },
        Log$$Double$$Double: function(a0/*Double*/, a1/*Double*/) { 
            return CS.Call(4, 344, 22, true, a0, a1); //Ret: Double
        },
        Log$$Double: function(a0/*Double*/) { 
            return CS.Call(4, 344, 23, true, a0); //Ret: Double
        },
        Log10: function(a0/*Double*/) { 
            return CS.Call(4, 344, 24, true, a0); //Ret: Double
        },
        Max$$UInt16$$UInt16: function(a0/*UInt16*/, a1/*UInt16*/) { 
            return CS.Call(4, 344, 25, true, a0, a1); //Ret: UInt16
        },
        Max$$Single$$Single: function(a0/*Single*/, a1/*Single*/) { 
            return CS.Call(4, 344, 26, true, a0, a1); //Ret: Single
        },
        Max$$Int32$$Int32: function(a0/*Int32*/, a1/*Int32*/) { 
            return CS.Call(4, 344, 27, true, a0, a1); //Ret: Int32
        },
        Max$$Double$$Double: function(a0/*Double*/, a1/*Double*/) { 
            return CS.Call(4, 344, 28, true, a0, a1); //Ret: Double
        },
        Max$$Byte$$Byte: function(a0/*Byte*/, a1/*Byte*/) { 
            return CS.Call(4, 344, 29, true, a0, a1); //Ret: Byte
        },
        Max$$Decimal$$Decimal: function(a0/*Decimal*/, a1/*Decimal*/) { 
            return CS.Call(4, 344, 30, true, a0, a1); //Ret: Decimal
        },
        Max$$UInt32$$UInt32: function(a0/*UInt32*/, a1/*UInt32*/) { 
            return CS.Call(4, 344, 31, true, a0, a1); //Ret: UInt32
        },
        Max$$UInt64$$UInt64: function(a0/*UInt64*/, a1/*UInt64*/) { 
            return CS.Call(4, 344, 32, true, a0, a1); //Ret: UInt64
        },
        Max$$Int16$$Int16: function(a0/*Int16*/, a1/*Int16*/) { 
            return CS.Call(4, 344, 33, true, a0, a1); //Ret: Int16
        },
        Max$$Int64$$Int64: function(a0/*Int64*/, a1/*Int64*/) { 
            return CS.Call(4, 344, 34, true, a0, a1); //Ret: Int64
        },
        Max$$SByte$$SByte: function(a0/*SByte*/, a1/*SByte*/) { 
            return CS.Call(4, 344, 35, true, a0, a1); //Ret: SByte
        },
        Min$$UInt16$$UInt16: function(a0/*UInt16*/, a1/*UInt16*/) { 
            return CS.Call(4, 344, 36, true, a0, a1); //Ret: UInt16
        },
        Min$$Double$$Double: function(a0/*Double*/, a1/*Double*/) { 
            return CS.Call(4, 344, 37, true, a0, a1); //Ret: Double
        },
        Min$$Single$$Single: function(a0/*Single*/, a1/*Single*/) { 
            return CS.Call(4, 344, 38, true, a0, a1); //Ret: Single
        },
        Min$$UInt64$$UInt64: function(a0/*UInt64*/, a1/*UInt64*/) { 
            return CS.Call(4, 344, 39, true, a0, a1); //Ret: UInt64
        },
        Min$$Decimal$$Decimal: function(a0/*Decimal*/, a1/*Decimal*/) { 
            return CS.Call(4, 344, 40, true, a0, a1); //Ret: Decimal
        },
        Min$$Int32$$Int32: function(a0/*Int32*/, a1/*Int32*/) { 
            return CS.Call(4, 344, 41, true, a0, a1); //Ret: Int32
        },
        Min$$Int16$$Int16: function(a0/*Int16*/, a1/*Int16*/) { 
            return CS.Call(4, 344, 42, true, a0, a1); //Ret: Int16
        },
        Min$$UInt32$$UInt32: function(a0/*UInt32*/, a1/*UInt32*/) { 
            return CS.Call(4, 344, 43, true, a0, a1); //Ret: UInt32
        },
        Min$$Int64$$Int64: function(a0/*Int64*/, a1/*Int64*/) { 
            return CS.Call(4, 344, 44, true, a0, a1); //Ret: Int64
        },
        Min$$SByte$$SByte: function(a0/*SByte*/, a1/*SByte*/) { 
            return CS.Call(4, 344, 45, true, a0, a1); //Ret: SByte
        },
        Min$$Byte$$Byte: function(a0/*Byte*/, a1/*Byte*/) { 
            return CS.Call(4, 344, 46, true, a0, a1); //Ret: Byte
        },
        Pow: function(a0/*Double*/, a1/*Double*/) { 
            return CS.Call(4, 344, 47, true, a0, a1); //Ret: Double
        },
        Round$$Decimal$$Int32$$MidpointRounding: function(a0/*Decimal*/, a1/*Int32*/, a2/*MidpointRounding*/) { 
            return CS.Call(4, 344, 48, true, a0, a1, a2); //Ret: Decimal
        },
        Round$$Double$$Int32$$MidpointRounding: function(a0/*Double*/, a1/*Int32*/, a2/*MidpointRounding*/) { 
            return CS.Call(4, 344, 49, true, a0, a1, a2); //Ret: Double
        },
        Round$$Decimal$$MidpointRounding: function(a0/*Decimal*/, a1/*MidpointRounding*/) { 
            return CS.Call(4, 344, 50, true, a0, a1); //Ret: Decimal
        },
        Round$$Decimal$$Int32: function(a0/*Decimal*/, a1/*Int32*/) { 
            return CS.Call(4, 344, 51, true, a0, a1); //Ret: Decimal
        },
        Round$$Double$$MidpointRounding: function(a0/*Double*/, a1/*MidpointRounding*/) { 
            return CS.Call(4, 344, 52, true, a0, a1); //Ret: Double
        },
        Round$$Double$$Int32: function(a0/*Double*/, a1/*Int32*/) { 
            return CS.Call(4, 344, 53, true, a0, a1); //Ret: Double
        },
        Round$$Decimal: function(a0/*Decimal*/) { 
            return CS.Call(4, 344, 54, true, a0); //Ret: Decimal
        },
        Round$$Double: function(a0/*Double*/) { 
            return CS.Call(4, 344, 55, true, a0); //Ret: Double
        },
        Sign$$Int32: function(a0/*Int32*/) { 
            return CS.Call(4, 344, 56, true, a0); //Ret: Int32
        },
        Sign$$Int64: function(a0/*Int64*/) { 
            return CS.Call(4, 344, 57, true, a0); //Ret: Int32
        },
        Sign$$Single: function(a0/*Single*/) { 
            return CS.Call(4, 344, 58, true, a0); //Ret: Int32
        },
        Sign$$Decimal: function(a0/*Decimal*/) { 
            return CS.Call(4, 344, 59, true, a0); //Ret: Int32
        },
        Sign$$Double: function(a0/*Double*/) { 
            return CS.Call(4, 344, 60, true, a0); //Ret: Int32
        },
        Sign$$SByte: function(a0/*SByte*/) { 
            return CS.Call(4, 344, 61, true, a0); //Ret: Int32
        },
        Sign$$Int16: function(a0/*Int16*/) { 
            return CS.Call(4, 344, 62, true, a0); //Ret: Int32
        },
        Sin: function(a0/*Double*/) { 
            return CS.Call(4, 344, 63, true, a0); //Ret: Double
        },
        Sinh: function(a0/*Double*/) { 
            return CS.Call(4, 344, 64, true, a0); //Ret: Double
        },
        Sqrt: function(a0/*Double*/) { 
            return CS.Call(4, 344, 65, true, a0); //Ret: Double
        },
        Tan: function(a0/*Double*/) { 
            return CS.Call(4, 344, 66, true, a0); //Ret: Double
        },
        Tanh: function(a0/*Double*/) { 
            return CS.Call(4, 344, 67, true, a0); //Ret: Double
        },
        Truncate$$Double: function(a0/*Double*/) { 
            return CS.Call(4, 344, 68, true, a0); //Ret: Double
        },
        Truncate$$Decimal: function(a0/*Decimal*/) { 
            return CS.Call(4, 344, 69, true, a0); //Ret: Decimal
        },
    },
};
jsb_ReplaceOrPushJsType(System$Math);

// System.Random
var System$Random = 
{
    assemblyName: "mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089",
    fullname: "System.Random",
    Kind: "Class",
    baseTypeName: "System.Object",
    definition: {
        ctor: function() { CS.Call(5, 345, 0, true, this); },
        ctor$$Int32: function(a0) { CS.Call(5, 345, 1, true, this, a0); },
        Next$$Int32$$Int32: function(a0/*Int32*/, a1/*Int32*/) { 
            return CS.Call(4, 345, 0, false, this, a0, a1); //Ret: Int32
        },
        Next$$Int32: function(a0/*Int32*/) { 
            return CS.Call(4, 345, 1, false, this, a0); //Ret: Int32
        },
        Next: function() { 
            return CS.Call(4, 345, 2, false, this); //Ret: Int32
        },
        NextBytes: function(a0/*Byte[]*/) { 
            return CS.Call(4, 345, 3, false, this, a0); //Ret: Void
        },
        NextDouble: function() { 
            return CS.Call(4, 345, 4, false, this); //Ret: Double
        },
    },
};
jsb_ReplaceOrPushJsType(System$Random);

// System.Text.RegularExpressions.Regex
var System$Text$RegularExpressions$Regex = 
{
    assemblyName: "System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089",
    fullname: "System.Text.RegularExpressions.Regex",
    Kind: "Class",
    baseTypeName: "System.Object",
    interfaceNames: ["System.Runtime.Serialization.ISerializable"],
    staticDefinition: {
        get_CacheSize: function() { return CS.Call(2, 346, 0, true); },
        set_CacheSize: function(v) { return CS.Call(3, 346, 0, true, v); },
        CompileToAssembly$$RegexCompilationInfo$Array$$AssemblyName$$CustomAttributeBuilder$Array$$String: function(a0/*RegexCompilationInfo[]*/, a1/*AssemblyName*/, a2/*CustomAttributeBuilder[]*/, a3/*String*/) { 
            return CS.Call(4, 346, 21, true, a0, a1, a2, a3); //Ret: Void
        },
        CompileToAssembly$$RegexCompilationInfo$Array$$AssemblyName$$CustomAttributeBuilder$Array: function(a0/*RegexCompilationInfo[]*/, a1/*AssemblyName*/, a2/*CustomAttributeBuilder[]*/) { 
            return CS.Call(4, 346, 22, true, a0, a1, a2); //Ret: Void
        },
        CompileToAssembly$$RegexCompilationInfo$Array$$AssemblyName: function(a0/*RegexCompilationInfo[]*/, a1/*AssemblyName*/) { 
            return CS.Call(4, 346, 23, true, a0, a1); //Ret: Void
        },
        Escape: function(a0/*String*/) { 
            return CS.Call(4, 346, 24, true, a0); //Ret: String
        },
        IsMatch$$String$$String$$RegexOptions: function(a0/*String*/, a1/*String*/, a2/*RegexOptions*/) { 
            return CS.Call(4, 346, 25, true, a0, a1, a2); //Ret: Boolean
        },
        IsMatch$$String$$String: function(a0/*String*/, a1/*String*/) { 
            return CS.Call(4, 346, 26, true, a0, a1); //Ret: Boolean
        },
        Match$$String$$String$$RegexOptions: function(a0/*String*/, a1/*String*/, a2/*RegexOptions*/) { 
            return CS.Call(4, 346, 27, true, a0, a1, a2); //Ret: Match
        },
        Match$$String$$String: function(a0/*String*/, a1/*String*/) { 
            return CS.Call(4, 346, 28, true, a0, a1); //Ret: Match
        },
        Matches$$String$$String$$RegexOptions: function(a0/*String*/, a1/*String*/, a2/*RegexOptions*/) { 
            return CS.Call(4, 346, 29, true, a0, a1, a2); //Ret: MatchCollection
        },
        Matches$$String$$String: function(a0/*String*/, a1/*String*/) { 
            return CS.Call(4, 346, 30, true, a0, a1); //Ret: MatchCollection
        },
        Replace$$String$$String$$MatchEvaluator$$RegexOptions: function(a0/*String*/, a1/*String*/, a2/*MatchEvaluator*/, a3/*RegexOptions*/) { 
            return CS.Call(4, 346, 31, true, a0, a1, a2, a3); //Ret: String
        },
        Replace$$String$$String$$String$$RegexOptions: function(a0/*String*/, a1/*String*/, a2/*String*/, a3/*RegexOptions*/) { 
            return CS.Call(4, 346, 32, true, a0, a1, a2, a3); //Ret: String
        },
        Replace$$String$$String$$String: function(a0/*String*/, a1/*String*/, a2/*String*/) { 
            return CS.Call(4, 346, 33, true, a0, a1, a2); //Ret: String
        },
        Replace$$String$$String$$MatchEvaluator: function(a0/*String*/, a1/*String*/, a2/*MatchEvaluator*/) { 
            return CS.Call(4, 346, 34, true, a0, a1, a2); //Ret: String
        },
        Split$$String$$String$$RegexOptions: function(a0/*String*/, a1/*String*/, a2/*RegexOptions*/) { 
            return CS.Call(4, 346, 35, true, a0, a1, a2); //Ret: String[]
        },
        Split$$String$$String: function(a0/*String*/, a1/*String*/) { 
            return CS.Call(4, 346, 36, true, a0, a1); //Ret: String[]
        },
        Unescape: function(a0/*String*/) { 
            return CS.Call(4, 346, 37, true, a0); //Ret: String
        },
    },
    definition: {
        ctor$$String: function(a0) { CS.Call(5, 346, 0, true, this, a0); },
        ctor$$String$$RegexOptions: function(a0, a1) { CS.Call(5, 346, 1, true, this, a0, a1); },
        get_Options: function() { return CS.Call(2, 346, 1, false, this); },
        set_Options: function(v) { return CS.Call(3, 346, 1, false, this, v); },
        get_RightToLeft: function() { return CS.Call(2, 346, 2, false, this); },
        set_RightToLeft: function(v) { return CS.Call(3, 346, 2, false, this, v); },
        GetGroupNames: function() { 
            return CS.Call(4, 346, 0, false, this); //Ret: String[]
        },
        GetGroupNumbers: function() { 
            return CS.Call(4, 346, 1, false, this); //Ret: Int32[]
        },
        GroupNameFromNumber: function(a0/*Int32*/) { 
            return CS.Call(4, 346, 2, false, this, a0); //Ret: String
        },
        GroupNumberFromName: function(a0/*String*/) { 
            return CS.Call(4, 346, 3, false, this, a0); //Ret: Int32
        },
        IsMatch$$String$$Int32: function(a0/*String*/, a1/*Int32*/) { 
            return CS.Call(4, 346, 4, false, this, a0, a1); //Ret: Boolean
        },
        IsMatch$$String: function(a0/*String*/) { 
            return CS.Call(4, 346, 5, false, this, a0); //Ret: Boolean
        },
        Match$$String$$Int32$$Int32: function(a0/*String*/, a1/*Int32*/, a2/*Int32*/) { 
            return CS.Call(4, 346, 6, false, this, a0, a1, a2); //Ret: Match
        },
        Match$$String$$Int32: function(a0/*String*/, a1/*Int32*/) { 
            return CS.Call(4, 346, 7, false, this, a0, a1); //Ret: Match
        },
        Match$$String: function(a0/*String*/) { 
            return CS.Call(4, 346, 8, false, this, a0); //Ret: Match
        },
        Matches$$String$$Int32: function(a0/*String*/, a1/*Int32*/) { 
            return CS.Call(4, 346, 9, false, this, a0, a1); //Ret: MatchCollection
        },
        Matches$$String: function(a0/*String*/) { 
            return CS.Call(4, 346, 10, false, this, a0); //Ret: MatchCollection
        },
        Replace$$String$$MatchEvaluator$$Int32$$Int32: function(a0/*String*/, a1/*MatchEvaluator*/, a2/*Int32*/, a3/*Int32*/) { 
            return CS.Call(4, 346, 11, false, this, a0, a1, a2, a3); //Ret: String
        },
        Replace$$String$$String$$Int32$$Int32: function(a0/*String*/, a1/*String*/, a2/*Int32*/, a3/*Int32*/) { 
            return CS.Call(4, 346, 12, false, this, a0, a1, a2, a3); //Ret: String
        },
        Replace$$String$$String$$Int32: function(a0/*String*/, a1/*String*/, a2/*Int32*/) { 
            return CS.Call(4, 346, 13, false, this, a0, a1, a2); //Ret: String
        },
        Replace$$String$$MatchEvaluator$$Int32: function(a0/*String*/, a1/*MatchEvaluator*/, a2/*Int32*/) { 
            return CS.Call(4, 346, 14, false, this, a0, a1, a2); //Ret: String
        },
        Replace$$String$$String: function(a0/*String*/, a1/*String*/) { 
            return CS.Call(4, 346, 15, false, this, a0, a1); //Ret: String
        },
        Replace$$String$$MatchEvaluator: function(a0/*String*/, a1/*MatchEvaluator*/) { 
            return CS.Call(4, 346, 16, false, this, a0, a1); //Ret: String
        },
        Split$$String$$Int32$$Int32: function(a0/*String*/, a1/*Int32*/, a2/*Int32*/) { 
            return CS.Call(4, 346, 17, false, this, a0, a1, a2); //Ret: String[]
        },
        Split$$String$$Int32: function(a0/*String*/, a1/*Int32*/) { 
            return CS.Call(4, 346, 18, false, this, a0, a1); //Ret: String[]
        },
        Split$$String: function(a0/*String*/) { 
            return CS.Call(4, 346, 19, false, this, a0); //Ret: String[]
        },
        toString: function() { 
            return CS.Call(4, 346, 20, false, this); //Ret: String
        },
    },
};
jsb_ReplaceOrPushJsType(System$Text$RegularExpressions$Regex);

// System.Text.RegularExpressions.Capture
var System$Text$RegularExpressions$Capture = 
{
    assemblyName: "System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089",
    fullname: "System.Text.RegularExpressions.Capture",
    Kind: "Class",
    baseTypeName: "System.Object",
    definition: {
        get_Index: function() { return CS.Call(2, 347, 0, false, this); },
        set_Index: function(v) { return CS.Call(3, 347, 0, false, this, v); },
        get_Length: function() { return CS.Call(2, 347, 1, false, this); },
        set_Length: function(v) { return CS.Call(3, 347, 1, false, this, v); },
        get_Value: function() { return CS.Call(2, 347, 2, false, this); },
        set_Value: function(v) { return CS.Call(3, 347, 2, false, this, v); },
        toString: function() { 
            return CS.Call(4, 347, 0, false, this); //Ret: String
        },
    },
};
jsb_ReplaceOrPushJsType(System$Text$RegularExpressions$Capture);

// System.Text.RegularExpressions.Group
var System$Text$RegularExpressions$Group = 
{
    assemblyName: "System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089",
    fullname: "System.Text.RegularExpressions.Group",
    Kind: "Class",
    baseTypeName: "System.Text.RegularExpressions.Capture",
    staticDefinition: {
        Synchronized: function(a0/*Group*/) { 
            return CS.Call(4, 348, 0, true, a0); //Ret: Group
        },
    },
    definition: {
        get_Captures: function() { return CS.Call(2, 348, 0, false, this); },
        set_Captures: function(v) { return CS.Call(3, 348, 0, false, this, v); },
        get_Success: function() { return CS.Call(2, 348, 1, false, this); },
        set_Success: function(v) { return CS.Call(3, 348, 1, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(System$Text$RegularExpressions$Group);

// System.Text.RegularExpressions.GroupCollection
var System$Text$RegularExpressions$GroupCollection = 
{
    assemblyName: "System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089",
    fullname: "System.Text.RegularExpressions.GroupCollection",
    Kind: "Class",
    baseTypeName: "System.Object",
    interfaceNames: ["System.Collections.ICollection", "System.Collections.IEnumerable"],
    definition: {
        get_Count: function() { return CS.Call(2, 349, 0, false, this); },
        set_Count: function(v) { return CS.Call(3, 349, 0, false, this, v); },
        get_IsReadOnly: function() { return CS.Call(2, 349, 1, false, this); },
        set_IsReadOnly: function(v) { return CS.Call(3, 349, 1, false, this, v); },
        get_IsSynchronized: function() { return CS.Call(2, 349, 2, false, this); },
        set_IsSynchronized: function(v) { return CS.Call(3, 349, 2, false, this, v); },
        get_Item$$Int32: function(ind0) { return CS.Call(2, 349, 3, false, this, ind0); },
        set_Item$$Int32: function(ind0, v) { return CS.Call(3, 349, 3, false, this, ind0, v); },
        get_Item$$String: function(ind0) { return CS.Call(2, 349, 4, false, this, ind0); },
        set_Item$$String: function(ind0, v) { return CS.Call(3, 349, 4, false, this, ind0, v); },
        get_SyncRoot: function() { return CS.Call(2, 349, 5, false, this); },
        set_SyncRoot: function(v) { return CS.Call(3, 349, 5, false, this, v); },
        CopyTo: function(a0/*Array*/, a1/*Int32*/) { 
            return CS.Call(4, 349, 0, false, this, a0, a1); //Ret: Void
        },
        GetEnumerator: function() { 
            return CS.Call(4, 349, 1, false, this); //Ret: IEnumerator
        },
    },
};
jsb_ReplaceOrPushJsType(System$Text$RegularExpressions$GroupCollection);

// System.Text.RegularExpressions.Match
var System$Text$RegularExpressions$Match = 
{
    assemblyName: "System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089",
    fullname: "System.Text.RegularExpressions.Match",
    Kind: "Class",
    baseTypeName: "System.Text.RegularExpressions.Group",
    staticDefinition: {
        get_Empty: function() { return CS.Call(2, 350, 0, true); },
        set_Empty: function(v) { return CS.Call(3, 350, 0, true, v); },
        Synchronized$$Match: function(a0/*Match*/) { 
            return CS.Call(4, 350, 2, true, a0); //Ret: Match
        },
    },
    definition: {
        get_Groups: function() { return CS.Call(2, 350, 1, false, this); },
        set_Groups: function(v) { return CS.Call(3, 350, 1, false, this, v); },
        NextMatch: function() { 
            return CS.Call(4, 350, 0, false, this); //Ret: Match
        },
        Result: function(a0/*String*/) { 
            return CS.Call(4, 350, 1, false, this, a0); //Ret: String
        },
    },
};
jsb_ReplaceOrPushJsType(System$Text$RegularExpressions$Match);

// System.Convert
var System$Convert = 
{
    assemblyName: "mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089",
    fullname: "System.Convert",
    Kind: "Class",
    baseTypeName: "System.Object",
    staticFields: {
        DBNull: {
            get: function() { return CS.Call(0, 351, 0, true); }, 
            set: function(v) { return CS.Call(1, 351, 0, true, v); }
        },
    },
    staticDefinition: {
        ChangeType$$Object$$Type$$IFormatProvider: function(a0/*Object*/, a1/*Type*/, a2/*IFormatProvider*/) { 
            return CS.Call(4, 351, 0, true, a0, a1.get_FullName(), a2); //Ret: Object
        },
        ChangeType$$Object$$TypeCode$$IFormatProvider: function(a0/*Object*/, a1/*TypeCode*/, a2/*IFormatProvider*/) { 
            return CS.Call(4, 351, 1, true, a0, a1, a2); //Ret: Object
        },
        ChangeType$$Object$$Type: function(a0/*Object*/, a1/*Type*/) { 
            return CS.Call(4, 351, 2, true, a0, a1.get_FullName()); //Ret: Object
        },
        ChangeType$$Object$$TypeCode: function(a0/*Object*/, a1/*TypeCode*/) { 
            return CS.Call(4, 351, 3, true, a0, a1); //Ret: Object
        },
        FromBase64CharArray: function(a0/*Char[]*/, a1/*Int32*/, a2/*Int32*/) { 
            return CS.Call(4, 351, 4, true, a0, a1, a2); //Ret: Byte[]
        },
        FromBase64String: function(a0/*String*/) { 
            return CS.Call(4, 351, 5, true, a0); //Ret: Byte[]
        },
        GetTypeCode: function(a0/*Object*/) { 
            return CS.Call(4, 351, 6, true, a0); //Ret: TypeCode
        },
        IsDBNull: function(a0/*Object*/) { 
            return CS.Call(4, 351, 7, true, a0); //Ret: Boolean
        },
        ToBase64CharArray$$Byte$Array$$Int32$$Int32$$Char$Array$$Int32$$Base64FormattingOptions: function(a0/*Byte[]*/, a1/*Int32*/, a2/*Int32*/, a3/*Char[]*/, a4/*Int32*/, a5/*Base64FormattingOptions*/) { 
            return CS.Call(4, 351, 8, true, a0, a1, a2, a3, a4, a5); //Ret: Int32
        },
        ToBase64CharArray$$Byte$Array$$Int32$$Int32$$Char$Array$$Int32: function(a0/*Byte[]*/, a1/*Int32*/, a2/*Int32*/, a3/*Char[]*/, a4/*Int32*/) { 
            return CS.Call(4, 351, 9, true, a0, a1, a2, a3, a4); //Ret: Int32
        },
        ToBase64String$$Byte$Array$$Int32$$Int32$$Base64FormattingOptions: function(a0/*Byte[]*/, a1/*Int32*/, a2/*Int32*/, a3/*Base64FormattingOptions*/) { 
            return CS.Call(4, 351, 10, true, a0, a1, a2, a3); //Ret: String
        },
        ToBase64String$$Byte$Array$$Int32$$Int32: function(a0/*Byte[]*/, a1/*Int32*/, a2/*Int32*/) { 
            return CS.Call(4, 351, 11, true, a0, a1, a2); //Ret: String
        },
        ToBase64String$$Byte$Array$$Base64FormattingOptions: function(a0/*Byte[]*/, a1/*Base64FormattingOptions*/) { 
            return CS.Call(4, 351, 12, true, a0, a1); //Ret: String
        },
        ToBase64String$$Byte$Array: function(a0/*Byte[]*/) { 
            return CS.Call(4, 351, 13, true, a0); //Ret: String
        },
        ToBoolean$$String$$IFormatProvider: function(a0/*String*/, a1/*IFormatProvider*/) { 
            return CS.Call(4, 351, 14, true, a0, a1); //Ret: Boolean
        },
        ToBoolean$$Object$$IFormatProvider: function(a0/*Object*/, a1/*IFormatProvider*/) { 
            return CS.Call(4, 351, 15, true, a0, a1); //Ret: Boolean
        },
        ToBoolean$$UInt32: function(a0/*UInt32*/) { 
            return CS.Call(4, 351, 16, true, a0); //Ret: Boolean
        },
        ToBoolean$$String: function(a0/*String*/) { 
            return CS.Call(4, 351, 17, true, a0); //Ret: Boolean
        },
        ToBoolean$$Object: function(a0/*Object*/) { 
            return CS.Call(4, 351, 18, true, a0); //Ret: Boolean
        },
        ToBoolean$$UInt16: function(a0/*UInt16*/) { 
            return CS.Call(4, 351, 19, true, a0); //Ret: Boolean
        },
        ToBoolean$$UInt64: function(a0/*UInt64*/) { 
            return CS.Call(4, 351, 20, true, a0); //Ret: Boolean
        },
        ToBoolean$$DateTime: function(a0/*DateTime*/) { 
            return CS.Call(4, 351, 21, true, a0); //Ret: Boolean
        },
        ToBoolean$$Decimal: function(a0/*Decimal*/) { 
            return CS.Call(4, 351, 22, true, a0); //Ret: Boolean
        },
        ToBoolean$$Char: function(a0/*Char*/) { 
            return CS.Call(4, 351, 23, true, a0); //Ret: Boolean
        },
        ToBoolean$$Boolean: function(a0/*Boolean*/) { 
            return CS.Call(4, 351, 24, true, a0); //Ret: Boolean
        },
        ToBoolean$$Byte: function(a0/*Byte*/) { 
            return CS.Call(4, 351, 25, true, a0); //Ret: Boolean
        },
        ToBoolean$$Double: function(a0/*Double*/) { 
            return CS.Call(4, 351, 26, true, a0); //Ret: Boolean
        },
        ToBoolean$$SByte: function(a0/*SByte*/) { 
            return CS.Call(4, 351, 27, true, a0); //Ret: Boolean
        },
        ToBoolean$$Int16: function(a0/*Int16*/) { 
            return CS.Call(4, 351, 28, true, a0); //Ret: Boolean
        },
        ToBoolean$$Int64: function(a0/*Int64*/) { 
            return CS.Call(4, 351, 29, true, a0); //Ret: Boolean
        },
        ToBoolean$$Single: function(a0/*Single*/) { 
            return CS.Call(4, 351, 30, true, a0); //Ret: Boolean
        },
        ToBoolean$$Int32: function(a0/*Int32*/) { 
            return CS.Call(4, 351, 31, true, a0); //Ret: Boolean
        },
        ToByte$$String$$Int32: function(a0/*String*/, a1/*Int32*/) { 
            return CS.Call(4, 351, 32, true, a0, a1); //Ret: Byte
        },
        ToByte$$String$$IFormatProvider: function(a0/*String*/, a1/*IFormatProvider*/) { 
            return CS.Call(4, 351, 33, true, a0, a1); //Ret: Byte
        },
        ToByte$$Object$$IFormatProvider: function(a0/*Object*/, a1/*IFormatProvider*/) { 
            return CS.Call(4, 351, 34, true, a0, a1); //Ret: Byte
        },
        ToByte$$Object: function(a0/*Object*/) { 
            return CS.Call(4, 351, 35, true, a0); //Ret: Byte
        },
        ToByte$$UInt32: function(a0/*UInt32*/) { 
            return CS.Call(4, 351, 36, true, a0); //Ret: Byte
        },
        ToByte$$UInt16: function(a0/*UInt16*/) { 
            return CS.Call(4, 351, 37, true, a0); //Ret: Byte
        },
        ToByte$$UInt64: function(a0/*UInt64*/) { 
            return CS.Call(4, 351, 38, true, a0); //Ret: Byte
        },
        ToByte$$String: function(a0/*String*/) { 
            return CS.Call(4, 351, 39, true, a0); //Ret: Byte
        },
        ToByte$$Boolean: function(a0/*Boolean*/) { 
            return CS.Call(4, 351, 40, true, a0); //Ret: Byte
        },
        ToByte$$Decimal: function(a0/*Decimal*/) { 
            return CS.Call(4, 351, 41, true, a0); //Ret: Byte
        },
        ToByte$$Byte: function(a0/*Byte*/) { 
            return CS.Call(4, 351, 42, true, a0); //Ret: Byte
        },
        ToByte$$DateTime: function(a0/*DateTime*/) { 
            return CS.Call(4, 351, 43, true, a0); //Ret: Byte
        },
        ToByte$$Char: function(a0/*Char*/) { 
            return CS.Call(4, 351, 44, true, a0); //Ret: Byte
        },
        ToByte$$Double: function(a0/*Double*/) { 
            return CS.Call(4, 351, 45, true, a0); //Ret: Byte
        },
        ToByte$$SByte: function(a0/*SByte*/) { 
            return CS.Call(4, 351, 46, true, a0); //Ret: Byte
        },
        ToByte$$Int16: function(a0/*Int16*/) { 
            return CS.Call(4, 351, 47, true, a0); //Ret: Byte
        },
        ToByte$$Int64: function(a0/*Int64*/) { 
            return CS.Call(4, 351, 48, true, a0); //Ret: Byte
        },
        ToByte$$Single: function(a0/*Single*/) { 
            return CS.Call(4, 351, 49, true, a0); //Ret: Byte
        },
        ToByte$$Int32: function(a0/*Int32*/) { 
            return CS.Call(4, 351, 50, true, a0); //Ret: Byte
        },
        ToChar$$String$$IFormatProvider: function(a0/*String*/, a1/*IFormatProvider*/) { 
            return CS.Call(4, 351, 51, true, a0, a1); //Ret: Char
        },
        ToChar$$Object$$IFormatProvider: function(a0/*Object*/, a1/*IFormatProvider*/) { 
            return CS.Call(4, 351, 52, true, a0, a1); //Ret: Char
        },
        ToChar$$UInt32: function(a0/*UInt32*/) { 
            return CS.Call(4, 351, 53, true, a0); //Ret: Char
        },
        ToChar$$String: function(a0/*String*/) { 
            return CS.Call(4, 351, 54, true, a0); //Ret: Char
        },
        ToChar$$Object: function(a0/*Object*/) { 
            return CS.Call(4, 351, 55, true, a0); //Ret: Char
        },
        ToChar$$UInt16: function(a0/*UInt16*/) { 
            return CS.Call(4, 351, 56, true, a0); //Ret: Char
        },
        ToChar$$UInt64: function(a0/*UInt64*/) { 
            return CS.Call(4, 351, 57, true, a0); //Ret: Char
        },
        ToChar$$DateTime: function(a0/*DateTime*/) { 
            return CS.Call(4, 351, 58, true, a0); //Ret: Char
        },
        ToChar$$Decimal: function(a0/*Decimal*/) { 
            return CS.Call(4, 351, 59, true, a0); //Ret: Char
        },
        ToChar$$Char: function(a0/*Char*/) { 
            return CS.Call(4, 351, 60, true, a0); //Ret: Char
        },
        ToChar$$Boolean: function(a0/*Boolean*/) { 
            return CS.Call(4, 351, 61, true, a0); //Ret: Char
        },
        ToChar$$Byte: function(a0/*Byte*/) { 
            return CS.Call(4, 351, 62, true, a0); //Ret: Char
        },
        ToChar$$Double: function(a0/*Double*/) { 
            return CS.Call(4, 351, 63, true, a0); //Ret: Char
        },
        ToChar$$Single: function(a0/*Single*/) { 
            return CS.Call(4, 351, 64, true, a0); //Ret: Char
        },
        ToChar$$SByte: function(a0/*SByte*/) { 
            return CS.Call(4, 351, 65, true, a0); //Ret: Char
        },
        ToChar$$Int16: function(a0/*Int16*/) { 
            return CS.Call(4, 351, 66, true, a0); //Ret: Char
        },
        ToChar$$Int32: function(a0/*Int32*/) { 
            return CS.Call(4, 351, 67, true, a0); //Ret: Char
        },
        ToChar$$Int64: function(a0/*Int64*/) { 
            return CS.Call(4, 351, 68, true, a0); //Ret: Char
        },
        ToDateTime$$Object$$IFormatProvider: function(a0/*Object*/, a1/*IFormatProvider*/) { 
            return CS.Call(4, 351, 69, true, a0, a1); //Ret: DateTime
        },
        ToDateTime$$String$$IFormatProvider: function(a0/*String*/, a1/*IFormatProvider*/) { 
            return CS.Call(4, 351, 70, true, a0, a1); //Ret: DateTime
        },
        ToDateTime$$SByte: function(a0/*SByte*/) { 
            return CS.Call(4, 351, 71, true, a0); //Ret: DateTime
        },
        ToDateTime$$Object: function(a0/*Object*/) { 
            return CS.Call(4, 351, 72, true, a0); //Ret: DateTime
        },
        ToDateTime$$UInt64: function(a0/*UInt64*/) { 
            return CS.Call(4, 351, 73, true, a0); //Ret: DateTime
        },
        ToDateTime$$UInt32: function(a0/*UInt32*/) { 
            return CS.Call(4, 351, 74, true, a0); //Ret: DateTime
        },
        ToDateTime$$UInt16: function(a0/*UInt16*/) { 
            return CS.Call(4, 351, 75, true, a0); //Ret: DateTime
        },
        ToDateTime$$Single: function(a0/*Single*/) { 
            return CS.Call(4, 351, 76, true, a0); //Ret: DateTime
        },
        ToDateTime$$Char: function(a0/*Char*/) { 
            return CS.Call(4, 351, 77, true, a0); //Ret: DateTime
        },
        ToDateTime$$DateTime: function(a0/*DateTime*/) { 
            return CS.Call(4, 351, 78, true, a0); //Ret: DateTime
        },
        ToDateTime$$Byte: function(a0/*Byte*/) { 
            return CS.Call(4, 351, 79, true, a0); //Ret: DateTime
        },
        ToDateTime$$String: function(a0/*String*/) { 
            return CS.Call(4, 351, 80, true, a0); //Ret: DateTime
        },
        ToDateTime$$Boolean: function(a0/*Boolean*/) { 
            return CS.Call(4, 351, 81, true, a0); //Ret: DateTime
        },
        ToDateTime$$Int32: function(a0/*Int32*/) { 
            return CS.Call(4, 351, 82, true, a0); //Ret: DateTime
        },
        ToDateTime$$Int64: function(a0/*Int64*/) { 
            return CS.Call(4, 351, 83, true, a0); //Ret: DateTime
        },
        ToDateTime$$Int16: function(a0/*Int16*/) { 
            return CS.Call(4, 351, 84, true, a0); //Ret: DateTime
        },
        ToDateTime$$Decimal: function(a0/*Decimal*/) { 
            return CS.Call(4, 351, 85, true, a0); //Ret: DateTime
        },
        ToDateTime$$Double: function(a0/*Double*/) { 
            return CS.Call(4, 351, 86, true, a0); //Ret: DateTime
        },
        ToDecimal$$String$$IFormatProvider: function(a0/*String*/, a1/*IFormatProvider*/) { 
            return CS.Call(4, 351, 87, true, a0, a1); //Ret: Decimal
        },
        ToDecimal$$Object$$IFormatProvider: function(a0/*Object*/, a1/*IFormatProvider*/) { 
            return CS.Call(4, 351, 88, true, a0, a1); //Ret: Decimal
        },
        ToDecimal$$UInt32: function(a0/*UInt32*/) { 
            return CS.Call(4, 351, 89, true, a0); //Ret: Decimal
        },
        ToDecimal$$String: function(a0/*String*/) { 
            return CS.Call(4, 351, 90, true, a0); //Ret: Decimal
        },
        ToDecimal$$Object: function(a0/*Object*/) { 
            return CS.Call(4, 351, 91, true, a0); //Ret: Decimal
        },
        ToDecimal$$UInt16: function(a0/*UInt16*/) { 
            return CS.Call(4, 351, 92, true, a0); //Ret: Decimal
        },
        ToDecimal$$UInt64: function(a0/*UInt64*/) { 
            return CS.Call(4, 351, 93, true, a0); //Ret: Decimal
        },
        ToDecimal$$DateTime: function(a0/*DateTime*/) { 
            return CS.Call(4, 351, 94, true, a0); //Ret: Decimal
        },
        ToDecimal$$Decimal: function(a0/*Decimal*/) { 
            return CS.Call(4, 351, 95, true, a0); //Ret: Decimal
        },
        ToDecimal$$Char: function(a0/*Char*/) { 
            return CS.Call(4, 351, 96, true, a0); //Ret: Decimal
        },
        ToDecimal$$Boolean: function(a0/*Boolean*/) { 
            return CS.Call(4, 351, 97, true, a0); //Ret: Decimal
        },
        ToDecimal$$Byte: function(a0/*Byte*/) { 
            return CS.Call(4, 351, 98, true, a0); //Ret: Decimal
        },
        ToDecimal$$Double: function(a0/*Double*/) { 
            return CS.Call(4, 351, 99, true, a0); //Ret: Decimal
        },
        ToDecimal$$SByte: function(a0/*SByte*/) { 
            return CS.Call(4, 351, 100, true, a0); //Ret: Decimal
        },
        ToDecimal$$Int16: function(a0/*Int16*/) { 
            return CS.Call(4, 351, 101, true, a0); //Ret: Decimal
        },
        ToDecimal$$Int64: function(a0/*Int64*/) { 
            return CS.Call(4, 351, 102, true, a0); //Ret: Decimal
        },
        ToDecimal$$Single: function(a0/*Single*/) { 
            return CS.Call(4, 351, 103, true, a0); //Ret: Decimal
        },
        ToDecimal$$Int32: function(a0/*Int32*/) { 
            return CS.Call(4, 351, 104, true, a0); //Ret: Decimal
        },
        ToDouble$$String$$IFormatProvider: function(a0/*String*/, a1/*IFormatProvider*/) { 
            return CS.Call(4, 351, 105, true, a0, a1); //Ret: Double
        },
        ToDouble$$Object$$IFormatProvider: function(a0/*Object*/, a1/*IFormatProvider*/) { 
            return CS.Call(4, 351, 106, true, a0, a1); //Ret: Double
        },
        ToDouble$$UInt32: function(a0/*UInt32*/) { 
            return CS.Call(4, 351, 107, true, a0); //Ret: Double
        },
        ToDouble$$String: function(a0/*String*/) { 
            return CS.Call(4, 351, 108, true, a0); //Ret: Double
        },
        ToDouble$$Object: function(a0/*Object*/) { 
            return CS.Call(4, 351, 109, true, a0); //Ret: Double
        },
        ToDouble$$UInt16: function(a0/*UInt16*/) { 
            return CS.Call(4, 351, 110, true, a0); //Ret: Double
        },
        ToDouble$$UInt64: function(a0/*UInt64*/) { 
            return CS.Call(4, 351, 111, true, a0); //Ret: Double
        },
        ToDouble$$Boolean: function(a0/*Boolean*/) { 
            return CS.Call(4, 351, 112, true, a0); //Ret: Double
        },
        ToDouble$$Decimal: function(a0/*Decimal*/) { 
            return CS.Call(4, 351, 113, true, a0); //Ret: Double
        },
        ToDouble$$Byte: function(a0/*Byte*/) { 
            return CS.Call(4, 351, 114, true, a0); //Ret: Double
        },
        ToDouble$$DateTime: function(a0/*DateTime*/) { 
            return CS.Call(4, 351, 115, true, a0); //Ret: Double
        },
        ToDouble$$Char: function(a0/*Char*/) { 
            return CS.Call(4, 351, 116, true, a0); //Ret: Double
        },
        ToDouble$$Double: function(a0/*Double*/) { 
            return CS.Call(4, 351, 117, true, a0); //Ret: Double
        },
        ToDouble$$SByte: function(a0/*SByte*/) { 
            return CS.Call(4, 351, 118, true, a0); //Ret: Double
        },
        ToDouble$$Int16: function(a0/*Int16*/) { 
            return CS.Call(4, 351, 119, true, a0); //Ret: Double
        },
        ToDouble$$Int64: function(a0/*Int64*/) { 
            return CS.Call(4, 351, 120, true, a0); //Ret: Double
        },
        ToDouble$$Single: function(a0/*Single*/) { 
            return CS.Call(4, 351, 121, true, a0); //Ret: Double
        },
        ToDouble$$Int32: function(a0/*Int32*/) { 
            return CS.Call(4, 351, 122, true, a0); //Ret: Double
        },
        ToInt16$$String$$Int32: function(a0/*String*/, a1/*Int32*/) { 
            return CS.Call(4, 351, 123, true, a0, a1); //Ret: Int16
        },
        ToInt16$$String$$IFormatProvider: function(a0/*String*/, a1/*IFormatProvider*/) { 
            return CS.Call(4, 351, 124, true, a0, a1); //Ret: Int16
        },
        ToInt16$$Object$$IFormatProvider: function(a0/*Object*/, a1/*IFormatProvider*/) { 
            return CS.Call(4, 351, 125, true, a0, a1); //Ret: Int16
        },
        ToInt16$$Object: function(a0/*Object*/) { 
            return CS.Call(4, 351, 126, true, a0); //Ret: Int16
        },
        ToInt16$$UInt32: function(a0/*UInt32*/) { 
            return CS.Call(4, 351, 127, true, a0); //Ret: Int16
        },
        ToInt16$$UInt16: function(a0/*UInt16*/) { 
            return CS.Call(4, 351, 128, true, a0); //Ret: Int16
        },
        ToInt16$$UInt64: function(a0/*UInt64*/) { 
            return CS.Call(4, 351, 129, true, a0); //Ret: Int16
        },
        ToInt16$$String: function(a0/*String*/) { 
            return CS.Call(4, 351, 130, true, a0); //Ret: Int16
        },
        ToInt16$$DateTime: function(a0/*DateTime*/) { 
            return CS.Call(4, 351, 131, true, a0); //Ret: Int16
        },
        ToInt16$$Decimal: function(a0/*Decimal*/) { 
            return CS.Call(4, 351, 132, true, a0); //Ret: Int16
        },
        ToInt16$$Char: function(a0/*Char*/) { 
            return CS.Call(4, 351, 133, true, a0); //Ret: Int16
        },
        ToInt16$$Boolean: function(a0/*Boolean*/) { 
            return CS.Call(4, 351, 134, true, a0); //Ret: Int16
        },
        ToInt16$$Byte: function(a0/*Byte*/) { 
            return CS.Call(4, 351, 135, true, a0); //Ret: Int16
        },
        ToInt16$$Double: function(a0/*Double*/) { 
            return CS.Call(4, 351, 136, true, a0); //Ret: Int16
        },
        ToInt16$$SByte: function(a0/*SByte*/) { 
            return CS.Call(4, 351, 137, true, a0); //Ret: Int16
        },
        ToInt16$$Int16: function(a0/*Int16*/) { 
            return CS.Call(4, 351, 138, true, a0); //Ret: Int16
        },
        ToInt16$$Int64: function(a0/*Int64*/) { 
            return CS.Call(4, 351, 139, true, a0); //Ret: Int16
        },
        ToInt16$$Single: function(a0/*Single*/) { 
            return CS.Call(4, 351, 140, true, a0); //Ret: Int16
        },
        ToInt16$$Int32: function(a0/*Int32*/) { 
            return CS.Call(4, 351, 141, true, a0); //Ret: Int16
        },
        ToInt32$$String$$Int32: function(a0/*String*/, a1/*Int32*/) { 
            return CS.Call(4, 351, 142, true, a0, a1); //Ret: Int32
        },
        ToInt32$$String$$IFormatProvider: function(a0/*String*/, a1/*IFormatProvider*/) { 
            return CS.Call(4, 351, 143, true, a0, a1); //Ret: Int32
        },
        ToInt32$$Object$$IFormatProvider: function(a0/*Object*/, a1/*IFormatProvider*/) { 
            return CS.Call(4, 351, 144, true, a0, a1); //Ret: Int32
        },
        ToInt32$$Object: function(a0/*Object*/) { 
            return CS.Call(4, 351, 145, true, a0); //Ret: Int32
        },
        ToInt32$$UInt32: function(a0/*UInt32*/) { 
            return CS.Call(4, 351, 146, true, a0); //Ret: Int32
        },
        ToInt32$$UInt16: function(a0/*UInt16*/) { 
            return CS.Call(4, 351, 147, true, a0); //Ret: Int32
        },
        ToInt32$$UInt64: function(a0/*UInt64*/) { 
            return CS.Call(4, 351, 148, true, a0); //Ret: Int32
        },
        ToInt32$$String: function(a0/*String*/) { 
            return CS.Call(4, 351, 149, true, a0); //Ret: Int32
        },
        ToInt32$$Boolean: function(a0/*Boolean*/) { 
            return CS.Call(4, 351, 150, true, a0); //Ret: Int32
        },
        ToInt32$$Decimal: function(a0/*Decimal*/) { 
            return CS.Call(4, 351, 151, true, a0); //Ret: Int32
        },
        ToInt32$$Byte: function(a0/*Byte*/) { 
            return CS.Call(4, 351, 152, true, a0); //Ret: Int32
        },
        ToInt32$$DateTime: function(a0/*DateTime*/) { 
            return CS.Call(4, 351, 153, true, a0); //Ret: Int32
        },
        ToInt32$$Char: function(a0/*Char*/) { 
            return CS.Call(4, 351, 154, true, a0); //Ret: Int32
        },
        ToInt32$$Double: function(a0/*Double*/) { 
            return CS.Call(4, 351, 155, true, a0); //Ret: Int32
        },
        ToInt32$$SByte: function(a0/*SByte*/) { 
            return CS.Call(4, 351, 156, true, a0); //Ret: Int32
        },
        ToInt32$$Int16: function(a0/*Int16*/) { 
            return CS.Call(4, 351, 157, true, a0); //Ret: Int32
        },
        ToInt32$$Int64: function(a0/*Int64*/) { 
            return CS.Call(4, 351, 158, true, a0); //Ret: Int32
        },
        ToInt32$$Single: function(a0/*Single*/) { 
            return CS.Call(4, 351, 159, true, a0); //Ret: Int32
        },
        ToInt32$$Int32: function(a0/*Int32*/) { 
            return CS.Call(4, 351, 160, true, a0); //Ret: Int32
        },
        ToInt64$$String$$Int32: function(a0/*String*/, a1/*Int32*/) { 
            return CS.Call(4, 351, 161, true, a0, a1); //Ret: Int64
        },
        ToInt64$$String$$IFormatProvider: function(a0/*String*/, a1/*IFormatProvider*/) { 
            return CS.Call(4, 351, 162, true, a0, a1); //Ret: Int64
        },
        ToInt64$$Object$$IFormatProvider: function(a0/*Object*/, a1/*IFormatProvider*/) { 
            return CS.Call(4, 351, 163, true, a0, a1); //Ret: Int64
        },
        ToInt64$$Object: function(a0/*Object*/) { 
            return CS.Call(4, 351, 164, true, a0); //Ret: Int64
        },
        ToInt64$$UInt32: function(a0/*UInt32*/) { 
            return CS.Call(4, 351, 165, true, a0); //Ret: Int64
        },
        ToInt64$$UInt16: function(a0/*UInt16*/) { 
            return CS.Call(4, 351, 166, true, a0); //Ret: Int64
        },
        ToInt64$$UInt64: function(a0/*UInt64*/) { 
            return CS.Call(4, 351, 167, true, a0); //Ret: Int64
        },
        ToInt64$$String: function(a0/*String*/) { 
            return CS.Call(4, 351, 168, true, a0); //Ret: Int64
        },
        ToInt64$$DateTime: function(a0/*DateTime*/) { 
            return CS.Call(4, 351, 169, true, a0); //Ret: Int64
        },
        ToInt64$$Decimal: function(a0/*Decimal*/) { 
            return CS.Call(4, 351, 170, true, a0); //Ret: Int64
        },
        ToInt64$$Char: function(a0/*Char*/) { 
            return CS.Call(4, 351, 171, true, a0); //Ret: Int64
        },
        ToInt64$$Boolean: function(a0/*Boolean*/) { 
            return CS.Call(4, 351, 172, true, a0); //Ret: Int64
        },
        ToInt64$$Byte: function(a0/*Byte*/) { 
            return CS.Call(4, 351, 173, true, a0); //Ret: Int64
        },
        ToInt64$$Double: function(a0/*Double*/) { 
            return CS.Call(4, 351, 174, true, a0); //Ret: Int64
        },
        ToInt64$$SByte: function(a0/*SByte*/) { 
            return CS.Call(4, 351, 175, true, a0); //Ret: Int64
        },
        ToInt64$$Int16: function(a0/*Int16*/) { 
            return CS.Call(4, 351, 176, true, a0); //Ret: Int64
        },
        ToInt64$$Int64: function(a0/*Int64*/) { 
            return CS.Call(4, 351, 177, true, a0); //Ret: Int64
        },
        ToInt64$$Single: function(a0/*Single*/) { 
            return CS.Call(4, 351, 178, true, a0); //Ret: Int64
        },
        ToInt64$$Int32: function(a0/*Int32*/) { 
            return CS.Call(4, 351, 179, true, a0); //Ret: Int64
        },
        ToSByte$$String$$IFormatProvider: function(a0/*String*/, a1/*IFormatProvider*/) { 
            return CS.Call(4, 351, 180, true, a0, a1); //Ret: SByte
        },
        ToSByte$$String$$Int32: function(a0/*String*/, a1/*Int32*/) { 
            return CS.Call(4, 351, 181, true, a0, a1); //Ret: SByte
        },
        ToSByte$$Object$$IFormatProvider: function(a0/*Object*/, a1/*IFormatProvider*/) { 
            return CS.Call(4, 351, 182, true, a0, a1); //Ret: SByte
        },
        ToSByte$$Object: function(a0/*Object*/) { 
            return CS.Call(4, 351, 183, true, a0); //Ret: SByte
        },
        ToSByte$$Decimal: function(a0/*Decimal*/) { 
            return CS.Call(4, 351, 184, true, a0); //Ret: SByte
        },
        ToSByte$$UInt64: function(a0/*UInt64*/) { 
            return CS.Call(4, 351, 185, true, a0); //Ret: SByte
        },
        ToSByte$$UInt16: function(a0/*UInt16*/) { 
            return CS.Call(4, 351, 186, true, a0); //Ret: SByte
        },
        ToSByte$$Char: function(a0/*Char*/) { 
            return CS.Call(4, 351, 187, true, a0); //Ret: SByte
        },
        ToSByte$$DateTime: function(a0/*DateTime*/) { 
            return CS.Call(4, 351, 188, true, a0); //Ret: SByte
        },
        ToSByte$$Boolean: function(a0/*Boolean*/) { 
            return CS.Call(4, 351, 189, true, a0); //Ret: SByte
        },
        ToSByte$$Byte: function(a0/*Byte*/) { 
            return CS.Call(4, 351, 190, true, a0); //Ret: SByte
        },
        ToSByte$$SByte: function(a0/*SByte*/) { 
            return CS.Call(4, 351, 191, true, a0); //Ret: SByte
        },
        ToSByte$$Int16: function(a0/*Int16*/) { 
            return CS.Call(4, 351, 192, true, a0); //Ret: SByte
        },
        ToSByte$$Int32: function(a0/*Int32*/) { 
            return CS.Call(4, 351, 193, true, a0); //Ret: SByte
        },
        ToSByte$$Int64: function(a0/*Int64*/) { 
            return CS.Call(4, 351, 194, true, a0); //Ret: SByte
        },
        ToSByte$$Double: function(a0/*Double*/) { 
            return CS.Call(4, 351, 195, true, a0); //Ret: SByte
        },
        ToSByte$$UInt32: function(a0/*UInt32*/) { 
            return CS.Call(4, 351, 196, true, a0); //Ret: SByte
        },
        ToSByte$$String: function(a0/*String*/) { 
            return CS.Call(4, 351, 197, true, a0); //Ret: SByte
        },
        ToSByte$$Single: function(a0/*Single*/) { 
            return CS.Call(4, 351, 198, true, a0); //Ret: SByte
        },
        ToSingle$$String$$IFormatProvider: function(a0/*String*/, a1/*IFormatProvider*/) { 
            return CS.Call(4, 351, 199, true, a0, a1); //Ret: Single
        },
        ToSingle$$Object$$IFormatProvider: function(a0/*Object*/, a1/*IFormatProvider*/) { 
            return CS.Call(4, 351, 200, true, a0, a1); //Ret: Single
        },
        ToSingle$$UInt32: function(a0/*UInt32*/) { 
            return CS.Call(4, 351, 201, true, a0); //Ret: Single
        },
        ToSingle$$String: function(a0/*String*/) { 
            return CS.Call(4, 351, 202, true, a0); //Ret: Single
        },
        ToSingle$$Object: function(a0/*Object*/) { 
            return CS.Call(4, 351, 203, true, a0); //Ret: Single
        },
        ToSingle$$UInt16: function(a0/*UInt16*/) { 
            return CS.Call(4, 351, 204, true, a0); //Ret: Single
        },
        ToSingle$$UInt64: function(a0/*UInt64*/) { 
            return CS.Call(4, 351, 205, true, a0); //Ret: Single
        },
        ToSingle$$DateTime: function(a0/*DateTime*/) { 
            return CS.Call(4, 351, 206, true, a0); //Ret: Single
        },
        ToSingle$$Decimal: function(a0/*Decimal*/) { 
            return CS.Call(4, 351, 207, true, a0); //Ret: Single
        },
        ToSingle$$Char: function(a0/*Char*/) { 
            return CS.Call(4, 351, 208, true, a0); //Ret: Single
        },
        ToSingle$$Boolean: function(a0/*Boolean*/) { 
            return CS.Call(4, 351, 209, true, a0); //Ret: Single
        },
        ToSingle$$Byte: function(a0/*Byte*/) { 
            return CS.Call(4, 351, 210, true, a0); //Ret: Single
        },
        ToSingle$$Double: function(a0/*Double*/) { 
            return CS.Call(4, 351, 211, true, a0); //Ret: Single
        },
        ToSingle$$SByte: function(a0/*SByte*/) { 
            return CS.Call(4, 351, 212, true, a0); //Ret: Single
        },
        ToSingle$$Int16: function(a0/*Int16*/) { 
            return CS.Call(4, 351, 213, true, a0); //Ret: Single
        },
        ToSingle$$Int64: function(a0/*Int64*/) { 
            return CS.Call(4, 351, 214, true, a0); //Ret: Single
        },
        ToSingle$$Single: function(a0/*Single*/) { 
            return CS.Call(4, 351, 215, true, a0); //Ret: Single
        },
        ToSingle$$Int32: function(a0/*Int32*/) { 
            return CS.Call(4, 351, 216, true, a0); //Ret: Single
        },
        toString$$Int64$$IFormatProvider: function(a0/*Int64*/, a1/*IFormatProvider*/) { 
            return CS.Call(4, 351, 217, true, a0, a1); //Ret: String
        },
        toString$$Object$$IFormatProvider: function(a0/*Object*/, a1/*IFormatProvider*/) { 
            return CS.Call(4, 351, 218, true, a0, a1); //Ret: String
        },
        toString$$SByte$$IFormatProvider: function(a0/*SByte*/, a1/*IFormatProvider*/) { 
            return CS.Call(4, 351, 219, true, a0, a1); //Ret: String
        },
        toString$$Int32$$Int32: function(a0/*Int32*/, a1/*Int32*/) { 
            return CS.Call(4, 351, 220, true, a0, a1); //Ret: String
        },
        toString$$Int32$$IFormatProvider: function(a0/*Int32*/, a1/*IFormatProvider*/) { 
            return CS.Call(4, 351, 221, true, a0, a1); //Ret: String
        },
        toString$$Int64$$Int32: function(a0/*Int64*/, a1/*Int32*/) { 
            return CS.Call(4, 351, 222, true, a0, a1); //Ret: String
        },
        toString$$UInt32$$IFormatProvider: function(a0/*UInt32*/, a1/*IFormatProvider*/) { 
            return CS.Call(4, 351, 223, true, a0, a1); //Ret: String
        },
        toString$$UInt64$$IFormatProvider: function(a0/*UInt64*/, a1/*IFormatProvider*/) { 
            return CS.Call(4, 351, 224, true, a0, a1); //Ret: String
        },
        toString$$UInt16$$IFormatProvider: function(a0/*UInt16*/, a1/*IFormatProvider*/) { 
            return CS.Call(4, 351, 225, true, a0, a1); //Ret: String
        },
        toString$$Int16$$Int32: function(a0/*Int16*/, a1/*Int32*/) { 
            return CS.Call(4, 351, 226, true, a0, a1); //Ret: String
        },
        toString$$Int16$$IFormatProvider: function(a0/*Int16*/, a1/*IFormatProvider*/) { 
            return CS.Call(4, 351, 227, true, a0, a1); //Ret: String
        },
        toString$$String$$IFormatProvider: function(a0/*String*/, a1/*IFormatProvider*/) { 
            return CS.Call(4, 351, 228, true, a0, a1); //Ret: String
        },
        toString$$Char$$IFormatProvider: function(a0/*Char*/, a1/*IFormatProvider*/) { 
            return CS.Call(4, 351, 229, true, a0, a1); //Ret: String
        },
        toString$$DateTime$$IFormatProvider: function(a0/*DateTime*/, a1/*IFormatProvider*/) { 
            return CS.Call(4, 351, 230, true, a0, a1); //Ret: String
        },
        toString$$Decimal$$IFormatProvider: function(a0/*Decimal*/, a1/*IFormatProvider*/) { 
            return CS.Call(4, 351, 231, true, a0, a1); //Ret: String
        },
        toString$$Boolean$$IFormatProvider: function(a0/*Boolean*/, a1/*IFormatProvider*/) { 
            return CS.Call(4, 351, 232, true, a0, a1); //Ret: String
        },
        toString$$Byte$$IFormatProvider: function(a0/*Byte*/, a1/*IFormatProvider*/) { 
            return CS.Call(4, 351, 233, true, a0, a1); //Ret: String
        },
        toString$$Byte$$Int32: function(a0/*Byte*/, a1/*Int32*/) { 
            return CS.Call(4, 351, 234, true, a0, a1); //Ret: String
        },
        toString$$Single$$IFormatProvider: function(a0/*Single*/, a1/*IFormatProvider*/) { 
            return CS.Call(4, 351, 235, true, a0, a1); //Ret: String
        },
        toString$$Double$$IFormatProvider: function(a0/*Double*/, a1/*IFormatProvider*/) { 
            return CS.Call(4, 351, 236, true, a0, a1); //Ret: String
        },
        toString$$UInt16: function(a0/*UInt16*/) { 
            return CS.Call(4, 351, 237, true, a0); //Ret: String
        },
        toString$$UInt64: function(a0/*UInt64*/) { 
            return CS.Call(4, 351, 238, true, a0); //Ret: String
        },
        toString$$Char: function(a0/*Char*/) { 
            return CS.Call(4, 351, 239, true, a0); //Ret: String
        },
        toString$$Int32: function(a0/*Int32*/) { 
            return CS.Call(4, 351, 240, true, a0); //Ret: String
        },
        toString$$Boolean: function(a0/*Boolean*/) { 
            return CS.Call(4, 351, 241, true, a0); //Ret: String
        },
        toString$$Int64: function(a0/*Int64*/) { 
            return CS.Call(4, 351, 242, true, a0); //Ret: String
        },
        toString$$Byte: function(a0/*Byte*/) { 
            return CS.Call(4, 351, 243, true, a0); //Ret: String
        },
        toString$$Single: function(a0/*Single*/) { 
            return CS.Call(4, 351, 244, true, a0); //Ret: String
        },
        toString$$Object: function(a0/*Object*/) { 
            return CS.Call(4, 351, 245, true, a0); //Ret: String
        },
        toString$$Int16: function(a0/*Int16*/) { 
            return CS.Call(4, 351, 246, true, a0); //Ret: String
        },
        toString$$Double: function(a0/*Double*/) { 
            return CS.Call(4, 351, 247, true, a0); //Ret: String
        },
        toString$$SByte: function(a0/*SByte*/) { 
            return CS.Call(4, 351, 248, true, a0); //Ret: String
        },
        toString$$DateTime: function(a0/*DateTime*/) { 
            return CS.Call(4, 351, 249, true, a0); //Ret: String
        },
        toString$$UInt32: function(a0/*UInt32*/) { 
            return CS.Call(4, 351, 250, true, a0); //Ret: String
        },
        toString$$Decimal: function(a0/*Decimal*/) { 
            return CS.Call(4, 351, 251, true, a0); //Ret: String
        },
        toString$$String: function(a0/*String*/) { 
            return CS.Call(4, 351, 252, true, a0); //Ret: String
        },
        ToUInt16$$String$$Int32: function(a0/*String*/, a1/*Int32*/) { 
            return CS.Call(4, 351, 253, true, a0, a1); //Ret: UInt16
        },
        ToUInt16$$String$$IFormatProvider: function(a0/*String*/, a1/*IFormatProvider*/) { 
            return CS.Call(4, 351, 254, true, a0, a1); //Ret: UInt16
        },
        ToUInt16$$Object$$IFormatProvider: function(a0/*Object*/, a1/*IFormatProvider*/) { 
            return CS.Call(4, 351, 255, true, a0, a1); //Ret: UInt16
        },
        ToUInt16$$UInt32: function(a0/*UInt32*/) { 
            return CS.Call(4, 351, 256, true, a0); //Ret: UInt16
        },
        ToUInt16$$Object: function(a0/*Object*/) { 
            return CS.Call(4, 351, 257, true, a0); //Ret: UInt16
        },
        ToUInt16$$UInt16: function(a0/*UInt16*/) { 
            return CS.Call(4, 351, 258, true, a0); //Ret: UInt16
        },
        ToUInt16$$UInt64: function(a0/*UInt64*/) { 
            return CS.Call(4, 351, 259, true, a0); //Ret: UInt16
        },
        ToUInt16$$String: function(a0/*String*/) { 
            return CS.Call(4, 351, 260, true, a0); //Ret: UInt16
        },
        ToUInt16$$DateTime: function(a0/*DateTime*/) { 
            return CS.Call(4, 351, 261, true, a0); //Ret: UInt16
        },
        ToUInt16$$Decimal: function(a0/*Decimal*/) { 
            return CS.Call(4, 351, 262, true, a0); //Ret: UInt16
        },
        ToUInt16$$Char: function(a0/*Char*/) { 
            return CS.Call(4, 351, 263, true, a0); //Ret: UInt16
        },
        ToUInt16$$Boolean: function(a0/*Boolean*/) { 
            return CS.Call(4, 351, 264, true, a0); //Ret: UInt16
        },
        ToUInt16$$Byte: function(a0/*Byte*/) { 
            return CS.Call(4, 351, 265, true, a0); //Ret: UInt16
        },
        ToUInt16$$Double: function(a0/*Double*/) { 
            return CS.Call(4, 351, 266, true, a0); //Ret: UInt16
        },
        ToUInt16$$SByte: function(a0/*SByte*/) { 
            return CS.Call(4, 351, 267, true, a0); //Ret: UInt16
        },
        ToUInt16$$Int16: function(a0/*Int16*/) { 
            return CS.Call(4, 351, 268, true, a0); //Ret: UInt16
        },
        ToUInt16$$Int64: function(a0/*Int64*/) { 
            return CS.Call(4, 351, 269, true, a0); //Ret: UInt16
        },
        ToUInt16$$Single: function(a0/*Single*/) { 
            return CS.Call(4, 351, 270, true, a0); //Ret: UInt16
        },
        ToUInt16$$Int32: function(a0/*Int32*/) { 
            return CS.Call(4, 351, 271, true, a0); //Ret: UInt16
        },
        ToUInt32$$String$$Int32: function(a0/*String*/, a1/*Int32*/) { 
            return CS.Call(4, 351, 272, true, a0, a1); //Ret: UInt32
        },
        ToUInt32$$String$$IFormatProvider: function(a0/*String*/, a1/*IFormatProvider*/) { 
            return CS.Call(4, 351, 273, true, a0, a1); //Ret: UInt32
        },
        ToUInt32$$Object$$IFormatProvider: function(a0/*Object*/, a1/*IFormatProvider*/) { 
            return CS.Call(4, 351, 274, true, a0, a1); //Ret: UInt32
        },
        ToUInt32$$Object: function(a0/*Object*/) { 
            return CS.Call(4, 351, 275, true, a0); //Ret: UInt32
        },
        ToUInt32$$UInt32: function(a0/*UInt32*/) { 
            return CS.Call(4, 351, 276, true, a0); //Ret: UInt32
        },
        ToUInt32$$UInt16: function(a0/*UInt16*/) { 
            return CS.Call(4, 351, 277, true, a0); //Ret: UInt32
        },
        ToUInt32$$UInt64: function(a0/*UInt64*/) { 
            return CS.Call(4, 351, 278, true, a0); //Ret: UInt32
        },
        ToUInt32$$String: function(a0/*String*/) { 
            return CS.Call(4, 351, 279, true, a0); //Ret: UInt32
        },
        ToUInt32$$Boolean: function(a0/*Boolean*/) { 
            return CS.Call(4, 351, 280, true, a0); //Ret: UInt32
        },
        ToUInt32$$Decimal: function(a0/*Decimal*/) { 
            return CS.Call(4, 351, 281, true, a0); //Ret: UInt32
        },
        ToUInt32$$Byte: function(a0/*Byte*/) { 
            return CS.Call(4, 351, 282, true, a0); //Ret: UInt32
        },
        ToUInt32$$DateTime: function(a0/*DateTime*/) { 
            return CS.Call(4, 351, 283, true, a0); //Ret: UInt32
        },
        ToUInt32$$Char: function(a0/*Char*/) { 
            return CS.Call(4, 351, 284, true, a0); //Ret: UInt32
        },
        ToUInt32$$Double: function(a0/*Double*/) { 
            return CS.Call(4, 351, 285, true, a0); //Ret: UInt32
        },
        ToUInt32$$SByte: function(a0/*SByte*/) { 
            return CS.Call(4, 351, 286, true, a0); //Ret: UInt32
        },
        ToUInt32$$Int16: function(a0/*Int16*/) { 
            return CS.Call(4, 351, 287, true, a0); //Ret: UInt32
        },
        ToUInt32$$Int64: function(a0/*Int64*/) { 
            return CS.Call(4, 351, 288, true, a0); //Ret: UInt32
        },
        ToUInt32$$Single: function(a0/*Single*/) { 
            return CS.Call(4, 351, 289, true, a0); //Ret: UInt32
        },
        ToUInt32$$Int32: function(a0/*Int32*/) { 
            return CS.Call(4, 351, 290, true, a0); //Ret: UInt32
        },
        ToUInt64$$String$$Int32: function(a0/*String*/, a1/*Int32*/) { 
            return CS.Call(4, 351, 291, true, a0, a1); //Ret: UInt64
        },
        ToUInt64$$String$$IFormatProvider: function(a0/*String*/, a1/*IFormatProvider*/) { 
            return CS.Call(4, 351, 292, true, a0, a1); //Ret: UInt64
        },
        ToUInt64$$Object$$IFormatProvider: function(a0/*Object*/, a1/*IFormatProvider*/) { 
            return CS.Call(4, 351, 293, true, a0, a1); //Ret: UInt64
        },
        ToUInt64$$Object: function(a0/*Object*/) { 
            return CS.Call(4, 351, 294, true, a0); //Ret: UInt64
        },
        ToUInt64$$UInt32: function(a0/*UInt32*/) { 
            return CS.Call(4, 351, 295, true, a0); //Ret: UInt64
        },
        ToUInt64$$UInt16: function(a0/*UInt16*/) { 
            return CS.Call(4, 351, 296, true, a0); //Ret: UInt64
        },
        ToUInt64$$UInt64: function(a0/*UInt64*/) { 
            return CS.Call(4, 351, 297, true, a0); //Ret: UInt64
        },
        ToUInt64$$String: function(a0/*String*/) { 
            return CS.Call(4, 351, 298, true, a0); //Ret: UInt64
        },
        ToUInt64$$DateTime: function(a0/*DateTime*/) { 
            return CS.Call(4, 351, 299, true, a0); //Ret: UInt64
        },
        ToUInt64$$Decimal: function(a0/*Decimal*/) { 
            return CS.Call(4, 351, 300, true, a0); //Ret: UInt64
        },
        ToUInt64$$Char: function(a0/*Char*/) { 
            return CS.Call(4, 351, 301, true, a0); //Ret: UInt64
        },
        ToUInt64$$Boolean: function(a0/*Boolean*/) { 
            return CS.Call(4, 351, 302, true, a0); //Ret: UInt64
        },
        ToUInt64$$Byte: function(a0/*Byte*/) { 
            return CS.Call(4, 351, 303, true, a0); //Ret: UInt64
        },
        ToUInt64$$Double: function(a0/*Double*/) { 
            return CS.Call(4, 351, 304, true, a0); //Ret: UInt64
        },
        ToUInt64$$SByte: function(a0/*SByte*/) { 
            return CS.Call(4, 351, 305, true, a0); //Ret: UInt64
        },
        ToUInt64$$Int16: function(a0/*Int16*/) { 
            return CS.Call(4, 351, 306, true, a0); //Ret: UInt64
        },
        ToUInt64$$Int64: function(a0/*Int64*/) { 
            return CS.Call(4, 351, 307, true, a0); //Ret: UInt64
        },
        ToUInt64$$Single: function(a0/*Single*/) { 
            return CS.Call(4, 351, 308, true, a0); //Ret: UInt64
        },
        ToUInt64$$Int32: function(a0/*Int32*/) { 
            return CS.Call(4, 351, 309, true, a0); //Ret: UInt64
        },
    },
};
jsb_ReplaceOrPushJsType(System$Convert);

// System.Text.Encoding
var System$Text$Encoding = 
{
    assemblyName: "mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089",
    fullname: "System.Text.Encoding",
    Kind: "Class",
    baseTypeName: "System.Object",
    interfaceNames: ["System.ICloneable"],
    staticDefinition: {
        get_ASCII: function() { return CS.Call(2, 352, 14, true); },
        set_ASCII: function(v) { return CS.Call(3, 352, 14, true, v); },
        get_BigEndianUnicode: function() { return CS.Call(2, 352, 15, true); },
        set_BigEndianUnicode: function(v) { return CS.Call(3, 352, 15, true, v); },
        get_Default: function() { return CS.Call(2, 352, 16, true); },
        set_Default: function(v) { return CS.Call(3, 352, 16, true, v); },
        get_UTF7: function() { return CS.Call(2, 352, 17, true); },
        set_UTF7: function(v) { return CS.Call(3, 352, 17, true, v); },
        get_UTF8: function() { return CS.Call(2, 352, 18, true); },
        set_UTF8: function(v) { return CS.Call(3, 352, 18, true, v); },
        get_Unicode: function() { return CS.Call(2, 352, 19, true); },
        set_Unicode: function(v) { return CS.Call(3, 352, 19, true, v); },
        get_UTF32: function() { return CS.Call(2, 352, 20, true); },
        set_UTF32: function(v) { return CS.Call(3, 352, 20, true, v); },
        Convert$$Encoding$$Encoding$$Byte$Array$$Int32$$Int32: function(a0/*Encoding*/, a1/*Encoding*/, a2/*Byte[]*/, a3/*Int32*/, a4/*Int32*/) { 
            return CS.Call(4, 352, 25, true, a0, a1, a2, a3, a4); //Ret: Byte[]
        },
        Convert$$Encoding$$Encoding$$Byte$Array: function(a0/*Encoding*/, a1/*Encoding*/, a2/*Byte[]*/) { 
            return CS.Call(4, 352, 26, true, a0, a1, a2); //Ret: Byte[]
        },
        GetEncoding$$Int32$$EncoderFallback$$DecoderFallback: function(a0/*Int32*/, a1/*EncoderFallback*/, a2/*DecoderFallback*/) { 
            return CS.Call(4, 352, 27, true, a0, a1, a2); //Ret: Encoding
        },
        GetEncoding$$String$$EncoderFallback$$DecoderFallback: function(a0/*String*/, a1/*EncoderFallback*/, a2/*DecoderFallback*/) { 
            return CS.Call(4, 352, 28, true, a0, a1, a2); //Ret: Encoding
        },
        GetEncoding$$Int32: function(a0/*Int32*/) { 
            return CS.Call(4, 352, 29, true, a0); //Ret: Encoding
        },
        GetEncoding$$String: function(a0/*String*/) { 
            return CS.Call(4, 352, 30, true, a0); //Ret: Encoding
        },
        GetEncodings: function() { 
            return CS.Call(4, 352, 31, true); //Ret: EncodingInfo[]
        },
    },
    definition: {
        get_IsReadOnly: function() { return CS.Call(2, 352, 0, false, this); },
        set_IsReadOnly: function(v) { return CS.Call(3, 352, 0, false, this, v); },
        get_IsSingleByte: function() { return CS.Call(2, 352, 1, false, this); },
        set_IsSingleByte: function(v) { return CS.Call(3, 352, 1, false, this, v); },
        get_DecoderFallback: function() { return CS.Call(2, 352, 2, false, this); },
        set_DecoderFallback: function(v) { return CS.Call(3, 352, 2, false, this, v); },
        get_EncoderFallback: function() { return CS.Call(2, 352, 3, false, this); },
        set_EncoderFallback: function(v) { return CS.Call(3, 352, 3, false, this, v); },
        get_BodyName: function() { return CS.Call(2, 352, 4, false, this); },
        set_BodyName: function(v) { return CS.Call(3, 352, 4, false, this, v); },
        get_CodePage: function() { return CS.Call(2, 352, 5, false, this); },
        set_CodePage: function(v) { return CS.Call(3, 352, 5, false, this, v); },
        get_EncodingName: function() { return CS.Call(2, 352, 6, false, this); },
        set_EncodingName: function(v) { return CS.Call(3, 352, 6, false, this, v); },
        get_HeaderName: function() { return CS.Call(2, 352, 7, false, this); },
        set_HeaderName: function(v) { return CS.Call(3, 352, 7, false, this, v); },
        get_IsBrowserDisplay: function() { return CS.Call(2, 352, 8, false, this); },
        set_IsBrowserDisplay: function(v) { return CS.Call(3, 352, 8, false, this, v); },
        get_IsBrowserSave: function() { return CS.Call(2, 352, 9, false, this); },
        set_IsBrowserSave: function(v) { return CS.Call(3, 352, 9, false, this, v); },
        get_IsMailNewsDisplay: function() { return CS.Call(2, 352, 10, false, this); },
        set_IsMailNewsDisplay: function(v) { return CS.Call(3, 352, 10, false, this, v); },
        get_IsMailNewsSave: function() { return CS.Call(2, 352, 11, false, this); },
        set_IsMailNewsSave: function(v) { return CS.Call(3, 352, 11, false, this, v); },
        get_WebName: function() { return CS.Call(2, 352, 12, false, this); },
        set_WebName: function(v) { return CS.Call(3, 352, 12, false, this, v); },
        get_WindowsCodePage: function() { return CS.Call(2, 352, 13, false, this); },
        set_WindowsCodePage: function(v) { return CS.Call(3, 352, 13, false, this, v); },
        Clone: function() { 
            return CS.Call(4, 352, 0, false, this); //Ret: Object
        },
        Equals: function(a0/*Object*/) { 
            return CS.Call(4, 352, 1, false, this, a0); //Ret: Boolean
        },
        GetByteCount$$Char$Array$$Int32$$Int32: function(a0/*Char[]*/, a1/*Int32*/, a2/*Int32*/) { 
            return CS.Call(4, 352, 2, false, this, a0, a1, a2); //Ret: Int32
        },
        GetByteCount$$Char$Array: function(a0/*Char[]*/) { 
            return CS.Call(4, 352, 3, false, this, a0); //Ret: Int32
        },
        GetByteCount$$String: function(a0/*String*/) { 
            return CS.Call(4, 352, 4, false, this, a0); //Ret: Int32
        },
        GetBytes$$String$$Int32$$Int32$$Byte$Array$$Int32: function(a0/*String*/, a1/*Int32*/, a2/*Int32*/, a3/*Byte[]*/, a4/*Int32*/) { 
            return CS.Call(4, 352, 5, false, this, a0, a1, a2, a3, a4); //Ret: Int32
        },
        GetBytes$$Char$Array$$Int32$$Int32$$Byte$Array$$Int32: function(a0/*Char[]*/, a1/*Int32*/, a2/*Int32*/, a3/*Byte[]*/, a4/*Int32*/) { 
            return CS.Call(4, 352, 6, false, this, a0, a1, a2, a3, a4); //Ret: Int32
        },
        GetBytes$$Char$Array$$Int32$$Int32: function(a0/*Char[]*/, a1/*Int32*/, a2/*Int32*/) { 
            return CS.Call(4, 352, 7, false, this, a0, a1, a2); //Ret: Byte[]
        },
        GetBytes$$Char$Array: function(a0/*Char[]*/) { 
            return CS.Call(4, 352, 8, false, this, a0); //Ret: Byte[]
        },
        GetBytes$$String: function(a0/*String*/) { 
            return CS.Call(4, 352, 9, false, this, a0); //Ret: Byte[]
        },
        GetCharCount$$Byte$Array$$Int32$$Int32: function(a0/*Byte[]*/, a1/*Int32*/, a2/*Int32*/) { 
            return CS.Call(4, 352, 10, false, this, a0, a1, a2); //Ret: Int32
        },
        GetCharCount$$Byte$Array: function(a0/*Byte[]*/) { 
            return CS.Call(4, 352, 11, false, this, a0); //Ret: Int32
        },
        GetChars$$Byte$Array$$Int32$$Int32$$Char$Array$$Int32: function(a0/*Byte[]*/, a1/*Int32*/, a2/*Int32*/, a3/*Char[]*/, a4/*Int32*/) { 
            return CS.Call(4, 352, 12, false, this, a0, a1, a2, a3, a4); //Ret: Int32
        },
        GetChars$$Byte$Array$$Int32$$Int32: function(a0/*Byte[]*/, a1/*Int32*/, a2/*Int32*/) { 
            return CS.Call(4, 352, 13, false, this, a0, a1, a2); //Ret: Char[]
        },
        GetChars$$Byte$Array: function(a0/*Byte[]*/) { 
            return CS.Call(4, 352, 14, false, this, a0); //Ret: Char[]
        },
        GetDecoder: function() { 
            return CS.Call(4, 352, 15, false, this); //Ret: Decoder
        },
        GetEncoder: function() { 
            return CS.Call(4, 352, 16, false, this); //Ret: Encoder
        },
        GetHashCode: function() { 
            return CS.Call(4, 352, 17, false, this); //Ret: Int32
        },
        GetMaxByteCount: function(a0/*Int32*/) { 
            return CS.Call(4, 352, 18, false, this, a0); //Ret: Int32
        },
        GetMaxCharCount: function(a0/*Int32*/) { 
            return CS.Call(4, 352, 19, false, this, a0); //Ret: Int32
        },
        GetPreamble: function() { 
            return CS.Call(4, 352, 20, false, this); //Ret: Byte[]
        },
        GetString$$Byte$Array$$Int32$$Int32: function(a0/*Byte[]*/, a1/*Int32*/, a2/*Int32*/) { 
            return CS.Call(4, 352, 21, false, this, a0, a1, a2); //Ret: String
        },
        GetString$$Byte$Array: function(a0/*Byte[]*/) { 
            return CS.Call(4, 352, 22, false, this, a0); //Ret: String
        },
        IsAlwaysNormalized$$NormalizationForm: function(a0/*NormalizationForm*/) { 
            return CS.Call(4, 352, 23, false, this, a0); //Ret: Boolean
        },
        IsAlwaysNormalized: function() { 
            return CS.Call(4, 352, 24, false, this); //Ret: Boolean
        },
    },
};
jsb_ReplaceOrPushJsType(System$Text$Encoding);

// System.IO.File
var System$IO$File = 
{
    assemblyName: "mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089",
    fullname: "System.IO.File",
    Kind: "Class",
    baseTypeName: "System.Object",
    staticDefinition: {
        AppendAllText$$String$$String$$Encoding: function(a0/*String*/, a1/*String*/, a2/*Encoding*/) { 
            return CS.Call(4, 353, 0, true, a0, a1, a2); //Ret: Void
        },
        AppendAllText$$String$$String: function(a0/*String*/, a1/*String*/) { 
            return CS.Call(4, 353, 1, true, a0, a1); //Ret: Void
        },
        AppendText: function(a0/*String*/) { 
            return CS.Call(4, 353, 2, true, a0); //Ret: StreamWriter
        },
        Copy$$String$$String$$Boolean: function(a0/*String*/, a1/*String*/, a2/*Boolean*/) { 
            return CS.Call(4, 353, 3, true, a0, a1, a2); //Ret: Void
        },
        Copy$$String$$String: function(a0/*String*/, a1/*String*/) { 
            return CS.Call(4, 353, 4, true, a0, a1); //Ret: Void
        },
        Create$$String$$Int32$$FileOptions$$FileSecurity: function(a0/*String*/, a1/*Int32*/, a2/*FileOptions*/, a3/*FileSecurity*/) { 
            return CS.Call(4, 353, 5, true, a0, a1, a2, a3); //Ret: FileStream
        },
        Create$$String$$Int32$$FileOptions: function(a0/*String*/, a1/*Int32*/, a2/*FileOptions*/) { 
            return CS.Call(4, 353, 6, true, a0, a1, a2); //Ret: FileStream
        },
        Create$$String$$Int32: function(a0/*String*/, a1/*Int32*/) { 
            return CS.Call(4, 353, 7, true, a0, a1); //Ret: FileStream
        },
        Create$$String: function(a0/*String*/) { 
            return CS.Call(4, 353, 8, true, a0); //Ret: FileStream
        },
        CreateText: function(a0/*String*/) { 
            return CS.Call(4, 353, 9, true, a0); //Ret: StreamWriter
        },
        Decrypt: function(a0/*String*/) { 
            return CS.Call(4, 353, 10, true, a0); //Ret: Void
        },
        Delete: function(a0/*String*/) { 
            return CS.Call(4, 353, 11, true, a0); //Ret: Void
        },
        Encrypt: function(a0/*String*/) { 
            return CS.Call(4, 353, 12, true, a0); //Ret: Void
        },
        Exists: function(a0/*String*/) { 
            return CS.Call(4, 353, 13, true, a0); //Ret: Boolean
        },
        GetAccessControl$$String$$AccessControlSections: function(a0/*String*/, a1/*AccessControlSections*/) { 
            return CS.Call(4, 353, 14, true, a0, a1); //Ret: FileSecurity
        },
        GetAccessControl$$String: function(a0/*String*/) { 
            return CS.Call(4, 353, 15, true, a0); //Ret: FileSecurity
        },
        GetAttributes: function(a0/*String*/) { 
            return CS.Call(4, 353, 16, true, a0); //Ret: FileAttributes
        },
        GetCreationTime: function(a0/*String*/) { 
            return CS.Call(4, 353, 17, true, a0); //Ret: DateTime
        },
        GetCreationTimeUtc: function(a0/*String*/) { 
            return CS.Call(4, 353, 18, true, a0); //Ret: DateTime
        },
        GetLastAccessTime: function(a0/*String*/) { 
            return CS.Call(4, 353, 19, true, a0); //Ret: DateTime
        },
        GetLastAccessTimeUtc: function(a0/*String*/) { 
            return CS.Call(4, 353, 20, true, a0); //Ret: DateTime
        },
        GetLastWriteTime: function(a0/*String*/) { 
            return CS.Call(4, 353, 21, true, a0); //Ret: DateTime
        },
        GetLastWriteTimeUtc: function(a0/*String*/) { 
            return CS.Call(4, 353, 22, true, a0); //Ret: DateTime
        },
        Move: function(a0/*String*/, a1/*String*/) { 
            return CS.Call(4, 353, 23, true, a0, a1); //Ret: Void
        },
        Open$$String$$FileMode$$FileAccess$$FileShare: function(a0/*String*/, a1/*FileMode*/, a2/*FileAccess*/, a3/*FileShare*/) { 
            return CS.Call(4, 353, 24, true, a0, a1, a2, a3); //Ret: FileStream
        },
        Open$$String$$FileMode$$FileAccess: function(a0/*String*/, a1/*FileMode*/, a2/*FileAccess*/) { 
            return CS.Call(4, 353, 25, true, a0, a1, a2); //Ret: FileStream
        },
        Open$$String$$FileMode: function(a0/*String*/, a1/*FileMode*/) { 
            return CS.Call(4, 353, 26, true, a0, a1); //Ret: FileStream
        },
        OpenRead: function(a0/*String*/) { 
            return CS.Call(4, 353, 27, true, a0); //Ret: FileStream
        },
        OpenText: function(a0/*String*/) { 
            return CS.Call(4, 353, 28, true, a0); //Ret: StreamReader
        },
        OpenWrite: function(a0/*String*/) { 
            return CS.Call(4, 353, 29, true, a0); //Ret: FileStream
        },
        ReadAllBytes: function(a0/*String*/) { 
            return CS.Call(4, 353, 30, true, a0); //Ret: Byte[]
        },
        ReadAllLines$$String$$Encoding: function(a0/*String*/, a1/*Encoding*/) { 
            return CS.Call(4, 353, 31, true, a0, a1); //Ret: String[]
        },
        ReadAllLines$$String: function(a0/*String*/) { 
            return CS.Call(4, 353, 32, true, a0); //Ret: String[]
        },
        ReadAllText$$String$$Encoding: function(a0/*String*/, a1/*Encoding*/) { 
            return CS.Call(4, 353, 33, true, a0, a1); //Ret: String
        },
        ReadAllText$$String: function(a0/*String*/) { 
            return CS.Call(4, 353, 34, true, a0); //Ret: String
        },
        Replace$$String$$String$$String$$Boolean: function(a0/*String*/, a1/*String*/, a2/*String*/, a3/*Boolean*/) { 
            return CS.Call(4, 353, 35, true, a0, a1, a2, a3); //Ret: Void
        },
        Replace$$String$$String$$String: function(a0/*String*/, a1/*String*/, a2/*String*/) { 
            return CS.Call(4, 353, 36, true, a0, a1, a2); //Ret: Void
        },
        SetAccessControl: function(a0/*String*/, a1/*FileSecurity*/) { 
            return CS.Call(4, 353, 37, true, a0, a1); //Ret: Void
        },
        SetAttributes: function(a0/*String*/, a1/*FileAttributes*/) { 
            return CS.Call(4, 353, 38, true, a0, a1); //Ret: Void
        },
        SetCreationTime: function(a0/*String*/, a1/*DateTime*/) { 
            return CS.Call(4, 353, 39, true, a0, a1); //Ret: Void
        },
        SetCreationTimeUtc: function(a0/*String*/, a1/*DateTime*/) { 
            return CS.Call(4, 353, 40, true, a0, a1); //Ret: Void
        },
        SetLastAccessTime: function(a0/*String*/, a1/*DateTime*/) { 
            return CS.Call(4, 353, 41, true, a0, a1); //Ret: Void
        },
        SetLastAccessTimeUtc: function(a0/*String*/, a1/*DateTime*/) { 
            return CS.Call(4, 353, 42, true, a0, a1); //Ret: Void
        },
        SetLastWriteTime: function(a0/*String*/, a1/*DateTime*/) { 
            return CS.Call(4, 353, 43, true, a0, a1); //Ret: Void
        },
        SetLastWriteTimeUtc: function(a0/*String*/, a1/*DateTime*/) { 
            return CS.Call(4, 353, 44, true, a0, a1); //Ret: Void
        },
        WriteAllBytes: function(a0/*String*/, a1/*Byte[]*/) { 
            return CS.Call(4, 353, 45, true, a0, a1); //Ret: Void
        },
        WriteAllLines$$String$$String$Array$$Encoding: function(a0/*String*/, a1/*String[]*/, a2/*Encoding*/) { 
            return CS.Call(4, 353, 46, true, a0, a1, a2); //Ret: Void
        },
        WriteAllLines$$String$$String$Array: function(a0/*String*/, a1/*String[]*/) { 
            return CS.Call(4, 353, 47, true, a0, a1); //Ret: Void
        },
        WriteAllText$$String$$String$$Encoding: function(a0/*String*/, a1/*String*/, a2/*Encoding*/) { 
            return CS.Call(4, 353, 48, true, a0, a1, a2); //Ret: Void
        },
        WriteAllText$$String$$String: function(a0/*String*/, a1/*String*/) { 
            return CS.Call(4, 353, 49, true, a0, a1); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(System$IO$File);

// System.IO.Directory
var System$IO$Directory = 
{
    assemblyName: "mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089",
    fullname: "System.IO.Directory",
    Kind: "Class",
    baseTypeName: "System.Object",
    staticDefinition: {
        CreateDirectory$$String$$DirectorySecurity: function(a0/*String*/, a1/*DirectorySecurity*/) { 
            return CS.Call(4, 354, 0, true, a0, a1); //Ret: DirectoryInfo
        },
        CreateDirectory$$String: function(a0/*String*/) { 
            return CS.Call(4, 354, 1, true, a0); //Ret: DirectoryInfo
        },
        Delete$$String$$Boolean: function(a0/*String*/, a1/*Boolean*/) { 
            return CS.Call(4, 354, 2, true, a0, a1); //Ret: Void
        },
        Delete$$String: function(a0/*String*/) { 
            return CS.Call(4, 354, 3, true, a0); //Ret: Void
        },
        Exists: function(a0/*String*/) { 
            return CS.Call(4, 354, 4, true, a0); //Ret: Boolean
        },
        GetAccessControl$$String$$AccessControlSections: function(a0/*String*/, a1/*AccessControlSections*/) { 
            return CS.Call(4, 354, 5, true, a0, a1); //Ret: DirectorySecurity
        },
        GetAccessControl$$String: function(a0/*String*/) { 
            return CS.Call(4, 354, 6, true, a0); //Ret: DirectorySecurity
        },
        GetCreationTime: function(a0/*String*/) { 
            return CS.Call(4, 354, 7, true, a0); //Ret: DateTime
        },
        GetCreationTimeUtc: function(a0/*String*/) { 
            return CS.Call(4, 354, 8, true, a0); //Ret: DateTime
        },
        GetCurrentDirectory: function() { 
            return CS.Call(4, 354, 9, true); //Ret: String
        },
        GetDirectories$$String$$String$$SearchOption: function(a0/*String*/, a1/*String*/, a2/*SearchOption*/) { 
            return CS.Call(4, 354, 10, true, a0, a1, a2); //Ret: String[]
        },
        GetDirectories$$String$$String: function(a0/*String*/, a1/*String*/) { 
            return CS.Call(4, 354, 11, true, a0, a1); //Ret: String[]
        },
        GetDirectories$$String: function(a0/*String*/) { 
            return CS.Call(4, 354, 12, true, a0); //Ret: String[]
        },
        GetDirectoryRoot: function(a0/*String*/) { 
            return CS.Call(4, 354, 13, true, a0); //Ret: String
        },
        GetFiles$$String$$String$$SearchOption: function(a0/*String*/, a1/*String*/, a2/*SearchOption*/) { 
            return CS.Call(4, 354, 14, true, a0, a1, a2); //Ret: String[]
        },
        GetFiles$$String$$String: function(a0/*String*/, a1/*String*/) { 
            return CS.Call(4, 354, 15, true, a0, a1); //Ret: String[]
        },
        GetFiles$$String: function(a0/*String*/) { 
            return CS.Call(4, 354, 16, true, a0); //Ret: String[]
        },
        GetFileSystemEntries$$String$$String: function(a0/*String*/, a1/*String*/) { 
            return CS.Call(4, 354, 17, true, a0, a1); //Ret: String[]
        },
        GetFileSystemEntries$$String: function(a0/*String*/) { 
            return CS.Call(4, 354, 18, true, a0); //Ret: String[]
        },
        GetLastAccessTime: function(a0/*String*/) { 
            return CS.Call(4, 354, 19, true, a0); //Ret: DateTime
        },
        GetLastAccessTimeUtc: function(a0/*String*/) { 
            return CS.Call(4, 354, 20, true, a0); //Ret: DateTime
        },
        GetLastWriteTime: function(a0/*String*/) { 
            return CS.Call(4, 354, 21, true, a0); //Ret: DateTime
        },
        GetLastWriteTimeUtc: function(a0/*String*/) { 
            return CS.Call(4, 354, 22, true, a0); //Ret: DateTime
        },
        GetLogicalDrives: function() { 
            return CS.Call(4, 354, 23, true); //Ret: String[]
        },
        GetParent: function(a0/*String*/) { 
            return CS.Call(4, 354, 24, true, a0); //Ret: DirectoryInfo
        },
        Move: function(a0/*String*/, a1/*String*/) { 
            return CS.Call(4, 354, 25, true, a0, a1); //Ret: Void
        },
        SetAccessControl: function(a0/*String*/, a1/*DirectorySecurity*/) { 
            return CS.Call(4, 354, 26, true, a0, a1); //Ret: Void
        },
        SetCreationTime: function(a0/*String*/, a1/*DateTime*/) { 
            return CS.Call(4, 354, 27, true, a0, a1); //Ret: Void
        },
        SetCreationTimeUtc: function(a0/*String*/, a1/*DateTime*/) { 
            return CS.Call(4, 354, 28, true, a0, a1); //Ret: Void
        },
        SetCurrentDirectory: function(a0/*String*/) { 
            return CS.Call(4, 354, 29, true, a0); //Ret: Void
        },
        SetLastAccessTime: function(a0/*String*/, a1/*DateTime*/) { 
            return CS.Call(4, 354, 30, true, a0, a1); //Ret: Void
        },
        SetLastAccessTimeUtc: function(a0/*String*/, a1/*DateTime*/) { 
            return CS.Call(4, 354, 31, true, a0, a1); //Ret: Void
        },
        SetLastWriteTime: function(a0/*String*/, a1/*DateTime*/) { 
            return CS.Call(4, 354, 32, true, a0, a1); //Ret: Void
        },
        SetLastWriteTimeUtc: function(a0/*String*/, a1/*DateTime*/) { 
            return CS.Call(4, 354, 33, true, a0, a1); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(System$IO$Directory);

// System.ICloneable
var System$ICloneable = 
{
    assemblyName: "mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089",
    fullname: "System.ICloneable",
    Kind: "Interface",
    definition: {
        Clone: function() { 
            return CS.Call(4, 355, 0, false, this); //Ret: Object
        },
    },
};
jsb_ReplaceOrPushJsType(System$ICloneable);

// System.Collections.IEnumerable
var System$Collections$IEnumerable = 
{
    assemblyName: "mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089",
    fullname: "System.Collections.IEnumerable",
    Kind: "Interface",
    definition: {
        GetEnumerator: function() { 
            return CS.Call(4, 356, 0, false, this); //Ret: IEnumerator
        },
    },
};
jsb_ReplaceOrPushJsType(System$Collections$IEnumerable);

// System.Runtime.Serialization.IDeserializationCallback
var System$Runtime$Serialization$IDeserializationCallback = 
{
    assemblyName: "mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089",
    fullname: "System.Runtime.Serialization.IDeserializationCallback",
    Kind: "Interface",
    definition: {
        OnDeserialization: function(a0/*Object*/) { 
            return CS.Call(4, 357, 0, false, this, a0); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(System$Runtime$Serialization$IDeserializationCallback);

// System.Runtime.Serialization.ISerializable
var System$Runtime$Serialization$ISerializable = 
{
    assemblyName: "mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089",
    fullname: "System.Runtime.Serialization.ISerializable",
    Kind: "Interface",
    definition: {
        GetObjectData: function(a0/*SerializationInfo*/, a1/*StreamingContext*/) { 
            return CS.Call(4, 358, 0, false, this, a0, a1); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(System$Runtime$Serialization$ISerializable);

// System.Runtime.InteropServices._Exception
var System$Runtime$InteropServices$_Exception = 
{
    assemblyName: "mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089",
    fullname: "System.Runtime.InteropServices._Exception",
    Kind: "Interface",
    definition: {
        get_HelpLink: function() { return CS.Call(2, 359, 0, false, this); },
        set_HelpLink: function(v) { return CS.Call(3, 359, 0, false, this, v); },
        get_InnerException: function() { return CS.Call(2, 359, 1, false, this); },
        set_InnerException: function(v) { return CS.Call(3, 359, 1, false, this, v); },
        get_Message: function() { return CS.Call(2, 359, 2, false, this); },
        set_Message: function(v) { return CS.Call(3, 359, 2, false, this, v); },
        get_Source: function() { return CS.Call(2, 359, 3, false, this); },
        set_Source: function(v) { return CS.Call(3, 359, 3, false, this, v); },
        get_StackTrace: function() { return CS.Call(2, 359, 4, false, this); },
        set_StackTrace: function(v) { return CS.Call(3, 359, 4, false, this, v); },
        get_TargetSite: function() { return CS.Call(2, 359, 5, false, this); },
        set_TargetSite: function(v) { return CS.Call(3, 359, 5, false, this, v); },
        Equals: function(a0/*Object*/) { 
            return CS.Call(4, 359, 0, false, this, a0); //Ret: Boolean
        },
        GetBaseException: function() { 
            return CS.Call(4, 359, 1, false, this); //Ret: Exception
        },
        GetHashCode: function() { 
            return CS.Call(4, 359, 2, false, this); //Ret: Int32
        },
        GetObjectData: function(a0/*SerializationInfo*/, a1/*StreamingContext*/) { 
            return CS.Call(4, 359, 3, false, this, a0, a1); //Ret: Void
        },
        GetType: function() { 
            return CS.Call(4, 359, 4, false, this); //Ret: Type
        },
        toString: function() { 
            return CS.Call(4, 359, 5, false, this); //Ret: String
        },
    },
};
jsb_ReplaceOrPushJsType(System$Runtime$InteropServices$_Exception);

// UnityEngine.Experimental.Director.DirectorPlayer
var UnityEngine$Experimental$Director$DirectorPlayer = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Experimental.Director.DirectorPlayer",
    Kind: "Class",
    baseTypeName: "UnityEngine.Behaviour",
    definition: {
        ctor: function() { CS.Call(5, 360, 0, true, this); },
        GetTime: function() { 
            return CS.Call(4, 360, 0, false, this); //Ret: Double
        },
        GetTimeUpdateMode: function() { 
            return CS.Call(4, 360, 1, false, this); //Ret: DirectorUpdateMode
        },
        Play: function(a0/*Playable*/) { 
            return CS.Call(4, 360, 2, false, this, a0); //Ret: Void
        },
        SetTime: function(a0/*Double*/) { 
            return CS.Call(4, 360, 3, false, this, a0); //Ret: Void
        },
        SetTimeUpdateMode: function(a0/*DirectorUpdateMode*/) { 
            return CS.Call(4, 360, 4, false, this, a0); //Ret: Void
        },
        Stop: function() { 
            return CS.Call(4, 360, 5, false, this); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Experimental$Director$DirectorPlayer);

// UnityEngine.ILogger
var UnityEngine$ILogger = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.ILogger",
    Kind: "Interface",
    interfaceNames: ["UnityEngine.ILogHandler"],
    definition: {
        get_logHandler: function() { return CS.Call(2, 361, 0, false, this); },
        set_logHandler: function(v) { return CS.Call(3, 361, 0, false, this, v); },
        get_logEnabled: function() { return CS.Call(2, 361, 1, false, this); },
        set_logEnabled: function(v) { return CS.Call(3, 361, 1, false, this, v); },
        get_filterLogType: function() { return CS.Call(2, 361, 2, false, this); },
        set_filterLogType: function(v) { return CS.Call(3, 361, 2, false, this, v); },
        IsLogTypeAllowed: function(a0/*LogType*/) { 
            return CS.Call(4, 361, 0, false, this, a0); //Ret: Boolean
        },
        Log$$LogType$$String$$Object$$Object: function(a0/*LogType*/, a1/*String*/, a2/*Object*/, a3/*Object*/) { 
            return CS.Call(4, 361, 1, false, this, a0, a1, a2, a3); //Ret: Void
        },
        Log$$LogType$$String$$Object: function(a0/*LogType*/, a1/*String*/, a2/*Object*/) { 
            return CS.Call(4, 361, 2, false, this, a0, a1, a2); //Ret: Void
        },
        Log$$String$$Object$$Object: function(a0/*String*/, a1/*Object*/, a2/*Object*/) { 
            return CS.Call(4, 361, 3, false, this, a0, a1, a2); //Ret: Void
        },
        Log$$LogType$$Object$$Object: function(a0/*LogType*/, a1/*Object*/, a2/*Object*/) { 
            return CS.Call(4, 361, 4, false, this, a0, a1, a2); //Ret: Void
        },
        Log$$String$$Object: function(a0/*String*/, a1/*Object*/) { 
            return CS.Call(4, 361, 5, false, this, a0, a1); //Ret: Void
        },
        Log$$LogType$$Object: function(a0/*LogType*/, a1/*Object*/) { 
            return CS.Call(4, 361, 6, false, this, a0, a1); //Ret: Void
        },
        Log$$Object: function(a0/*Object*/) { 
            return CS.Call(4, 361, 7, false, this, a0); //Ret: Void
        },
        LogError$$String$$Object$$Object: function(a0/*String*/, a1/*Object*/, a2/*Object*/) { 
            return CS.Call(4, 361, 8, false, this, a0, a1, a2); //Ret: Void
        },
        LogError$$String$$Object: function(a0/*String*/, a1/*Object*/) { 
            return CS.Call(4, 361, 9, false, this, a0, a1); //Ret: Void
        },
        LogException: function(a0/*Exception*/) { 
            return CS.Call(4, 361, 10, false, this, a0); //Ret: Void
        },
        LogFormat: function(a0/*LogType*/, a1/*String*/, a2/*Object[]*/) { 
            return CS.Call(4, 361, 11, false, this, a0, a1, jsb_formatParamsArray(2, a2, arguments)); //Ret: Void
        },
        LogWarning$$String$$Object$$Object: function(a0/*String*/, a1/*Object*/, a2/*Object*/) { 
            return CS.Call(4, 361, 12, false, this, a0, a1, a2); //Ret: Void
        },
        LogWarning$$String$$Object: function(a0/*String*/, a1/*Object*/) { 
            return CS.Call(4, 361, 13, false, this, a0, a1); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$ILogger);

// UnityEngine.ILogHandler
var UnityEngine$ILogHandler = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.ILogHandler",
    Kind: "Interface",
    definition: {
        LogException: function(a0/*Exception*/, a1/*Object*/) { 
            return CS.Call(4, 362, 0, false, this, a0, a1); //Ret: Void
        },
        LogFormat: function(a0/*LogType*/, a1/*Object*/, a2/*String*/, a3/*Object[]*/) { 
            return CS.Call(4, 362, 1, false, this, a0, a1, a2, jsb_formatParamsArray(3, a3, arguments)); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$ILogHandler);

// DG.Tweening.IDOTweenInit
var DG$Tweening$IDOTweenInit = 
{
    assemblyName: "DOTween, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "DG.Tweening.IDOTweenInit",
    Kind: "Interface",
    definition: {
        SetCapacity: function(a0/*Int32*/, a1/*Int32*/) { 
            return CS.Call(4, 363, 0, false, this, a0, a1); //Ret: IDOTweenInit
        },
    },
};
jsb_ReplaceOrPushJsType(DG$Tweening$IDOTweenInit);
